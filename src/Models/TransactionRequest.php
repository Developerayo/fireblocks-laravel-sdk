<?php
/**
 * TransactionRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * TransactionRequest Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'operation' => '\Developerayo\FireblocksLaravel\Models\TransactionOperation',
        'note' => 'string',
        'externalTxId' => 'string',
        'assetId' => 'string',
        'source' => '\Developerayo\FireblocksLaravel\Models\TransferPeerPath',
        'destination' => '\Developerayo\FireblocksLaravel\Models\DestinationTransferPeerPath',
        'destinations' => '\Developerayo\FireblocksLaravel\Models\TransactionRequestDestination[]',
        'amount' => '\Developerayo\FireblocksLaravel\Models\TransactionRequestAmount',
        'treatAsGrossAmount' => 'bool',
        'extraParameters' => '\Developerayo\FireblocksLaravel\Models\ExtraParameters',
        'forceSweep' => 'bool',
        'feeLevel' => 'string',
        'fee' => '\Developerayo\FireblocksLaravel\Models\TransactionRequestFee',
        'priorityFee' => '\Developerayo\FireblocksLaravel\Models\TransactionRequestPriorityFee',
        'failOnLowFee' => 'bool',
        'maxFee' => 'string',
        'gasLimit' => '\Developerayo\FireblocksLaravel\Models\TransactionRequestGasLimit',
        'gasPrice' => '\Developerayo\FireblocksLaravel\Models\TransactionRequestGasPrice',
        'networkFee' => '\Developerayo\FireblocksLaravel\Models\TransactionRequestNetworkFee',
        'replaceTxByHash' => 'string',
        'customerRefId' => 'string',
        'autoStaking' => 'bool',
        'networkStaking' => '\Developerayo\FireblocksLaravel\Models\TransactionRequestNetworkStaking',
        'cpuStaking' => '\Developerayo\FireblocksLaravel\Models\TransactionRequestNetworkStaking'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'operation' => null,
        'note' => null,
        'externalTxId' => null,
        'assetId' => null,
        'source' => null,
        'destination' => null,
        'destinations' => null,
        'amount' => null,
        'treatAsGrossAmount' => null,
        'extraParameters' => null,
        'forceSweep' => null,
        'feeLevel' => null,
        'fee' => null,
        'priorityFee' => null,
        'failOnLowFee' => null,
        'maxFee' => null,
        'gasLimit' => null,
        'gasPrice' => null,
        'networkFee' => null,
        'replaceTxByHash' => null,
        'customerRefId' => null,
        'autoStaking' => null,
        'networkStaking' => null,
        'cpuStaking' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'operation' => false,
        'note' => false,
        'externalTxId' => false,
        'assetId' => false,
        'source' => false,
        'destination' => false,
        'destinations' => false,
        'amount' => false,
        'treatAsGrossAmount' => false,
        'extraParameters' => false,
        'forceSweep' => false,
        'feeLevel' => false,
        'fee' => false,
        'priorityFee' => false,
        'failOnLowFee' => false,
        'maxFee' => false,
        'gasLimit' => false,
        'gasPrice' => false,
        'networkFee' => false,
        'replaceTxByHash' => false,
        'customerRefId' => false,
        'autoStaking' => false,
        'networkStaking' => false,
        'cpuStaking' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operation' => 'operation',
        'note' => 'note',
        'externalTxId' => 'externalTxId',
        'assetId' => 'assetId',
        'source' => 'source',
        'destination' => 'destination',
        'destinations' => 'destinations',
        'amount' => 'amount',
        'treatAsGrossAmount' => 'treatAsGrossAmount',
        'extraParameters' => 'extraParameters',
        'forceSweep' => 'forceSweep',
        'feeLevel' => 'feeLevel',
        'fee' => 'fee',
        'priorityFee' => 'priorityFee',
        'failOnLowFee' => 'failOnLowFee',
        'maxFee' => 'maxFee',
        'gasLimit' => 'gasLimit',
        'gasPrice' => 'gasPrice',
        'networkFee' => 'networkFee',
        'replaceTxByHash' => 'replaceTxByHash',
        'customerRefId' => 'customerRefId',
        'autoStaking' => 'autoStaking',
        'networkStaking' => 'networkStaking',
        'cpuStaking' => 'cpuStaking'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operation' => 'setOperation',
        'note' => 'setNote',
        'externalTxId' => 'setExternalTxId',
        'assetId' => 'setAssetId',
        'source' => 'setSource',
        'destination' => 'setDestination',
        'destinations' => 'setDestinations',
        'amount' => 'setAmount',
        'treatAsGrossAmount' => 'setTreatAsGrossAmount',
        'extraParameters' => 'setExtraParameters',
        'forceSweep' => 'setForceSweep',
        'feeLevel' => 'setFeeLevel',
        'fee' => 'setFee',
        'priorityFee' => 'setPriorityFee',
        'failOnLowFee' => 'setFailOnLowFee',
        'maxFee' => 'setMaxFee',
        'gasLimit' => 'setGasLimit',
        'gasPrice' => 'setGasPrice',
        'networkFee' => 'setNetworkFee',
        'replaceTxByHash' => 'setReplaceTxByHash',
        'customerRefId' => 'setCustomerRefId',
        'autoStaking' => 'setAutoStaking',
        'networkStaking' => 'setNetworkStaking',
        'cpuStaking' => 'setCpuStaking'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operation' => 'getOperation',
        'note' => 'getNote',
        'externalTxId' => 'getExternalTxId',
        'assetId' => 'getAssetId',
        'source' => 'getSource',
        'destination' => 'getDestination',
        'destinations' => 'getDestinations',
        'amount' => 'getAmount',
        'treatAsGrossAmount' => 'getTreatAsGrossAmount',
        'extraParameters' => 'getExtraParameters',
        'forceSweep' => 'getForceSweep',
        'feeLevel' => 'getFeeLevel',
        'fee' => 'getFee',
        'priorityFee' => 'getPriorityFee',
        'failOnLowFee' => 'getFailOnLowFee',
        'maxFee' => 'getMaxFee',
        'gasLimit' => 'getGasLimit',
        'gasPrice' => 'getGasPrice',
        'networkFee' => 'getNetworkFee',
        'replaceTxByHash' => 'getReplaceTxByHash',
        'customerRefId' => 'getCustomerRefId',
        'autoStaking' => 'getAutoStaking',
        'networkStaking' => 'getNetworkStaking',
        'cpuStaking' => 'getCpuStaking'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FEE_LEVEL_LOW = 'LOW';
    public const FEE_LEVEL_MEDIUM = 'MEDIUM';
    public const FEE_LEVEL_HIGH = 'HIGH';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeeLevelAllowableValues()
    {
        return [
            self::FEE_LEVEL_LOW,
            self::FEE_LEVEL_MEDIUM,
            self::FEE_LEVEL_HIGH,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('operation', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('externalTxId', $data ?? [], null);
        $this->setIfExists('assetId', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('destinations', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('treatAsGrossAmount', $data ?? [], null);
        $this->setIfExists('extraParameters', $data ?? [], null);
        $this->setIfExists('forceSweep', $data ?? [], null);
        $this->setIfExists('feeLevel', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
        $this->setIfExists('priorityFee', $data ?? [], null);
        $this->setIfExists('failOnLowFee', $data ?? [], null);
        $this->setIfExists('maxFee', $data ?? [], null);
        $this->setIfExists('gasLimit', $data ?? [], null);
        $this->setIfExists('gasPrice', $data ?? [], null);
        $this->setIfExists('networkFee', $data ?? [], null);
        $this->setIfExists('replaceTxByHash', $data ?? [], null);
        $this->setIfExists('customerRefId', $data ?? [], null);
        $this->setIfExists('autoStaking', $data ?? [], null);
        $this->setIfExists('networkStaking', $data ?? [], null);
        $this->setIfExists('cpuStaking', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFeeLevelAllowableValues();
        if (!is_null($this->container['feeLevel']) && !in_array($this->container['feeLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feeLevel', must be one of '%s'",
                $this->container['feeLevel'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operation
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionOperation|null
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionOperation|null $operation operation
     *
     * @return self
     */
    public function setOperation($operation)
    {
        if (is_null($operation)) {
            throw new \InvalidArgumentException('non-nullable operation cannot be null');
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Custom note, not sent to the blockchain, to describe the transaction at your Fireblocks workspace.
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets externalTxId
     *
     * @return string|null
     */
    public function getExternalTxId()
    {
        return $this->container['externalTxId'];
    }

    /**
     * Sets externalTxId
     *
     * @param string|null $externalTxId An optional but highly recommended parameter. Fireblocks will reject future transactions with same ID.    You should set this to a unique ID representing the transaction, to avoid submitting the same transaction twice. This helps with cases where submitting the transaction responds with an error code due to Internet interruptions, but the transaction was actually sent and processed. To validate whether a transaction has been processed, [Find a specific transaction by external transaction ID](https://developers.fireblocks.com/reference/get_transactions-external-tx-id-externaltxid).   There is no specific format required for this parameter.
     *
     * @return self
     */
    public function setExternalTxId($externalTxId)
    {
        if (is_null($externalTxId)) {
            throw new \InvalidArgumentException('non-nullable externalTxId cannot be null');
        }
        $this->container['externalTxId'] = $externalTxId;

        return $this;
    }

    /**
     * Gets assetId
     *
     * @return string|null
     */
    public function getAssetId()
    {
        return $this->container['assetId'];
    }

    /**
     * Sets assetId
     *
     * @param string|null $assetId The ID of the asset to transfer, for `TRANSFER`, `MINT` or `BURN` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)
     *
     * @return self
     */
    public function setAssetId($assetId)
    {
        if (is_null($assetId)) {
            throw new \InvalidArgumentException('non-nullable assetId cannot be null');
        }
        $this->container['assetId'] = $assetId;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransferPeerPath|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransferPeerPath|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \Developerayo\FireblocksLaravel\Models\DestinationTransferPeerPath|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \Developerayo\FireblocksLaravel\Models\DestinationTransferPeerPath|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionRequestDestination[]|null
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionRequestDestination[]|null $destinations For UTXO based blockchains, you can send a single transaction to multiple destinations.
     *
     * @return self
     */
    public function setDestinations($destinations)
    {
        if (is_null($destinations)) {
            throw new \InvalidArgumentException('non-nullable destinations cannot be null');
        }
        $this->container['destinations'] = $destinations;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionRequestAmount|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionRequestAmount|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets treatAsGrossAmount
     *
     * @return bool|null
     */
    public function getTreatAsGrossAmount()
    {
        return $this->container['treatAsGrossAmount'];
    }

    /**
     * Sets treatAsGrossAmount
     *
     * @param bool|null $treatAsGrossAmount \"When set to `true`, the fee will be deducted from the requested amount.\"  **Note**: This parameter can only be considered if a transaction’s asset is a base asset, such as ETH or MATIC. If the asset can’t be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account.
     *
     * @return self
     */
    public function setTreatAsGrossAmount($treatAsGrossAmount)
    {
        if (is_null($treatAsGrossAmount)) {
            throw new \InvalidArgumentException('non-nullable treatAsGrossAmount cannot be null');
        }
        $this->container['treatAsGrossAmount'] = $treatAsGrossAmount;

        return $this;
    }

    /**
     * Gets extraParameters
     *
     * @return \Developerayo\FireblocksLaravel\Models\ExtraParameters|null
     */
    public function getExtraParameters()
    {
        return $this->container['extraParameters'];
    }

    /**
     * Sets extraParameters
     *
     * @param \Developerayo\FireblocksLaravel\Models\ExtraParameters|null $extraParameters extraParameters
     *
     * @return self
     */
    public function setExtraParameters($extraParameters)
    {
        if (is_null($extraParameters)) {
            throw new \InvalidArgumentException('non-nullable extraParameters cannot be null');
        }
        $this->container['extraParameters'] = $extraParameters;

        return $this;
    }

    /**
     * Gets forceSweep
     *
     * @return bool|null
     */
    public function getForceSweep()
    {
        return $this->container['forceSweep'];
    }

    /**
     * Sets forceSweep
     *
     * @param bool|null $forceSweep For Polkadot, Kusama and Westend transactions only. When set to true, Fireblocks will empty the asset wallet.     **Note:** If set to true when the source account is exactly 1 DOT, the transaction will fail. Any amount more or less than 1 DOT succeeds. This is a Polkadot blockchain limitation.
     *
     * @return self
     */
    public function setForceSweep($forceSweep)
    {
        if (is_null($forceSweep)) {
            throw new \InvalidArgumentException('non-nullable forceSweep cannot be null');
        }
        $this->container['forceSweep'] = $forceSweep;

        return $this;
    }

    /**
     * Gets feeLevel
     *
     * @return string|null
     */
    public function getFeeLevel()
    {
        return $this->container['feeLevel'];
    }

    /**
     * Sets feeLevel
     *
     * @param string|null $feeLevel For UTXO or EVM-based blockchains only. Defines the blockchain fee level which will be payed for the transaction. Alternatively, specific fee estimation parameters exist below.
     *
     * @return self
     */
    public function setFeeLevel($feeLevel)
    {
        if (is_null($feeLevel)) {
            throw new \InvalidArgumentException('non-nullable feeLevel cannot be null');
        }
        $allowedValues = $this->getFeeLevelAllowableValues();
        if (!in_array($feeLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feeLevel', must be one of '%s'",
                    $feeLevel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feeLevel'] = $feeLevel;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionRequestFee|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionRequestFee|null $fee fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets priorityFee
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionRequestPriorityFee|null
     */
    public function getPriorityFee()
    {
        return $this->container['priorityFee'];
    }

    /**
     * Sets priorityFee
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionRequestPriorityFee|null $priorityFee priorityFee
     *
     * @return self
     */
    public function setPriorityFee($priorityFee)
    {
        if (is_null($priorityFee)) {
            throw new \InvalidArgumentException('non-nullable priorityFee cannot be null');
        }
        $this->container['priorityFee'] = $priorityFee;

        return $this;
    }

    /**
     * Gets failOnLowFee
     *
     * @return bool|null
     */
    public function getFailOnLowFee()
    {
        return $this->container['failOnLowFee'];
    }

    /**
     * Sets failOnLowFee
     *
     * @param bool|null $failOnLowFee When set to `true`, in case the current `MEDIUM` fee level is higher than the one specified in the transaction, the transaction will fail to avoid getting stuck with no confirmations.
     *
     * @return self
     */
    public function setFailOnLowFee($failOnLowFee)
    {
        if (is_null($failOnLowFee)) {
            throw new \InvalidArgumentException('non-nullable failOnLowFee cannot be null');
        }
        $this->container['failOnLowFee'] = $failOnLowFee;

        return $this;
    }

    /**
     * Gets maxFee
     *
     * @return string|null
     */
    public function getMaxFee()
    {
        return $this->container['maxFee'];
    }

    /**
     * Sets maxFee
     *
     * @param string|null $maxFee The maximum fee (gas price or fee per byte) that should be payed for the transaction.  In case the current value of the requested `feeLevel` is higher than this requested maximum fee.  Represented by a numeric string for accurate precision.
     *
     * @return self
     */
    public function setMaxFee($maxFee)
    {
        if (is_null($maxFee)) {
            throw new \InvalidArgumentException('non-nullable maxFee cannot be null');
        }
        $this->container['maxFee'] = $maxFee;

        return $this;
    }

    /**
     * Gets gasLimit
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionRequestGasLimit|null
     */
    public function getGasLimit()
    {
        return $this->container['gasLimit'];
    }

    /**
     * Sets gasLimit
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionRequestGasLimit|null $gasLimit gasLimit
     *
     * @return self
     */
    public function setGasLimit($gasLimit)
    {
        if (is_null($gasLimit)) {
            throw new \InvalidArgumentException('non-nullable gasLimit cannot be null');
        }
        $this->container['gasLimit'] = $gasLimit;

        return $this;
    }

    /**
     * Gets gasPrice
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionRequestGasPrice|null
     */
    public function getGasPrice()
    {
        return $this->container['gasPrice'];
    }

    /**
     * Sets gasPrice
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionRequestGasPrice|null $gasPrice gasPrice
     *
     * @return self
     */
    public function setGasPrice($gasPrice)
    {
        if (is_null($gasPrice)) {
            throw new \InvalidArgumentException('non-nullable gasPrice cannot be null');
        }
        $this->container['gasPrice'] = $gasPrice;

        return $this;
    }

    /**
     * Gets networkFee
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionRequestNetworkFee|null
     */
    public function getNetworkFee()
    {
        return $this->container['networkFee'];
    }

    /**
     * Sets networkFee
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionRequestNetworkFee|null $networkFee networkFee
     *
     * @return self
     */
    public function setNetworkFee($networkFee)
    {
        if (is_null($networkFee)) {
            throw new \InvalidArgumentException('non-nullable networkFee cannot be null');
        }
        $this->container['networkFee'] = $networkFee;

        return $this;
    }

    /**
     * Gets replaceTxByHash
     *
     * @return string|null
     */
    public function getReplaceTxByHash()
    {
        return $this->container['replaceTxByHash'];
    }

    /**
     * Sets replaceTxByHash
     *
     * @param string|null $replaceTxByHash For EVM-based blockchains only. In case a transaction is stuck, specify the hash of the stuck transaction to replace it by this transaction with a higher fee, or to replace it with this transaction with a zero fee and drop it from the blockchain.
     *
     * @return self
     */
    public function setReplaceTxByHash($replaceTxByHash)
    {
        if (is_null($replaceTxByHash)) {
            throw new \InvalidArgumentException('non-nullable replaceTxByHash cannot be null');
        }
        $this->container['replaceTxByHash'] = $replaceTxByHash;

        return $this;
    }

    /**
     * Gets customerRefId
     *
     * @return string|null
     */
    public function getCustomerRefId()
    {
        return $this->container['customerRefId'];
    }

    /**
     * Sets customerRefId
     *
     * @param string|null $customerRefId The ID for AML providers to associate the owner of funds with transactions.
     *
     * @return self
     */
    public function setCustomerRefId($customerRefId)
    {
        if (is_null($customerRefId)) {
            throw new \InvalidArgumentException('non-nullable customerRefId cannot be null');
        }
        $this->container['customerRefId'] = $customerRefId;

        return $this;
    }

    /**
     * Gets autoStaking
     *
     * @return bool|null
     * @deprecated
     */
    public function getAutoStaking()
    {
        return $this->container['autoStaking'];
    }

    /**
     * Sets autoStaking
     *
     * @param bool|null $autoStaking This feature is no longer supported.
     *
     * @return self
     * @deprecated
     */
    public function setAutoStaking($autoStaking)
    {
        if (is_null($autoStaking)) {
            throw new \InvalidArgumentException('non-nullable autoStaking cannot be null');
        }
        $this->container['autoStaking'] = $autoStaking;

        return $this;
    }

    /**
     * Gets networkStaking
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionRequestNetworkStaking|null
     * @deprecated
     */
    public function getNetworkStaking()
    {
        return $this->container['networkStaking'];
    }

    /**
     * Sets networkStaking
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionRequestNetworkStaking|null $networkStaking networkStaking
     *
     * @return self
     * @deprecated
     */
    public function setNetworkStaking($networkStaking)
    {
        if (is_null($networkStaking)) {
            throw new \InvalidArgumentException('non-nullable networkStaking cannot be null');
        }
        $this->container['networkStaking'] = $networkStaking;

        return $this;
    }

    /**
     * Gets cpuStaking
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionRequestNetworkStaking|null
     * @deprecated
     */
    public function getCpuStaking()
    {
        return $this->container['cpuStaking'];
    }

    /**
     * Sets cpuStaking
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionRequestNetworkStaking|null $cpuStaking cpuStaking
     *
     * @return self
     * @deprecated
     */
    public function setCpuStaking($cpuStaking)
    {
        if (is_null($cpuStaking)) {
            throw new \InvalidArgumentException('non-nullable cpuStaking cannot be null');
        }
        $this->container['cpuStaking'] = $cpuStaking;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


