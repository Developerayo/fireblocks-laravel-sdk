<?php
/**
 * PayoutResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * PayoutResponse Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PayoutResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PayoutResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'payoutId' => 'string',
        'paymentAccount' => '\Developerayo\FireblocksLaravel\Models\PaymentAccountResponse',
        'createdAt' => 'float',
        'state' => '\Developerayo\FireblocksLaravel\Models\PayoutState',
        'status' => '\Developerayo\FireblocksLaravel\Models\PayoutStatus',
        'reasonOfFailure' => 'string',
        'initMethod' => '\Developerayo\FireblocksLaravel\Models\PayoutInitMethod',
        'instructionSet' => '\Developerayo\FireblocksLaravel\Models\PayoutInstructionResponse[]',
        'reportUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'payoutId' => null,
        'paymentAccount' => null,
        'createdAt' => null,
        'state' => null,
        'status' => null,
        'reasonOfFailure' => null,
        'initMethod' => null,
        'instructionSet' => null,
        'reportUrl' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'payoutId' => false,
        'paymentAccount' => false,
        'createdAt' => false,
        'state' => false,
        'status' => false,
        'reasonOfFailure' => false,
        'initMethod' => false,
        'instructionSet' => false,
        'reportUrl' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'payoutId' => 'payoutId',
        'paymentAccount' => 'paymentAccount',
        'createdAt' => 'createdAt',
        'state' => 'state',
        'status' => 'status',
        'reasonOfFailure' => 'reasonOfFailure',
        'initMethod' => 'initMethod',
        'instructionSet' => 'instructionSet',
        'reportUrl' => 'reportUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'payoutId' => 'setPayoutId',
        'paymentAccount' => 'setPaymentAccount',
        'createdAt' => 'setCreatedAt',
        'state' => 'setState',
        'status' => 'setStatus',
        'reasonOfFailure' => 'setReasonOfFailure',
        'initMethod' => 'setInitMethod',
        'instructionSet' => 'setInstructionSet',
        'reportUrl' => 'setReportUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'payoutId' => 'getPayoutId',
        'paymentAccount' => 'getPaymentAccount',
        'createdAt' => 'getCreatedAt',
        'state' => 'getState',
        'status' => 'getStatus',
        'reasonOfFailure' => 'getReasonOfFailure',
        'initMethod' => 'getInitMethod',
        'instructionSet' => 'getInstructionSet',
        'reportUrl' => 'getReportUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('payoutId', $data ?? [], null);
        $this->setIfExists('paymentAccount', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('reasonOfFailure', $data ?? [], null);
        $this->setIfExists('initMethod', $data ?? [], null);
        $this->setIfExists('instructionSet', $data ?? [], null);
        $this->setIfExists('reportUrl', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payoutId'] === null) {
            $invalidProperties[] = "'payoutId' can't be null";
        }
        if ($this->container['paymentAccount'] === null) {
            $invalidProperties[] = "'paymentAccount' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['instructionSet'] === null) {
            $invalidProperties[] = "'instructionSet' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets payoutId
     *
     * @return string
     */
    public function getPayoutId()
    {
        return $this->container['payoutId'];
    }

    /**
     * Sets payoutId
     *
     * @param string $payoutId payoutId
     *
     * @return self
     */
    public function setPayoutId($payoutId)
    {
        if (is_null($payoutId)) {
            throw new \InvalidArgumentException('non-nullable payoutId cannot be null');
        }
        $this->container['payoutId'] = $payoutId;

        return $this;
    }

    /**
     * Gets paymentAccount
     *
     * @return \Developerayo\FireblocksLaravel\Models\PaymentAccountResponse
     */
    public function getPaymentAccount()
    {
        return $this->container['paymentAccount'];
    }

    /**
     * Sets paymentAccount
     *
     * @param \Developerayo\FireblocksLaravel\Models\PaymentAccountResponse $paymentAccount paymentAccount
     *
     * @return self
     */
    public function setPaymentAccount($paymentAccount)
    {
        if (is_null($paymentAccount)) {
            throw new \InvalidArgumentException('non-nullable paymentAccount cannot be null');
        }
        $this->container['paymentAccount'] = $paymentAccount;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return float
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param float $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \Developerayo\FireblocksLaravel\Models\PayoutState
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \Developerayo\FireblocksLaravel\Models\PayoutState $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Developerayo\FireblocksLaravel\Models\PayoutStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Developerayo\FireblocksLaravel\Models\PayoutStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reasonOfFailure
     *
     * @return string|null
     */
    public function getReasonOfFailure()
    {
        return $this->container['reasonOfFailure'];
    }

    /**
     * Sets reasonOfFailure
     *
     * @param string|null $reasonOfFailure <ul>  <li> INSUFFICIENT_BALANCE</li> <li> SOURCE_TRANSLATION</li> <li> SOURCE_NOT_UNIQUE</li> <li> SOURCE_NOT_FOUND</li> <li> SOURCE_TYPE_NOT_SUPPORTED</li> <li> EMPTY_SOURCE</li> <li> DESTINATION_TRANSLATION</li> <li> DESTINATION_NOT_UNIQUE</li> <li> DESTINATION_NOT_FOUND</li> <li> EMPTY_DESTINATION</li> <li> PARSING </li> <li> UNKNOWN</li> <li> FIREBLOCKS_CLIENT</li> <li> TRANSACTION_SUBMISSION</li> </ul>
     *
     * @return self
     */
    public function setReasonOfFailure($reasonOfFailure)
    {
        if (is_null($reasonOfFailure)) {
            throw new \InvalidArgumentException('non-nullable reasonOfFailure cannot be null');
        }
        $this->container['reasonOfFailure'] = $reasonOfFailure;

        return $this;
    }

    /**
     * Gets initMethod
     *
     * @return \Developerayo\FireblocksLaravel\Models\PayoutInitMethod|null
     */
    public function getInitMethod()
    {
        return $this->container['initMethod'];
    }

    /**
     * Sets initMethod
     *
     * @param \Developerayo\FireblocksLaravel\Models\PayoutInitMethod|null $initMethod initMethod
     *
     * @return self
     */
    public function setInitMethod($initMethod)
    {
        if (is_null($initMethod)) {
            throw new \InvalidArgumentException('non-nullable initMethod cannot be null');
        }
        $this->container['initMethod'] = $initMethod;

        return $this;
    }

    /**
     * Gets instructionSet
     *
     * @return \Developerayo\FireblocksLaravel\Models\PayoutInstructionResponse[]
     */
    public function getInstructionSet()
    {
        return $this->container['instructionSet'];
    }

    /**
     * Sets instructionSet
     *
     * @param \Developerayo\FireblocksLaravel\Models\PayoutInstructionResponse[] $instructionSet instructionSet
     *
     * @return self
     */
    public function setInstructionSet($instructionSet)
    {
        if (is_null($instructionSet)) {
            throw new \InvalidArgumentException('non-nullable instructionSet cannot be null');
        }
        $this->container['instructionSet'] = $instructionSet;

        return $this;
    }

    /**
     * Gets reportUrl
     *
     * @return string|null
     */
    public function getReportUrl()
    {
        return $this->container['reportUrl'];
    }

    /**
     * Sets reportUrl
     *
     * @param string|null $reportUrl reportUrl
     *
     * @return self
     */
    public function setReportUrl($reportUrl)
    {
        if (is_null($reportUrl)) {
            throw new \InvalidArgumentException('non-nullable reportUrl cannot be null');
        }
        $this->container['reportUrl'] = $reportUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


