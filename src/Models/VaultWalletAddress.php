<?php
/**
 * VaultWalletAddress
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * VaultWalletAddress Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VaultWalletAddress implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VaultWalletAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'assetId' => 'string',
        'address' => 'string',
        'description' => 'string',
        'tag' => 'string',
        'type' => 'string',
        'customerRefId' => 'string',
        'addressFormat' => 'string',
        'legacyAddress' => 'string',
        'enterpriseAddress' => 'string',
        'bip44AddressIndex' => 'int',
        'userDefined' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'assetId' => null,
        'address' => null,
        'description' => null,
        'tag' => null,
        'type' => null,
        'customerRefId' => null,
        'addressFormat' => null,
        'legacyAddress' => null,
        'enterpriseAddress' => null,
        'bip44AddressIndex' => null,
        'userDefined' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'assetId' => false,
        'address' => false,
        'description' => false,
        'tag' => false,
        'type' => false,
        'customerRefId' => false,
        'addressFormat' => false,
        'legacyAddress' => false,
        'enterpriseAddress' => false,
        'bip44AddressIndex' => false,
        'userDefined' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'assetId' => 'assetId',
        'address' => 'address',
        'description' => 'description',
        'tag' => 'tag',
        'type' => 'type',
        'customerRefId' => 'customerRefId',
        'addressFormat' => 'addressFormat',
        'legacyAddress' => 'legacyAddress',
        'enterpriseAddress' => 'enterpriseAddress',
        'bip44AddressIndex' => 'bip44AddressIndex',
        'userDefined' => 'userDefined'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'assetId' => 'setAssetId',
        'address' => 'setAddress',
        'description' => 'setDescription',
        'tag' => 'setTag',
        'type' => 'setType',
        'customerRefId' => 'setCustomerRefId',
        'addressFormat' => 'setAddressFormat',
        'legacyAddress' => 'setLegacyAddress',
        'enterpriseAddress' => 'setEnterpriseAddress',
        'bip44AddressIndex' => 'setBip44AddressIndex',
        'userDefined' => 'setUserDefined'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'assetId' => 'getAssetId',
        'address' => 'getAddress',
        'description' => 'getDescription',
        'tag' => 'getTag',
        'type' => 'getType',
        'customerRefId' => 'getCustomerRefId',
        'addressFormat' => 'getAddressFormat',
        'legacyAddress' => 'getLegacyAddress',
        'enterpriseAddress' => 'getEnterpriseAddress',
        'bip44AddressIndex' => 'getBip44AddressIndex',
        'userDefined' => 'getUserDefined'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ADDRESS_FORMAT_SEGWIT = 'SEGWIT';
    public const ADDRESS_FORMAT_LEGACY = 'LEGACY';
    public const ADDRESS_FORMAT_BASE = 'BASE';
    public const ADDRESS_FORMAT_PAYMENT = 'PAYMENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressFormatAllowableValues()
    {
        return [
            self::ADDRESS_FORMAT_SEGWIT,
            self::ADDRESS_FORMAT_LEGACY,
            self::ADDRESS_FORMAT_BASE,
            self::ADDRESS_FORMAT_PAYMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('assetId', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('customerRefId', $data ?? [], null);
        $this->setIfExists('addressFormat', $data ?? [], null);
        $this->setIfExists('legacyAddress', $data ?? [], null);
        $this->setIfExists('enterpriseAddress', $data ?? [], null);
        $this->setIfExists('bip44AddressIndex', $data ?? [], null);
        $this->setIfExists('userDefined', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAddressFormatAllowableValues();
        if (!is_null($this->container['addressFormat']) && !in_array($this->container['addressFormat'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addressFormat', must be one of '%s'",
                $this->container['addressFormat'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets assetId
     *
     * @return string|null
     */
    public function getAssetId()
    {
        return $this->container['assetId'];
    }

    /**
     * Sets assetId
     *
     * @param string|null $assetId assetId
     *
     * @return self
     */
    public function setAssetId($assetId)
    {
        if (is_null($assetId)) {
            throw new \InvalidArgumentException('non-nullable assetId cannot be null');
        }
        $this->container['assetId'] = $assetId;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag tag
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets customerRefId
     *
     * @return string|null
     */
    public function getCustomerRefId()
    {
        return $this->container['customerRefId'];
    }

    /**
     * Sets customerRefId
     *
     * @param string|null $customerRefId customerRefId
     *
     * @return self
     */
    public function setCustomerRefId($customerRefId)
    {
        if (is_null($customerRefId)) {
            throw new \InvalidArgumentException('non-nullable customerRefId cannot be null');
        }
        $this->container['customerRefId'] = $customerRefId;

        return $this;
    }

    /**
     * Gets addressFormat
     *
     * @return string|null
     */
    public function getAddressFormat()
    {
        return $this->container['addressFormat'];
    }

    /**
     * Sets addressFormat
     *
     * @param string|null $addressFormat addressFormat
     *
     * @return self
     */
    public function setAddressFormat($addressFormat)
    {
        if (is_null($addressFormat)) {
            throw new \InvalidArgumentException('non-nullable addressFormat cannot be null');
        }
        $allowedValues = $this->getAddressFormatAllowableValues();
        if (!in_array($addressFormat, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addressFormat', must be one of '%s'",
                    $addressFormat,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addressFormat'] = $addressFormat;

        return $this;
    }

    /**
     * Gets legacyAddress
     *
     * @return string|null
     */
    public function getLegacyAddress()
    {
        return $this->container['legacyAddress'];
    }

    /**
     * Sets legacyAddress
     *
     * @param string|null $legacyAddress legacyAddress
     *
     * @return self
     */
    public function setLegacyAddress($legacyAddress)
    {
        if (is_null($legacyAddress)) {
            throw new \InvalidArgumentException('non-nullable legacyAddress cannot be null');
        }
        $this->container['legacyAddress'] = $legacyAddress;

        return $this;
    }

    /**
     * Gets enterpriseAddress
     *
     * @return string|null
     */
    public function getEnterpriseAddress()
    {
        return $this->container['enterpriseAddress'];
    }

    /**
     * Sets enterpriseAddress
     *
     * @param string|null $enterpriseAddress enterpriseAddress
     *
     * @return self
     */
    public function setEnterpriseAddress($enterpriseAddress)
    {
        if (is_null($enterpriseAddress)) {
            throw new \InvalidArgumentException('non-nullable enterpriseAddress cannot be null');
        }
        $this->container['enterpriseAddress'] = $enterpriseAddress;

        return $this;
    }

    /**
     * Gets bip44AddressIndex
     *
     * @return int|null
     */
    public function getBip44AddressIndex()
    {
        return $this->container['bip44AddressIndex'];
    }

    /**
     * Sets bip44AddressIndex
     *
     * @param int|null $bip44AddressIndex bip44AddressIndex
     *
     * @return self
     */
    public function setBip44AddressIndex($bip44AddressIndex)
    {
        if (is_null($bip44AddressIndex)) {
            throw new \InvalidArgumentException('non-nullable bip44AddressIndex cannot be null');
        }
        $this->container['bip44AddressIndex'] = $bip44AddressIndex;

        return $this;
    }

    /**
     * Gets userDefined
     *
     * @return bool|null
     */
    public function getUserDefined()
    {
        return $this->container['userDefined'];
    }

    /**
     * Sets userDefined
     *
     * @param bool|null $userDefined userDefined
     *
     * @return self
     */
    public function setUserDefined($userDefined)
    {
        if (is_null($userDefined)) {
            throw new \InvalidArgumentException('non-nullable userDefined cannot be null');
        }
        $this->container['userDefined'] = $userDefined;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


