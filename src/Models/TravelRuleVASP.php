<?php
/**
 * TravelRuleVASP
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * TravelRuleVASP Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TravelRuleVASP implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TravelRuleVASP';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'did' => 'string',
        'name' => 'string',
        'verificationStatus' => 'string',
        'addressLine1' => 'string',
        'addressLine2' => 'string',
        'city' => 'string',
        'country' => 'string',
        'emailDomains' => 'string',
        'website' => 'string',
        'logo' => 'string',
        'legalStructure' => 'string',
        'legalName' => 'string',
        'yearFounded' => 'string',
        'incorporationCountry' => 'string',
        'isRegulated' => 'string',
        'otherNames' => 'string',
        'identificationType' => 'string',
        'identificationCountry' => 'string',
        'businessNumber' => 'string',
        'regulatoryAuthorities' => 'string',
        'jurisdictions' => 'string',
        'street' => 'string',
        'number' => 'string',
        'unit' => 'string',
        'postCode' => 'string',
        'state' => 'string',
        'certificates' => 'string',
        'description' => 'string',
        'travelRuleOPENVASP' => 'string',
        'travelRuleSYGNA' => 'string',
        'travelRuleTRISA' => 'string',
        'travelRuleTRLIGHT' => 'string',
        'travelRuleEMAIL' => 'string',
        'travelRuleTRP' => 'string',
        'travelRuleSHYFT' => 'string',
        'travelRuleUSTRAVELRULEWG' => 'string',
        'createdAt' => 'string',
        'createdBy' => 'string',
        'updatedAt' => 'string',
        'updatedBy' => 'string',
        'lastSentDate' => 'string',
        'lastReceivedDate' => 'string',
        'documents' => 'string',
        'hasAdmin' => 'bool',
        'isNotifiable' => 'bool',
        'issuers' => '\Developerayo\FireblocksLaravel\Models\TravelRuleIssuers'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'did' => null,
        'name' => null,
        'verificationStatus' => null,
        'addressLine1' => null,
        'addressLine2' => null,
        'city' => null,
        'country' => null,
        'emailDomains' => null,
        'website' => null,
        'logo' => null,
        'legalStructure' => null,
        'legalName' => null,
        'yearFounded' => null,
        'incorporationCountry' => null,
        'isRegulated' => null,
        'otherNames' => null,
        'identificationType' => null,
        'identificationCountry' => null,
        'businessNumber' => null,
        'regulatoryAuthorities' => null,
        'jurisdictions' => null,
        'street' => null,
        'number' => null,
        'unit' => null,
        'postCode' => null,
        'state' => null,
        'certificates' => null,
        'description' => null,
        'travelRuleOPENVASP' => null,
        'travelRuleSYGNA' => null,
        'travelRuleTRISA' => null,
        'travelRuleTRLIGHT' => null,
        'travelRuleEMAIL' => null,
        'travelRuleTRP' => null,
        'travelRuleSHYFT' => null,
        'travelRuleUSTRAVELRULEWG' => null,
        'createdAt' => null,
        'createdBy' => null,
        'updatedAt' => null,
        'updatedBy' => null,
        'lastSentDate' => null,
        'lastReceivedDate' => null,
        'documents' => null,
        'hasAdmin' => null,
        'isNotifiable' => null,
        'issuers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'did' => false,
        'name' => false,
        'verificationStatus' => false,
        'addressLine1' => false,
        'addressLine2' => false,
        'city' => false,
        'country' => false,
        'emailDomains' => false,
        'website' => false,
        'logo' => false,
        'legalStructure' => false,
        'legalName' => false,
        'yearFounded' => false,
        'incorporationCountry' => false,
        'isRegulated' => false,
        'otherNames' => false,
        'identificationType' => false,
        'identificationCountry' => false,
        'businessNumber' => false,
        'regulatoryAuthorities' => false,
        'jurisdictions' => false,
        'street' => false,
        'number' => false,
        'unit' => false,
        'postCode' => false,
        'state' => false,
        'certificates' => false,
        'description' => false,
        'travelRuleOPENVASP' => false,
        'travelRuleSYGNA' => false,
        'travelRuleTRISA' => false,
        'travelRuleTRLIGHT' => false,
        'travelRuleEMAIL' => false,
        'travelRuleTRP' => false,
        'travelRuleSHYFT' => false,
        'travelRuleUSTRAVELRULEWG' => false,
        'createdAt' => false,
        'createdBy' => false,
        'updatedAt' => false,
        'updatedBy' => false,
        'lastSentDate' => false,
        'lastReceivedDate' => false,
        'documents' => false,
        'hasAdmin' => false,
        'isNotifiable' => false,
        'issuers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'did' => 'did',
        'name' => 'name',
        'verificationStatus' => 'verificationStatus',
        'addressLine1' => 'addressLine1',
        'addressLine2' => 'addressLine2',
        'city' => 'city',
        'country' => 'country',
        'emailDomains' => 'emailDomains',
        'website' => 'website',
        'logo' => 'logo',
        'legalStructure' => 'legalStructure',
        'legalName' => 'legalName',
        'yearFounded' => 'yearFounded',
        'incorporationCountry' => 'incorporationCountry',
        'isRegulated' => 'isRegulated',
        'otherNames' => 'otherNames',
        'identificationType' => 'identificationType',
        'identificationCountry' => 'identificationCountry',
        'businessNumber' => 'businessNumber',
        'regulatoryAuthorities' => 'regulatoryAuthorities',
        'jurisdictions' => 'jurisdictions',
        'street' => 'street',
        'number' => 'number',
        'unit' => 'unit',
        'postCode' => 'postCode',
        'state' => 'state',
        'certificates' => 'certificates',
        'description' => 'description',
        'travelRuleOPENVASP' => 'travelRule_OPENVASP',
        'travelRuleSYGNA' => 'travelRule_SYGNA',
        'travelRuleTRISA' => 'travelRule_TRISA',
        'travelRuleTRLIGHT' => 'travelRule_TRLIGHT',
        'travelRuleEMAIL' => 'travelRule_EMAIL',
        'travelRuleTRP' => 'travelRule_TRP',
        'travelRuleSHYFT' => 'travelRule_SHYFT',
        'travelRuleUSTRAVELRULEWG' => 'travelRule_USTRAVELRULEWG',
        'createdAt' => 'createdAt',
        'createdBy' => 'createdBy',
        'updatedAt' => 'updatedAt',
        'updatedBy' => 'updatedBy',
        'lastSentDate' => 'lastSentDate',
        'lastReceivedDate' => 'lastReceivedDate',
        'documents' => 'documents',
        'hasAdmin' => 'hasAdmin',
        'isNotifiable' => 'isNotifiable',
        'issuers' => 'issuers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'did' => 'setDid',
        'name' => 'setName',
        'verificationStatus' => 'setVerificationStatus',
        'addressLine1' => 'setAddressLine1',
        'addressLine2' => 'setAddressLine2',
        'city' => 'setCity',
        'country' => 'setCountry',
        'emailDomains' => 'setEmailDomains',
        'website' => 'setWebsite',
        'logo' => 'setLogo',
        'legalStructure' => 'setLegalStructure',
        'legalName' => 'setLegalName',
        'yearFounded' => 'setYearFounded',
        'incorporationCountry' => 'setIncorporationCountry',
        'isRegulated' => 'setIsRegulated',
        'otherNames' => 'setOtherNames',
        'identificationType' => 'setIdentificationType',
        'identificationCountry' => 'setIdentificationCountry',
        'businessNumber' => 'setBusinessNumber',
        'regulatoryAuthorities' => 'setRegulatoryAuthorities',
        'jurisdictions' => 'setJurisdictions',
        'street' => 'setStreet',
        'number' => 'setNumber',
        'unit' => 'setUnit',
        'postCode' => 'setPostCode',
        'state' => 'setState',
        'certificates' => 'setCertificates',
        'description' => 'setDescription',
        'travelRuleOPENVASP' => 'setTravelRuleOPENVASP',
        'travelRuleSYGNA' => 'setTravelRuleSYGNA',
        'travelRuleTRISA' => 'setTravelRuleTRISA',
        'travelRuleTRLIGHT' => 'setTravelRuleTRLIGHT',
        'travelRuleEMAIL' => 'setTravelRuleEMAIL',
        'travelRuleTRP' => 'setTravelRuleTRP',
        'travelRuleSHYFT' => 'setTravelRuleSHYFT',
        'travelRuleUSTRAVELRULEWG' => 'setTravelRuleUSTRAVELRULEWG',
        'createdAt' => 'setCreatedAt',
        'createdBy' => 'setCreatedBy',
        'updatedAt' => 'setUpdatedAt',
        'updatedBy' => 'setUpdatedBy',
        'lastSentDate' => 'setLastSentDate',
        'lastReceivedDate' => 'setLastReceivedDate',
        'documents' => 'setDocuments',
        'hasAdmin' => 'setHasAdmin',
        'isNotifiable' => 'setIsNotifiable',
        'issuers' => 'setIssuers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'did' => 'getDid',
        'name' => 'getName',
        'verificationStatus' => 'getVerificationStatus',
        'addressLine1' => 'getAddressLine1',
        'addressLine2' => 'getAddressLine2',
        'city' => 'getCity',
        'country' => 'getCountry',
        'emailDomains' => 'getEmailDomains',
        'website' => 'getWebsite',
        'logo' => 'getLogo',
        'legalStructure' => 'getLegalStructure',
        'legalName' => 'getLegalName',
        'yearFounded' => 'getYearFounded',
        'incorporationCountry' => 'getIncorporationCountry',
        'isRegulated' => 'getIsRegulated',
        'otherNames' => 'getOtherNames',
        'identificationType' => 'getIdentificationType',
        'identificationCountry' => 'getIdentificationCountry',
        'businessNumber' => 'getBusinessNumber',
        'regulatoryAuthorities' => 'getRegulatoryAuthorities',
        'jurisdictions' => 'getJurisdictions',
        'street' => 'getStreet',
        'number' => 'getNumber',
        'unit' => 'getUnit',
        'postCode' => 'getPostCode',
        'state' => 'getState',
        'certificates' => 'getCertificates',
        'description' => 'getDescription',
        'travelRuleOPENVASP' => 'getTravelRuleOPENVASP',
        'travelRuleSYGNA' => 'getTravelRuleSYGNA',
        'travelRuleTRISA' => 'getTravelRuleTRISA',
        'travelRuleTRLIGHT' => 'getTravelRuleTRLIGHT',
        'travelRuleEMAIL' => 'getTravelRuleEMAIL',
        'travelRuleTRP' => 'getTravelRuleTRP',
        'travelRuleSHYFT' => 'getTravelRuleSHYFT',
        'travelRuleUSTRAVELRULEWG' => 'getTravelRuleUSTRAVELRULEWG',
        'createdAt' => 'getCreatedAt',
        'createdBy' => 'getCreatedBy',
        'updatedAt' => 'getUpdatedAt',
        'updatedBy' => 'getUpdatedBy',
        'lastSentDate' => 'getLastSentDate',
        'lastReceivedDate' => 'getLastReceivedDate',
        'documents' => 'getDocuments',
        'hasAdmin' => 'getHasAdmin',
        'isNotifiable' => 'getIsNotifiable',
        'issuers' => 'getIssuers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('did', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('verificationStatus', $data ?? [], null);
        $this->setIfExists('addressLine1', $data ?? [], null);
        $this->setIfExists('addressLine2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('emailDomains', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('legalStructure', $data ?? [], null);
        $this->setIfExists('legalName', $data ?? [], null);
        $this->setIfExists('yearFounded', $data ?? [], null);
        $this->setIfExists('incorporationCountry', $data ?? [], null);
        $this->setIfExists('isRegulated', $data ?? [], null);
        $this->setIfExists('otherNames', $data ?? [], null);
        $this->setIfExists('identificationType', $data ?? [], null);
        $this->setIfExists('identificationCountry', $data ?? [], null);
        $this->setIfExists('businessNumber', $data ?? [], null);
        $this->setIfExists('regulatoryAuthorities', $data ?? [], null);
        $this->setIfExists('jurisdictions', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('postCode', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('certificates', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('travelRuleOPENVASP', $data ?? [], null);
        $this->setIfExists('travelRuleSYGNA', $data ?? [], null);
        $this->setIfExists('travelRuleTRISA', $data ?? [], null);
        $this->setIfExists('travelRuleTRLIGHT', $data ?? [], null);
        $this->setIfExists('travelRuleEMAIL', $data ?? [], null);
        $this->setIfExists('travelRuleTRP', $data ?? [], null);
        $this->setIfExists('travelRuleSHYFT', $data ?? [], null);
        $this->setIfExists('travelRuleUSTRAVELRULEWG', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('createdBy', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
        $this->setIfExists('updatedBy', $data ?? [], null);
        $this->setIfExists('lastSentDate', $data ?? [], null);
        $this->setIfExists('lastReceivedDate', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('hasAdmin', $data ?? [], null);
        $this->setIfExists('isNotifiable', $data ?? [], null);
        $this->setIfExists('issuers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['did'] === null) {
            $invalidProperties[] = "'did' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['verificationStatus'] === null) {
            $invalidProperties[] = "'verificationStatus' can't be null";
        }
        if ($this->container['addressLine1'] === null) {
            $invalidProperties[] = "'addressLine1' can't be null";
        }
        if ($this->container['addressLine2'] === null) {
            $invalidProperties[] = "'addressLine2' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['emailDomains'] === null) {
            $invalidProperties[] = "'emailDomains' can't be null";
        }
        if ($this->container['website'] === null) {
            $invalidProperties[] = "'website' can't be null";
        }
        if ($this->container['logo'] === null) {
            $invalidProperties[] = "'logo' can't be null";
        }
        if ($this->container['legalStructure'] === null) {
            $invalidProperties[] = "'legalStructure' can't be null";
        }
        if ($this->container['legalName'] === null) {
            $invalidProperties[] = "'legalName' can't be null";
        }
        if ($this->container['yearFounded'] === null) {
            $invalidProperties[] = "'yearFounded' can't be null";
        }
        if ($this->container['incorporationCountry'] === null) {
            $invalidProperties[] = "'incorporationCountry' can't be null";
        }
        if ($this->container['isRegulated'] === null) {
            $invalidProperties[] = "'isRegulated' can't be null";
        }
        if ($this->container['otherNames'] === null) {
            $invalidProperties[] = "'otherNames' can't be null";
        }
        if ($this->container['identificationType'] === null) {
            $invalidProperties[] = "'identificationType' can't be null";
        }
        if ($this->container['identificationCountry'] === null) {
            $invalidProperties[] = "'identificationCountry' can't be null";
        }
        if ($this->container['businessNumber'] === null) {
            $invalidProperties[] = "'businessNumber' can't be null";
        }
        if ($this->container['regulatoryAuthorities'] === null) {
            $invalidProperties[] = "'regulatoryAuthorities' can't be null";
        }
        if ($this->container['jurisdictions'] === null) {
            $invalidProperties[] = "'jurisdictions' can't be null";
        }
        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['unit'] === null) {
            $invalidProperties[] = "'unit' can't be null";
        }
        if ($this->container['postCode'] === null) {
            $invalidProperties[] = "'postCode' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['certificates'] === null) {
            $invalidProperties[] = "'certificates' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['travelRuleOPENVASP'] === null) {
            $invalidProperties[] = "'travelRuleOPENVASP' can't be null";
        }
        if ($this->container['travelRuleSYGNA'] === null) {
            $invalidProperties[] = "'travelRuleSYGNA' can't be null";
        }
        if ($this->container['travelRuleTRISA'] === null) {
            $invalidProperties[] = "'travelRuleTRISA' can't be null";
        }
        if ($this->container['travelRuleTRLIGHT'] === null) {
            $invalidProperties[] = "'travelRuleTRLIGHT' can't be null";
        }
        if ($this->container['travelRuleEMAIL'] === null) {
            $invalidProperties[] = "'travelRuleEMAIL' can't be null";
        }
        if ($this->container['travelRuleTRP'] === null) {
            $invalidProperties[] = "'travelRuleTRP' can't be null";
        }
        if ($this->container['travelRuleSHYFT'] === null) {
            $invalidProperties[] = "'travelRuleSHYFT' can't be null";
        }
        if ($this->container['travelRuleUSTRAVELRULEWG'] === null) {
            $invalidProperties[] = "'travelRuleUSTRAVELRULEWG' can't be null";
        }
        if ($this->container['createdAt'] === null) {
            $invalidProperties[] = "'createdAt' can't be null";
        }
        if ($this->container['createdBy'] === null) {
            $invalidProperties[] = "'createdBy' can't be null";
        }
        if ($this->container['updatedAt'] === null) {
            $invalidProperties[] = "'updatedAt' can't be null";
        }
        if ($this->container['updatedBy'] === null) {
            $invalidProperties[] = "'updatedBy' can't be null";
        }
        if ($this->container['lastSentDate'] === null) {
            $invalidProperties[] = "'lastSentDate' can't be null";
        }
        if ($this->container['lastReceivedDate'] === null) {
            $invalidProperties[] = "'lastReceivedDate' can't be null";
        }
        if ($this->container['documents'] === null) {
            $invalidProperties[] = "'documents' can't be null";
        }
        if ($this->container['hasAdmin'] === null) {
            $invalidProperties[] = "'hasAdmin' can't be null";
        }
        if ($this->container['isNotifiable'] === null) {
            $invalidProperties[] = "'isNotifiable' can't be null";
        }
        if ($this->container['issuers'] === null) {
            $invalidProperties[] = "'issuers' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets did
     *
     * @return string
     */
    public function getDid()
    {
        return $this->container['did'];
    }

    /**
     * Sets did
     *
     * @param string $did did
     *
     * @return self
     */
    public function setDid($did)
    {
        if (is_null($did)) {
            throw new \InvalidArgumentException('non-nullable did cannot be null');
        }
        $this->container['did'] = $did;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets verificationStatus
     *
     * @return string
     */
    public function getVerificationStatus()
    {
        return $this->container['verificationStatus'];
    }

    /**
     * Sets verificationStatus
     *
     * @param string $verificationStatus verificationStatus
     *
     * @return self
     */
    public function setVerificationStatus($verificationStatus)
    {
        if (is_null($verificationStatus)) {
            throw new \InvalidArgumentException('non-nullable verificationStatus cannot be null');
        }
        $this->container['verificationStatus'] = $verificationStatus;

        return $this;
    }

    /**
     * Gets addressLine1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['addressLine1'];
    }

    /**
     * Sets addressLine1
     *
     * @param string $addressLine1 addressLine1
     *
     * @return self
     */
    public function setAddressLine1($addressLine1)
    {
        if (is_null($addressLine1)) {
            throw new \InvalidArgumentException('non-nullable addressLine1 cannot be null');
        }
        $this->container['addressLine1'] = $addressLine1;

        return $this;
    }

    /**
     * Gets addressLine2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['addressLine2'];
    }

    /**
     * Sets addressLine2
     *
     * @param string $addressLine2 addressLine2
     *
     * @return self
     */
    public function setAddressLine2($addressLine2)
    {
        if (is_null($addressLine2)) {
            throw new \InvalidArgumentException('non-nullable addressLine2 cannot be null');
        }
        $this->container['addressLine2'] = $addressLine2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets emailDomains
     *
     * @return string
     */
    public function getEmailDomains()
    {
        return $this->container['emailDomains'];
    }

    /**
     * Sets emailDomains
     *
     * @param string $emailDomains emailDomains
     *
     * @return self
     */
    public function setEmailDomains($emailDomains)
    {
        if (is_null($emailDomains)) {
            throw new \InvalidArgumentException('non-nullable emailDomains cannot be null');
        }
        $this->container['emailDomains'] = $emailDomains;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets legalStructure
     *
     * @return string
     */
    public function getLegalStructure()
    {
        return $this->container['legalStructure'];
    }

    /**
     * Sets legalStructure
     *
     * @param string $legalStructure legalStructure
     *
     * @return self
     */
    public function setLegalStructure($legalStructure)
    {
        if (is_null($legalStructure)) {
            throw new \InvalidArgumentException('non-nullable legalStructure cannot be null');
        }
        $this->container['legalStructure'] = $legalStructure;

        return $this;
    }

    /**
     * Gets legalName
     *
     * @return string
     */
    public function getLegalName()
    {
        return $this->container['legalName'];
    }

    /**
     * Sets legalName
     *
     * @param string $legalName legalName
     *
     * @return self
     */
    public function setLegalName($legalName)
    {
        if (is_null($legalName)) {
            throw new \InvalidArgumentException('non-nullable legalName cannot be null');
        }
        $this->container['legalName'] = $legalName;

        return $this;
    }

    /**
     * Gets yearFounded
     *
     * @return string
     */
    public function getYearFounded()
    {
        return $this->container['yearFounded'];
    }

    /**
     * Sets yearFounded
     *
     * @param string $yearFounded yearFounded
     *
     * @return self
     */
    public function setYearFounded($yearFounded)
    {
        if (is_null($yearFounded)) {
            throw new \InvalidArgumentException('non-nullable yearFounded cannot be null');
        }
        $this->container['yearFounded'] = $yearFounded;

        return $this;
    }

    /**
     * Gets incorporationCountry
     *
     * @return string
     */
    public function getIncorporationCountry()
    {
        return $this->container['incorporationCountry'];
    }

    /**
     * Sets incorporationCountry
     *
     * @param string $incorporationCountry incorporationCountry
     *
     * @return self
     */
    public function setIncorporationCountry($incorporationCountry)
    {
        if (is_null($incorporationCountry)) {
            throw new \InvalidArgumentException('non-nullable incorporationCountry cannot be null');
        }
        $this->container['incorporationCountry'] = $incorporationCountry;

        return $this;
    }

    /**
     * Gets isRegulated
     *
     * @return string
     */
    public function getIsRegulated()
    {
        return $this->container['isRegulated'];
    }

    /**
     * Sets isRegulated
     *
     * @param string $isRegulated isRegulated
     *
     * @return self
     */
    public function setIsRegulated($isRegulated)
    {
        if (is_null($isRegulated)) {
            throw new \InvalidArgumentException('non-nullable isRegulated cannot be null');
        }
        $this->container['isRegulated'] = $isRegulated;

        return $this;
    }

    /**
     * Gets otherNames
     *
     * @return string
     */
    public function getOtherNames()
    {
        return $this->container['otherNames'];
    }

    /**
     * Sets otherNames
     *
     * @param string $otherNames otherNames
     *
     * @return self
     */
    public function setOtherNames($otherNames)
    {
        if (is_null($otherNames)) {
            throw new \InvalidArgumentException('non-nullable otherNames cannot be null');
        }
        $this->container['otherNames'] = $otherNames;

        return $this;
    }

    /**
     * Gets identificationType
     *
     * @return string
     */
    public function getIdentificationType()
    {
        return $this->container['identificationType'];
    }

    /**
     * Sets identificationType
     *
     * @param string $identificationType identificationType
     *
     * @return self
     */
    public function setIdentificationType($identificationType)
    {
        if (is_null($identificationType)) {
            throw new \InvalidArgumentException('non-nullable identificationType cannot be null');
        }
        $this->container['identificationType'] = $identificationType;

        return $this;
    }

    /**
     * Gets identificationCountry
     *
     * @return string
     */
    public function getIdentificationCountry()
    {
        return $this->container['identificationCountry'];
    }

    /**
     * Sets identificationCountry
     *
     * @param string $identificationCountry identificationCountry
     *
     * @return self
     */
    public function setIdentificationCountry($identificationCountry)
    {
        if (is_null($identificationCountry)) {
            throw new \InvalidArgumentException('non-nullable identificationCountry cannot be null');
        }
        $this->container['identificationCountry'] = $identificationCountry;

        return $this;
    }

    /**
     * Gets businessNumber
     *
     * @return string
     */
    public function getBusinessNumber()
    {
        return $this->container['businessNumber'];
    }

    /**
     * Sets businessNumber
     *
     * @param string $businessNumber businessNumber
     *
     * @return self
     */
    public function setBusinessNumber($businessNumber)
    {
        if (is_null($businessNumber)) {
            throw new \InvalidArgumentException('non-nullable businessNumber cannot be null');
        }
        $this->container['businessNumber'] = $businessNumber;

        return $this;
    }

    /**
     * Gets regulatoryAuthorities
     *
     * @return string
     */
    public function getRegulatoryAuthorities()
    {
        return $this->container['regulatoryAuthorities'];
    }

    /**
     * Sets regulatoryAuthorities
     *
     * @param string $regulatoryAuthorities regulatoryAuthorities
     *
     * @return self
     */
    public function setRegulatoryAuthorities($regulatoryAuthorities)
    {
        if (is_null($regulatoryAuthorities)) {
            throw new \InvalidArgumentException('non-nullable regulatoryAuthorities cannot be null');
        }
        $this->container['regulatoryAuthorities'] = $regulatoryAuthorities;

        return $this;
    }

    /**
     * Gets jurisdictions
     *
     * @return string
     */
    public function getJurisdictions()
    {
        return $this->container['jurisdictions'];
    }

    /**
     * Sets jurisdictions
     *
     * @param string $jurisdictions jurisdictions
     *
     * @return self
     */
    public function setJurisdictions($jurisdictions)
    {
        if (is_null($jurisdictions)) {
            throw new \InvalidArgumentException('non-nullable jurisdictions cannot be null');
        }
        $this->container['jurisdictions'] = $jurisdictions;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets postCode
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['postCode'];
    }

    /**
     * Sets postCode
     *
     * @param string $postCode postCode
     *
     * @return self
     */
    public function setPostCode($postCode)
    {
        if (is_null($postCode)) {
            throw new \InvalidArgumentException('non-nullable postCode cannot be null');
        }
        $this->container['postCode'] = $postCode;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets certificates
     *
     * @return string
     */
    public function getCertificates()
    {
        return $this->container['certificates'];
    }

    /**
     * Sets certificates
     *
     * @param string $certificates certificates
     *
     * @return self
     */
    public function setCertificates($certificates)
    {
        if (is_null($certificates)) {
            throw new \InvalidArgumentException('non-nullable certificates cannot be null');
        }
        $this->container['certificates'] = $certificates;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets travelRuleOPENVASP
     *
     * @return string
     */
    public function getTravelRuleOPENVASP()
    {
        return $this->container['travelRuleOPENVASP'];
    }

    /**
     * Sets travelRuleOPENVASP
     *
     * @param string $travelRuleOPENVASP travelRuleOPENVASP
     *
     * @return self
     */
    public function setTravelRuleOPENVASP($travelRuleOPENVASP)
    {
        if (is_null($travelRuleOPENVASP)) {
            throw new \InvalidArgumentException('non-nullable travelRuleOPENVASP cannot be null');
        }
        $this->container['travelRuleOPENVASP'] = $travelRuleOPENVASP;

        return $this;
    }

    /**
     * Gets travelRuleSYGNA
     *
     * @return string
     */
    public function getTravelRuleSYGNA()
    {
        return $this->container['travelRuleSYGNA'];
    }

    /**
     * Sets travelRuleSYGNA
     *
     * @param string $travelRuleSYGNA travelRuleSYGNA
     *
     * @return self
     */
    public function setTravelRuleSYGNA($travelRuleSYGNA)
    {
        if (is_null($travelRuleSYGNA)) {
            throw new \InvalidArgumentException('non-nullable travelRuleSYGNA cannot be null');
        }
        $this->container['travelRuleSYGNA'] = $travelRuleSYGNA;

        return $this;
    }

    /**
     * Gets travelRuleTRISA
     *
     * @return string
     */
    public function getTravelRuleTRISA()
    {
        return $this->container['travelRuleTRISA'];
    }

    /**
     * Sets travelRuleTRISA
     *
     * @param string $travelRuleTRISA travelRuleTRISA
     *
     * @return self
     */
    public function setTravelRuleTRISA($travelRuleTRISA)
    {
        if (is_null($travelRuleTRISA)) {
            throw new \InvalidArgumentException('non-nullable travelRuleTRISA cannot be null');
        }
        $this->container['travelRuleTRISA'] = $travelRuleTRISA;

        return $this;
    }

    /**
     * Gets travelRuleTRLIGHT
     *
     * @return string
     */
    public function getTravelRuleTRLIGHT()
    {
        return $this->container['travelRuleTRLIGHT'];
    }

    /**
     * Sets travelRuleTRLIGHT
     *
     * @param string $travelRuleTRLIGHT travelRuleTRLIGHT
     *
     * @return self
     */
    public function setTravelRuleTRLIGHT($travelRuleTRLIGHT)
    {
        if (is_null($travelRuleTRLIGHT)) {
            throw new \InvalidArgumentException('non-nullable travelRuleTRLIGHT cannot be null');
        }
        $this->container['travelRuleTRLIGHT'] = $travelRuleTRLIGHT;

        return $this;
    }

    /**
     * Gets travelRuleEMAIL
     *
     * @return string
     */
    public function getTravelRuleEMAIL()
    {
        return $this->container['travelRuleEMAIL'];
    }

    /**
     * Sets travelRuleEMAIL
     *
     * @param string $travelRuleEMAIL travelRuleEMAIL
     *
     * @return self
     */
    public function setTravelRuleEMAIL($travelRuleEMAIL)
    {
        if (is_null($travelRuleEMAIL)) {
            throw new \InvalidArgumentException('non-nullable travelRuleEMAIL cannot be null');
        }
        $this->container['travelRuleEMAIL'] = $travelRuleEMAIL;

        return $this;
    }

    /**
     * Gets travelRuleTRP
     *
     * @return string
     */
    public function getTravelRuleTRP()
    {
        return $this->container['travelRuleTRP'];
    }

    /**
     * Sets travelRuleTRP
     *
     * @param string $travelRuleTRP travelRuleTRP
     *
     * @return self
     */
    public function setTravelRuleTRP($travelRuleTRP)
    {
        if (is_null($travelRuleTRP)) {
            throw new \InvalidArgumentException('non-nullable travelRuleTRP cannot be null');
        }
        $this->container['travelRuleTRP'] = $travelRuleTRP;

        return $this;
    }

    /**
     * Gets travelRuleSHYFT
     *
     * @return string
     */
    public function getTravelRuleSHYFT()
    {
        return $this->container['travelRuleSHYFT'];
    }

    /**
     * Sets travelRuleSHYFT
     *
     * @param string $travelRuleSHYFT travelRuleSHYFT
     *
     * @return self
     */
    public function setTravelRuleSHYFT($travelRuleSHYFT)
    {
        if (is_null($travelRuleSHYFT)) {
            throw new \InvalidArgumentException('non-nullable travelRuleSHYFT cannot be null');
        }
        $this->container['travelRuleSHYFT'] = $travelRuleSHYFT;

        return $this;
    }

    /**
     * Gets travelRuleUSTRAVELRULEWG
     *
     * @return string
     */
    public function getTravelRuleUSTRAVELRULEWG()
    {
        return $this->container['travelRuleUSTRAVELRULEWG'];
    }

    /**
     * Sets travelRuleUSTRAVELRULEWG
     *
     * @param string $travelRuleUSTRAVELRULEWG travelRuleUSTRAVELRULEWG
     *
     * @return self
     */
    public function setTravelRuleUSTRAVELRULEWG($travelRuleUSTRAVELRULEWG)
    {
        if (is_null($travelRuleUSTRAVELRULEWG)) {
            throw new \InvalidArgumentException('non-nullable travelRuleUSTRAVELRULEWG cannot be null');
        }
        $this->container['travelRuleUSTRAVELRULEWG'] = $travelRuleUSTRAVELRULEWG;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt createdAt
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string $createdBy createdBy
     *
     * @return self
     */
    public function setCreatedBy($createdBy)
    {
        if (is_null($createdBy)) {
            throw new \InvalidArgumentException('non-nullable createdBy cannot be null');
        }
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt updatedAt
     *
     * @return self
     */
    public function setUpdatedAt($updatedAt)
    {
        if (is_null($updatedAt)) {
            throw new \InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets updatedBy
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updatedBy'];
    }

    /**
     * Sets updatedBy
     *
     * @param string $updatedBy updatedBy
     *
     * @return self
     */
    public function setUpdatedBy($updatedBy)
    {
        if (is_null($updatedBy)) {
            throw new \InvalidArgumentException('non-nullable updatedBy cannot be null');
        }
        $this->container['updatedBy'] = $updatedBy;

        return $this;
    }

    /**
     * Gets lastSentDate
     *
     * @return string
     */
    public function getLastSentDate()
    {
        return $this->container['lastSentDate'];
    }

    /**
     * Sets lastSentDate
     *
     * @param string $lastSentDate lastSentDate
     *
     * @return self
     */
    public function setLastSentDate($lastSentDate)
    {
        if (is_null($lastSentDate)) {
            throw new \InvalidArgumentException('non-nullable lastSentDate cannot be null');
        }
        $this->container['lastSentDate'] = $lastSentDate;

        return $this;
    }

    /**
     * Gets lastReceivedDate
     *
     * @return string
     */
    public function getLastReceivedDate()
    {
        return $this->container['lastReceivedDate'];
    }

    /**
     * Sets lastReceivedDate
     *
     * @param string $lastReceivedDate lastReceivedDate
     *
     * @return self
     */
    public function setLastReceivedDate($lastReceivedDate)
    {
        if (is_null($lastReceivedDate)) {
            throw new \InvalidArgumentException('non-nullable lastReceivedDate cannot be null');
        }
        $this->container['lastReceivedDate'] = $lastReceivedDate;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return string
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param string $documents documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets hasAdmin
     *
     * @return bool
     */
    public function getHasAdmin()
    {
        return $this->container['hasAdmin'];
    }

    /**
     * Sets hasAdmin
     *
     * @param bool $hasAdmin hasAdmin
     *
     * @return self
     */
    public function setHasAdmin($hasAdmin)
    {
        if (is_null($hasAdmin)) {
            throw new \InvalidArgumentException('non-nullable hasAdmin cannot be null');
        }
        $this->container['hasAdmin'] = $hasAdmin;

        return $this;
    }

    /**
     * Gets isNotifiable
     *
     * @return bool
     */
    public function getIsNotifiable()
    {
        return $this->container['isNotifiable'];
    }

    /**
     * Sets isNotifiable
     *
     * @param bool $isNotifiable isNotifiable
     *
     * @return self
     */
    public function setIsNotifiable($isNotifiable)
    {
        if (is_null($isNotifiable)) {
            throw new \InvalidArgumentException('non-nullable isNotifiable cannot be null');
        }
        $this->container['isNotifiable'] = $isNotifiable;

        return $this;
    }

    /**
     * Gets issuers
     *
     * @return \Developerayo\FireblocksLaravel\Models\TravelRuleIssuers
     */
    public function getIssuers()
    {
        return $this->container['issuers'];
    }

    /**
     * Sets issuers
     *
     * @param \Developerayo\FireblocksLaravel\Models\TravelRuleIssuers $issuers issuers
     *
     * @return self
     */
    public function setIssuers($issuers)
    {
        if (is_null($issuers)) {
            throw new \InvalidArgumentException('non-nullable issuers cannot be null');
        }
        $this->container['issuers'] = $issuers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


