<?php
/**
 * SmartTransferTicketDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * SmartTransferTicketDto Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SmartTransferTicketDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SmartTransferTicketDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'direction' => 'string',
        'status' => 'string',
        'terms' => '\DeveloperayoFireblocksLaravel\Model\SmartTransferTicketTermDto[]',
        'expires_in' => 'float',
        'expires_at' => '\DateTime',
        'submitted_at' => '\DateTime',
        'expired_at' => '\DateTime',
        'canceled_at' => '\DateTime',
        'fulfilled_at' => '\DateTime',
        'external_ref_id' => 'string',
        'note' => 'string',
        'created_by_network_id' => 'string',
        'created_by_network_id_name' => 'string',
        'canceled_by_network_id_name' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'canceled_by_me' => 'bool',
        'created_by_me' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'type' => null,
        'direction' => null,
        'status' => null,
        'terms' => null,
        'expires_in' => null,
        'expires_at' => 'date-time',
        'submitted_at' => 'date-time',
        'expired_at' => 'date-time',
        'canceled_at' => 'date-time',
        'fulfilled_at' => 'date-time',
        'external_ref_id' => null,
        'note' => null,
        'created_by_network_id' => null,
        'created_by_network_id_name' => null,
        'canceled_by_network_id_name' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'canceled_by_me' => null,
        'created_by_me' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'type' => false,
        'direction' => false,
        'status' => false,
        'terms' => false,
        'expires_in' => false,
        'expires_at' => false,
        'submitted_at' => false,
        'expired_at' => false,
        'canceled_at' => false,
        'fulfilled_at' => false,
        'external_ref_id' => false,
        'note' => false,
        'created_by_network_id' => false,
        'created_by_network_id_name' => false,
        'canceled_by_network_id_name' => false,
        'created_at' => false,
        'updated_at' => false,
        'canceled_by_me' => false,
        'created_by_me' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'direction' => 'direction',
        'status' => 'status',
        'terms' => 'terms',
        'expires_in' => 'expiresIn',
        'expires_at' => 'expiresAt',
        'submitted_at' => 'submittedAt',
        'expired_at' => 'expiredAt',
        'canceled_at' => 'canceledAt',
        'fulfilled_at' => 'fulfilledAt',
        'external_ref_id' => 'externalRefId',
        'note' => 'note',
        'created_by_network_id' => 'createdByNetworkId',
        'created_by_network_id_name' => 'createdByNetworkIdName',
        'canceled_by_network_id_name' => 'canceledByNetworkIdName',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'canceled_by_me' => 'canceledByMe',
        'created_by_me' => 'createdByMe'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'direction' => 'setDirection',
        'status' => 'setStatus',
        'terms' => 'setTerms',
        'expires_in' => 'setExpiresIn',
        'expires_at' => 'setExpiresAt',
        'submitted_at' => 'setSubmittedAt',
        'expired_at' => 'setExpiredAt',
        'canceled_at' => 'setCanceledAt',
        'fulfilled_at' => 'setFulfilledAt',
        'external_ref_id' => 'setExternalRefId',
        'note' => 'setNote',
        'created_by_network_id' => 'setCreatedByNetworkId',
        'created_by_network_id_name' => 'setCreatedByNetworkIdName',
        'canceled_by_network_id_name' => 'setCanceledByNetworkIdName',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'canceled_by_me' => 'setCanceledByMe',
        'created_by_me' => 'setCreatedByMe'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'direction' => 'getDirection',
        'status' => 'getStatus',
        'terms' => 'getTerms',
        'expires_in' => 'getExpiresIn',
        'expires_at' => 'getExpiresAt',
        'submitted_at' => 'getSubmittedAt',
        'expired_at' => 'getExpiredAt',
        'canceled_at' => 'getCanceledAt',
        'fulfilled_at' => 'getFulfilledAt',
        'external_ref_id' => 'getExternalRefId',
        'note' => 'getNote',
        'created_by_network_id' => 'getCreatedByNetworkId',
        'created_by_network_id_name' => 'getCreatedByNetworkIdName',
        'canceled_by_network_id_name' => 'getCanceledByNetworkIdName',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'canceled_by_me' => 'getCanceledByMe',
        'created_by_me' => 'getCreatedByMe'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_ASYNC = 'ASYNC';
    public const DIRECTION_EXCHANGE = 'EXCHANGE';
    public const DIRECTION_SEND = 'SEND';
    public const DIRECTION_RECEIVE = 'RECEIVE';
    public const DIRECTION_INTERMEDIATE = 'INTERMEDIATE';
    public const STATUS_DRAFT = 'DRAFT';
    public const STATUS_PENDING_APPROVAL = 'PENDING_APPROVAL';
    public const STATUS_OPEN = 'OPEN';
    public const STATUS_IN_SETTLEMENT = 'IN_SETTLEMENT';
    public const STATUS_FULFILLED = 'FULFILLED';
    public const STATUS_EXPIRED = 'EXPIRED';
    public const STATUS_CANCELED = 'CANCELED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ASYNC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDirectionAllowableValues()
    {
        return [
            self::DIRECTION_EXCHANGE,
            self::DIRECTION_SEND,
            self::DIRECTION_RECEIVE,
            self::DIRECTION_INTERMEDIATE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_DRAFT,
            self::STATUS_PENDING_APPROVAL,
            self::STATUS_OPEN,
            self::STATUS_IN_SETTLEMENT,
            self::STATUS_FULFILLED,
            self::STATUS_EXPIRED,
            self::STATUS_CANCELED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('direction', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('terms', $data ?? [], null);
        $this->setIfExists('expires_in', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('submitted_at', $data ?? [], null);
        $this->setIfExists('expired_at', $data ?? [], null);
        $this->setIfExists('canceled_at', $data ?? [], null);
        $this->setIfExists('fulfilled_at', $data ?? [], null);
        $this->setIfExists('external_ref_id', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('created_by_network_id', $data ?? [], null);
        $this->setIfExists('created_by_network_id_name', $data ?? [], null);
        $this->setIfExists('canceled_by_network_id_name', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('canceled_by_me', $data ?? [], null);
        $this->setIfExists('created_by_me', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDirectionAllowableValues();
        if (!is_null($this->container['direction']) && !in_array($this->container['direction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'direction', must be one of '%s'",
                $this->container['direction'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_by_network_id'] === null) {
            $invalidProperties[] = "'created_by_network_id' can't be null";
        }
        if ($this->container['created_by_network_id_name'] === null) {
            $invalidProperties[] = "'created_by_network_id_name' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique id of Smart Transfer ticket
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Kind of Smart Transfer. Can be either `ASYNC` or `ATOMIC`
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets direction
     *
     * @return string|null
     */
    public function getDirection()
    {
        return $this->container['direction'];
    }

    /**
     * Sets direction
     *
     * @param string|null $direction Direction of Smart Transfer.
     *
     * @return self
     */
    public function setDirection($direction)
    {
        if (is_null($direction)) {
            throw new \InvalidArgumentException('non-nullable direction cannot be null');
        }
        $allowedValues = $this->getDirectionAllowableValues();
        if (!in_array($direction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'direction', must be one of '%s'",
                    $direction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['direction'] = $direction;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Current status of Smart Transfer ticket
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return \DeveloperayoFireblocksLaravel\Model\SmartTransferTicketTermDto[]|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param \DeveloperayoFireblocksLaravel\Model\SmartTransferTicketTermDto[]|null $terms Ticket terms (legs)
     *
     * @return self
     */
    public function setTerms($terms)
    {
        if (is_null($terms)) {
            throw new \InvalidArgumentException('non-nullable terms cannot be null');
        }
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets expires_in
     *
     * @return float|null
     */
    public function getExpiresIn()
    {
        return $this->container['expires_in'];
    }

    /**
     * Sets expires_in
     *
     * @param float|null $expires_in Number of hours for expiration.This data is valid only it ticket not in DRAFT state and it will be used to calculate expiresAt value
     *
     * @return self
     */
    public function setExpiresIn($expires_in)
    {
        if (is_null($expires_in)) {
            throw new \InvalidArgumentException('non-nullable expires_in cannot be null');
        }
        $this->container['expires_in'] = $expires_in;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime|null $expires_at Date and time at which the ticket will expire if no funding is performed.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            throw new \InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets submitted_at
     *
     * @return \DateTime|null
     */
    public function getSubmittedAt()
    {
        return $this->container['submitted_at'];
    }

    /**
     * Sets submitted_at
     *
     * @param \DateTime|null $submitted_at Date and time when ticket is submitted.
     *
     * @return self
     */
    public function setSubmittedAt($submitted_at)
    {
        if (is_null($submitted_at)) {
            throw new \InvalidArgumentException('non-nullable submitted_at cannot be null');
        }
        $this->container['submitted_at'] = $submitted_at;

        return $this;
    }

    /**
     * Gets expired_at
     *
     * @return \DateTime|null
     */
    public function getExpiredAt()
    {
        return $this->container['expired_at'];
    }

    /**
     * Sets expired_at
     *
     * @param \DateTime|null $expired_at Date and time when ticket is expired.
     *
     * @return self
     */
    public function setExpiredAt($expired_at)
    {
        if (is_null($expired_at)) {
            throw new \InvalidArgumentException('non-nullable expired_at cannot be null');
        }
        $this->container['expired_at'] = $expired_at;

        return $this;
    }

    /**
     * Gets canceled_at
     *
     * @return \DateTime|null
     */
    public function getCanceledAt()
    {
        return $this->container['canceled_at'];
    }

    /**
     * Sets canceled_at
     *
     * @param \DateTime|null $canceled_at Date and time when ticket is canceled.
     *
     * @return self
     */
    public function setCanceledAt($canceled_at)
    {
        if (is_null($canceled_at)) {
            throw new \InvalidArgumentException('non-nullable canceled_at cannot be null');
        }
        $this->container['canceled_at'] = $canceled_at;

        return $this;
    }

    /**
     * Gets fulfilled_at
     *
     * @return \DateTime|null
     */
    public function getFulfilledAt()
    {
        return $this->container['fulfilled_at'];
    }

    /**
     * Sets fulfilled_at
     *
     * @param \DateTime|null $fulfilled_at Date and time when ticket is fulfilled.
     *
     * @return self
     */
    public function setFulfilledAt($fulfilled_at)
    {
        if (is_null($fulfilled_at)) {
            throw new \InvalidArgumentException('non-nullable fulfilled_at cannot be null');
        }
        $this->container['fulfilled_at'] = $fulfilled_at;

        return $this;
    }

    /**
     * Gets external_ref_id
     *
     * @return string|null
     */
    public function getExternalRefId()
    {
        return $this->container['external_ref_id'];
    }

    /**
     * Sets external_ref_id
     *
     * @param string|null $external_ref_id External Ref ID for Smart Transfer ticket.
     *
     * @return self
     */
    public function setExternalRefId($external_ref_id)
    {
        if (is_null($external_ref_id)) {
            throw new \InvalidArgumentException('non-nullable external_ref_id cannot be null');
        }
        $this->container['external_ref_id'] = $external_ref_id;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets created_by_network_id
     *
     * @return string
     */
    public function getCreatedByNetworkId()
    {
        return $this->container['created_by_network_id'];
    }

    /**
     * Sets created_by_network_id
     *
     * @param string $created_by_network_id ID of network profile that created ticket
     *
     * @return self
     */
    public function setCreatedByNetworkId($created_by_network_id)
    {
        if (is_null($created_by_network_id)) {
            throw new \InvalidArgumentException('non-nullable created_by_network_id cannot be null');
        }
        $this->container['created_by_network_id'] = $created_by_network_id;

        return $this;
    }

    /**
     * Gets created_by_network_id_name
     *
     * @return string
     */
    public function getCreatedByNetworkIdName()
    {
        return $this->container['created_by_network_id_name'];
    }

    /**
     * Sets created_by_network_id_name
     *
     * @param string $created_by_network_id_name Name of network profile that created ticket
     *
     * @return self
     */
    public function setCreatedByNetworkIdName($created_by_network_id_name)
    {
        if (is_null($created_by_network_id_name)) {
            throw new \InvalidArgumentException('non-nullable created_by_network_id_name cannot be null');
        }
        $this->container['created_by_network_id_name'] = $created_by_network_id_name;

        return $this;
    }

    /**
     * Gets canceled_by_network_id_name
     *
     * @return string|null
     */
    public function getCanceledByNetworkIdName()
    {
        return $this->container['canceled_by_network_id_name'];
    }

    /**
     * Sets canceled_by_network_id_name
     *
     * @param string|null $canceled_by_network_id_name Name of network profile that canceled ticket
     *
     * @return self
     */
    public function setCanceledByNetworkIdName($canceled_by_network_id_name)
    {
        if (is_null($canceled_by_network_id_name)) {
            throw new \InvalidArgumentException('non-nullable canceled_by_network_id_name cannot be null');
        }
        $this->container['canceled_by_network_id_name'] = $canceled_by_network_id_name;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date and time at which the ticket is created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date and time of last ticket update.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets canceled_by_me
     *
     * @return bool|null
     */
    public function getCanceledByMe()
    {
        return $this->container['canceled_by_me'];
    }

    /**
     * Sets canceled_by_me
     *
     * @param bool|null $canceled_by_me canceled_by_me
     *
     * @return self
     */
    public function setCanceledByMe($canceled_by_me)
    {
        if (is_null($canceled_by_me)) {
            throw new \InvalidArgumentException('non-nullable canceled_by_me cannot be null');
        }
        $this->container['canceled_by_me'] = $canceled_by_me;

        return $this;
    }

    /**
     * Gets created_by_me
     *
     * @return bool|null
     */
    public function getCreatedByMe()
    {
        return $this->container['created_by_me'];
    }

    /**
     * Sets created_by_me
     *
     * @param bool|null $created_by_me created_by_me
     *
     * @return self
     */
    public function setCreatedByMe($created_by_me)
    {
        if (is_null($created_by_me)) {
            throw new \InvalidArgumentException('non-nullable created_by_me cannot be null');
        }
        $this->container['created_by_me'] = $created_by_me;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


