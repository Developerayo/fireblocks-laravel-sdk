<?php
/**
 * VaultAsset
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * VaultAsset Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VaultAsset implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VaultAsset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'total' => 'string',
        'balance' => 'string',
        'available' => 'string',
        'pending' => 'string',
        'frozen' => 'string',
        'locked_amount' => 'string',
        'staked' => 'string',
        'total_staked_cpu' => 'float',
        'total_staked_network' => 'string',
        'self_staked_cpu' => 'string',
        'self_staked_network' => 'string',
        'pending_refund_cpu' => 'string',
        'pending_refund_network' => 'string',
        'block_height' => 'string',
        'block_hash' => 'string',
        'rewards_info' => '\DeveloperayoFireblocksLaravel\Model\RewardsInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'total' => null,
        'balance' => null,
        'available' => null,
        'pending' => null,
        'frozen' => null,
        'locked_amount' => null,
        'staked' => null,
        'total_staked_cpu' => null,
        'total_staked_network' => null,
        'self_staked_cpu' => null,
        'self_staked_network' => null,
        'pending_refund_cpu' => null,
        'pending_refund_network' => null,
        'block_height' => null,
        'block_hash' => null,
        'rewards_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'total' => false,
        'balance' => false,
        'available' => false,
        'pending' => false,
        'frozen' => false,
        'locked_amount' => false,
        'staked' => false,
        'total_staked_cpu' => false,
        'total_staked_network' => false,
        'self_staked_cpu' => false,
        'self_staked_network' => false,
        'pending_refund_cpu' => false,
        'pending_refund_network' => false,
        'block_height' => false,
        'block_hash' => false,
        'rewards_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'total' => 'total',
        'balance' => 'balance',
        'available' => 'available',
        'pending' => 'pending',
        'frozen' => 'frozen',
        'locked_amount' => 'lockedAmount',
        'staked' => 'staked',
        'total_staked_cpu' => 'totalStakedCPU',
        'total_staked_network' => 'totalStakedNetwork',
        'self_staked_cpu' => 'selfStakedCPU',
        'self_staked_network' => 'selfStakedNetwork',
        'pending_refund_cpu' => 'pendingRefundCPU',
        'pending_refund_network' => 'pendingRefundNetwork',
        'block_height' => 'blockHeight',
        'block_hash' => 'blockHash',
        'rewards_info' => 'rewardsInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'total' => 'setTotal',
        'balance' => 'setBalance',
        'available' => 'setAvailable',
        'pending' => 'setPending',
        'frozen' => 'setFrozen',
        'locked_amount' => 'setLockedAmount',
        'staked' => 'setStaked',
        'total_staked_cpu' => 'setTotalStakedCpu',
        'total_staked_network' => 'setTotalStakedNetwork',
        'self_staked_cpu' => 'setSelfStakedCpu',
        'self_staked_network' => 'setSelfStakedNetwork',
        'pending_refund_cpu' => 'setPendingRefundCpu',
        'pending_refund_network' => 'setPendingRefundNetwork',
        'block_height' => 'setBlockHeight',
        'block_hash' => 'setBlockHash',
        'rewards_info' => 'setRewardsInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'total' => 'getTotal',
        'balance' => 'getBalance',
        'available' => 'getAvailable',
        'pending' => 'getPending',
        'frozen' => 'getFrozen',
        'locked_amount' => 'getLockedAmount',
        'staked' => 'getStaked',
        'total_staked_cpu' => 'getTotalStakedCpu',
        'total_staked_network' => 'getTotalStakedNetwork',
        'self_staked_cpu' => 'getSelfStakedCpu',
        'self_staked_network' => 'getSelfStakedNetwork',
        'pending_refund_cpu' => 'getPendingRefundCpu',
        'pending_refund_network' => 'getPendingRefundNetwork',
        'block_height' => 'getBlockHeight',
        'block_hash' => 'getBlockHash',
        'rewards_info' => 'getRewardsInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('available', $data ?? [], null);
        $this->setIfExists('pending', $data ?? [], null);
        $this->setIfExists('frozen', $data ?? [], null);
        $this->setIfExists('locked_amount', $data ?? [], null);
        $this->setIfExists('staked', $data ?? [], null);
        $this->setIfExists('total_staked_cpu', $data ?? [], null);
        $this->setIfExists('total_staked_network', $data ?? [], null);
        $this->setIfExists('self_staked_cpu', $data ?? [], null);
        $this->setIfExists('self_staked_network', $data ?? [], null);
        $this->setIfExists('pending_refund_cpu', $data ?? [], null);
        $this->setIfExists('pending_refund_network', $data ?? [], null);
        $this->setIfExists('block_height', $data ?? [], null);
        $this->setIfExists('block_hash', $data ?? [], null);
        $this->setIfExists('rewards_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string|null $total The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return string|null
     * @deprecated
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param string|null $balance Deprecated - replaced by \"total\"
     *
     * @return self
     * @deprecated
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets available
     *
     * @return string|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param string|null $available Funds available for transfer. Equals the blockchain balance minus any locked amounts
     *
     * @return self
     */
    public function setAvailable($available)
    {
        if (is_null($available)) {
            throw new \InvalidArgumentException('non-nullable available cannot be null');
        }
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return string|null
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param string|null $pending The cumulative balance of all transactions pending to be cleared
     *
     * @return self
     */
    public function setPending($pending)
    {
        if (is_null($pending)) {
            throw new \InvalidArgumentException('non-nullable pending cannot be null');
        }
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets frozen
     *
     * @return string|null
     */
    public function getFrozen()
    {
        return $this->container['frozen'];
    }

    /**
     * Sets frozen
     *
     * @param string|null $frozen The cumulative frozen balance
     *
     * @return self
     */
    public function setFrozen($frozen)
    {
        if (is_null($frozen)) {
            throw new \InvalidArgumentException('non-nullable frozen cannot be null');
        }
        $this->container['frozen'] = $frozen;

        return $this;
    }

    /**
     * Gets locked_amount
     *
     * @return string|null
     */
    public function getLockedAmount()
    {
        return $this->container['locked_amount'];
    }

    /**
     * Sets locked_amount
     *
     * @param string|null $locked_amount Funds in outgoing transactions that are not yet published to the network
     *
     * @return self
     */
    public function setLockedAmount($locked_amount)
    {
        if (is_null($locked_amount)) {
            throw new \InvalidArgumentException('non-nullable locked_amount cannot be null');
        }
        $this->container['locked_amount'] = $locked_amount;

        return $this;
    }

    /**
     * Gets staked
     *
     * @return string|null
     */
    public function getStaked()
    {
        return $this->container['staked'];
    }

    /**
     * Sets staked
     *
     * @param string|null $staked Staked balance
     *
     * @return self
     */
    public function setStaked($staked)
    {
        if (is_null($staked)) {
            throw new \InvalidArgumentException('non-nullable staked cannot be null');
        }
        $this->container['staked'] = $staked;

        return $this;
    }

    /**
     * Gets total_staked_cpu
     *
     * @return float|null
     */
    public function getTotalStakedCpu()
    {
        return $this->container['total_staked_cpu'];
    }

    /**
     * Sets total_staked_cpu
     *
     * @param float|null $total_staked_cpu Deprecated
     *
     * @return self
     */
    public function setTotalStakedCpu($total_staked_cpu)
    {
        if (is_null($total_staked_cpu)) {
            throw new \InvalidArgumentException('non-nullable total_staked_cpu cannot be null');
        }
        $this->container['total_staked_cpu'] = $total_staked_cpu;

        return $this;
    }

    /**
     * Gets total_staked_network
     *
     * @return string|null
     */
    public function getTotalStakedNetwork()
    {
        return $this->container['total_staked_network'];
    }

    /**
     * Sets total_staked_network
     *
     * @param string|null $total_staked_network Deprecated
     *
     * @return self
     */
    public function setTotalStakedNetwork($total_staked_network)
    {
        if (is_null($total_staked_network)) {
            throw new \InvalidArgumentException('non-nullable total_staked_network cannot be null');
        }
        $this->container['total_staked_network'] = $total_staked_network;

        return $this;
    }

    /**
     * Gets self_staked_cpu
     *
     * @return string|null
     */
    public function getSelfStakedCpu()
    {
        return $this->container['self_staked_cpu'];
    }

    /**
     * Sets self_staked_cpu
     *
     * @param string|null $self_staked_cpu Deprecated
     *
     * @return self
     */
    public function setSelfStakedCpu($self_staked_cpu)
    {
        if (is_null($self_staked_cpu)) {
            throw new \InvalidArgumentException('non-nullable self_staked_cpu cannot be null');
        }
        $this->container['self_staked_cpu'] = $self_staked_cpu;

        return $this;
    }

    /**
     * Gets self_staked_network
     *
     * @return string|null
     */
    public function getSelfStakedNetwork()
    {
        return $this->container['self_staked_network'];
    }

    /**
     * Sets self_staked_network
     *
     * @param string|null $self_staked_network Deprecated
     *
     * @return self
     */
    public function setSelfStakedNetwork($self_staked_network)
    {
        if (is_null($self_staked_network)) {
            throw new \InvalidArgumentException('non-nullable self_staked_network cannot be null');
        }
        $this->container['self_staked_network'] = $self_staked_network;

        return $this;
    }

    /**
     * Gets pending_refund_cpu
     *
     * @return string|null
     */
    public function getPendingRefundCpu()
    {
        return $this->container['pending_refund_cpu'];
    }

    /**
     * Sets pending_refund_cpu
     *
     * @param string|null $pending_refund_cpu Deprecated
     *
     * @return self
     */
    public function setPendingRefundCpu($pending_refund_cpu)
    {
        if (is_null($pending_refund_cpu)) {
            throw new \InvalidArgumentException('non-nullable pending_refund_cpu cannot be null');
        }
        $this->container['pending_refund_cpu'] = $pending_refund_cpu;

        return $this;
    }

    /**
     * Gets pending_refund_network
     *
     * @return string|null
     */
    public function getPendingRefundNetwork()
    {
        return $this->container['pending_refund_network'];
    }

    /**
     * Sets pending_refund_network
     *
     * @param string|null $pending_refund_network Deprecated
     *
     * @return self
     */
    public function setPendingRefundNetwork($pending_refund_network)
    {
        if (is_null($pending_refund_network)) {
            throw new \InvalidArgumentException('non-nullable pending_refund_network cannot be null');
        }
        $this->container['pending_refund_network'] = $pending_refund_network;

        return $this;
    }

    /**
     * Gets block_height
     *
     * @return string|null
     */
    public function getBlockHeight()
    {
        return $this->container['block_height'];
    }

    /**
     * Sets block_height
     *
     * @param string|null $block_height block_height
     *
     * @return self
     */
    public function setBlockHeight($block_height)
    {
        if (is_null($block_height)) {
            throw new \InvalidArgumentException('non-nullable block_height cannot be null');
        }
        $this->container['block_height'] = $block_height;

        return $this;
    }

    /**
     * Gets block_hash
     *
     * @return string|null
     */
    public function getBlockHash()
    {
        return $this->container['block_hash'];
    }

    /**
     * Sets block_hash
     *
     * @param string|null $block_hash block_hash
     *
     * @return self
     */
    public function setBlockHash($block_hash)
    {
        if (is_null($block_hash)) {
            throw new \InvalidArgumentException('non-nullable block_hash cannot be null');
        }
        $this->container['block_hash'] = $block_hash;

        return $this;
    }

    /**
     * Gets rewards_info
     *
     * @return \DeveloperayoFireblocksLaravel\Model\RewardsInfo|null
     */
    public function getRewardsInfo()
    {
        return $this->container['rewards_info'];
    }

    /**
     * Sets rewards_info
     *
     * @param \DeveloperayoFireblocksLaravel\Model\RewardsInfo|null $rewards_info rewards_info
     *
     * @return self
     */
    public function setRewardsInfo($rewards_info)
    {
        if (is_null($rewards_info)) {
            throw new \InvalidArgumentException('non-nullable rewards_info cannot be null');
        }
        $this->container['rewards_info'] = $rewards_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


