<?php
/**
 * NetworkRecord
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * NetworkRecord Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NetworkRecord implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NetworkRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'source' => '\DeveloperayoFireblocksLaravel\Model\SourceTransferPeerPathResponse',
        'destination' => '\DeveloperayoFireblocksLaravel\Model\DestinationTransferPeerPathResponse',
        'tx_hash' => 'string',
        'network_fee' => 'string',
        'asset_id' => 'string',
        'net_amount' => 'string',
        'is_dropped' => 'bool',
        'type' => 'string',
        'destination_address' => 'string',
        'source_address' => 'string',
        'amount_usd' => 'string',
        'index' => 'float',
        'reward_info' => '\DeveloperayoFireblocksLaravel\Model\RewardInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'source' => null,
        'destination' => null,
        'tx_hash' => null,
        'network_fee' => null,
        'asset_id' => null,
        'net_amount' => null,
        'is_dropped' => null,
        'type' => null,
        'destination_address' => null,
        'source_address' => null,
        'amount_usd' => null,
        'index' => null,
        'reward_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'source' => false,
        'destination' => false,
        'tx_hash' => false,
        'network_fee' => false,
        'asset_id' => false,
        'net_amount' => false,
        'is_dropped' => false,
        'type' => false,
        'destination_address' => false,
        'source_address' => false,
        'amount_usd' => false,
        'index' => false,
        'reward_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'source' => 'source',
        'destination' => 'destination',
        'tx_hash' => 'txHash',
        'network_fee' => 'networkFee',
        'asset_id' => 'assetId',
        'net_amount' => 'netAmount',
        'is_dropped' => 'isDropped',
        'type' => 'type',
        'destination_address' => 'destinationAddress',
        'source_address' => 'sourceAddress',
        'amount_usd' => 'amountUSD',
        'index' => 'index',
        'reward_info' => 'rewardInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'source' => 'setSource',
        'destination' => 'setDestination',
        'tx_hash' => 'setTxHash',
        'network_fee' => 'setNetworkFee',
        'asset_id' => 'setAssetId',
        'net_amount' => 'setNetAmount',
        'is_dropped' => 'setIsDropped',
        'type' => 'setType',
        'destination_address' => 'setDestinationAddress',
        'source_address' => 'setSourceAddress',
        'amount_usd' => 'setAmountUsd',
        'index' => 'setIndex',
        'reward_info' => 'setRewardInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'source' => 'getSource',
        'destination' => 'getDestination',
        'tx_hash' => 'getTxHash',
        'network_fee' => 'getNetworkFee',
        'asset_id' => 'getAssetId',
        'net_amount' => 'getNetAmount',
        'is_dropped' => 'getIsDropped',
        'type' => 'getType',
        'destination_address' => 'getDestinationAddress',
        'source_address' => 'getSourceAddress',
        'amount_usd' => 'getAmountUsd',
        'index' => 'getIndex',
        'reward_info' => 'getRewardInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('tx_hash', $data ?? [], null);
        $this->setIfExists('network_fee', $data ?? [], null);
        $this->setIfExists('asset_id', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('is_dropped', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('destination_address', $data ?? [], null);
        $this->setIfExists('source_address', $data ?? [], null);
        $this->setIfExists('amount_usd', $data ?? [], null);
        $this->setIfExists('index', $data ?? [], null);
        $this->setIfExists('reward_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets source
     *
     * @return \DeveloperayoFireblocksLaravel\Model\SourceTransferPeerPathResponse|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \DeveloperayoFireblocksLaravel\Model\SourceTransferPeerPathResponse|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \DeveloperayoFireblocksLaravel\Model\DestinationTransferPeerPathResponse|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \DeveloperayoFireblocksLaravel\Model\DestinationTransferPeerPathResponse|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets tx_hash
     *
     * @return string|null
     */
    public function getTxHash()
    {
        return $this->container['tx_hash'];
    }

    /**
     * Sets tx_hash
     *
     * @param string|null $tx_hash tx_hash
     *
     * @return self
     */
    public function setTxHash($tx_hash)
    {
        if (is_null($tx_hash)) {
            throw new \InvalidArgumentException('non-nullable tx_hash cannot be null');
        }
        $this->container['tx_hash'] = $tx_hash;

        return $this;
    }

    /**
     * Gets network_fee
     *
     * @return string|null
     */
    public function getNetworkFee()
    {
        return $this->container['network_fee'];
    }

    /**
     * Sets network_fee
     *
     * @param string|null $network_fee network_fee
     *
     * @return self
     */
    public function setNetworkFee($network_fee)
    {
        if (is_null($network_fee)) {
            throw new \InvalidArgumentException('non-nullable network_fee cannot be null');
        }
        $this->container['network_fee'] = $network_fee;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string|null
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string|null $asset_id asset_id
     *
     * @return self
     */
    public function setAssetId($asset_id)
    {
        if (is_null($asset_id)) {
            throw new \InvalidArgumentException('non-nullable asset_id cannot be null');
        }
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return string|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param string|null $net_amount The net amount of the transaction, after fee deduction
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets is_dropped
     *
     * @return bool|null
     */
    public function getIsDropped()
    {
        return $this->container['is_dropped'];
    }

    /**
     * Sets is_dropped
     *
     * @param bool|null $is_dropped is_dropped
     *
     * @return self
     */
    public function setIsDropped($is_dropped)
    {
        if (is_null($is_dropped)) {
            throw new \InvalidArgumentException('non-nullable is_dropped cannot be null');
        }
        $this->container['is_dropped'] = $is_dropped;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets destination_address
     *
     * @return string|null
     */
    public function getDestinationAddress()
    {
        return $this->container['destination_address'];
    }

    /**
     * Sets destination_address
     *
     * @param string|null $destination_address destination_address
     *
     * @return self
     */
    public function setDestinationAddress($destination_address)
    {
        if (is_null($destination_address)) {
            throw new \InvalidArgumentException('non-nullable destination_address cannot be null');
        }
        $this->container['destination_address'] = $destination_address;

        return $this;
    }

    /**
     * Gets source_address
     *
     * @return string|null
     */
    public function getSourceAddress()
    {
        return $this->container['source_address'];
    }

    /**
     * Sets source_address
     *
     * @param string|null $source_address source_address
     *
     * @return self
     */
    public function setSourceAddress($source_address)
    {
        if (is_null($source_address)) {
            throw new \InvalidArgumentException('non-nullable source_address cannot be null');
        }
        $this->container['source_address'] = $source_address;

        return $this;
    }

    /**
     * Gets amount_usd
     *
     * @return string|null
     */
    public function getAmountUsd()
    {
        return $this->container['amount_usd'];
    }

    /**
     * Sets amount_usd
     *
     * @param string|null $amount_usd amount_usd
     *
     * @return self
     */
    public function setAmountUsd($amount_usd)
    {
        if (is_null($amount_usd)) {
            throw new \InvalidArgumentException('non-nullable amount_usd cannot be null');
        }
        $this->container['amount_usd'] = $amount_usd;

        return $this;
    }

    /**
     * Gets index
     *
     * @return float|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param float|null $index index
     *
     * @return self
     */
    public function setIndex($index)
    {
        if (is_null($index)) {
            throw new \InvalidArgumentException('non-nullable index cannot be null');
        }
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets reward_info
     *
     * @return \DeveloperayoFireblocksLaravel\Model\RewardInfo|null
     */
    public function getRewardInfo()
    {
        return $this->container['reward_info'];
    }

    /**
     * Sets reward_info
     *
     * @param \DeveloperayoFireblocksLaravel\Model\RewardInfo|null $reward_info reward_info
     *
     * @return self
     */
    public function setRewardInfo($reward_info)
    {
        if (is_null($reward_info)) {
            throw new \InvalidArgumentException('non-nullable reward_info cannot be null');
        }
        $this->container['reward_info'] = $reward_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


