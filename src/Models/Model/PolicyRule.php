<?php
/**
 * PolicyRule
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * PolicyRule Class Doc Comment
 *
 * @category Class
 * @description Policy rule which is enforced on transactions
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PolicyRule implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PolicyRule';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'operator' => 'string',
        'operators' => '\DeveloperayoFireblocksLaravel\Model\PolicyRuleOperators',
        'transaction_type' => 'string',
        'designated_signer' => 'string',
        'designated_signers' => '\DeveloperayoFireblocksLaravel\Model\PolicyRuleDesignatedSigners',
        'type' => 'string',
        'action' => 'string',
        'asset' => 'string',
        'src_type' => '\DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestType',
        'src_sub_type' => '\DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestSubType',
        'src_id' => 'string',
        'src' => '\DeveloperayoFireblocksLaravel\Model\PolicyRuleSrc',
        'dst_type' => '\DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestType',
        'dst_sub_type' => '\DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestSubType',
        'dst_id' => 'string',
        'dst' => '\DeveloperayoFireblocksLaravel\Model\PolicyRuleDst',
        'dst_address_type' => 'string',
        'amount_currency' => 'string',
        'amount_scope' => 'string',
        'amount' => '\DeveloperayoFireblocksLaravel\Model\PolicyRuleAmount',
        'period_sec' => 'float',
        'authorizers' => 'string[]',
        'authorizers_count' => 'float',
        'authorization_groups' => '\DeveloperayoFireblocksLaravel\Model\PolicyRuleAuthorizationGroups',
        'amount_aggregation' => '\DeveloperayoFireblocksLaravel\Model\PolicyRuleAmountAggregation',
        'raw_message_signing' => '\DeveloperayoFireblocksLaravel\Model\PolicyRuleRawMessageSigning',
        'apply_for_approve' => 'bool',
        'apply_for_typed_message' => 'bool',
        'external_descriptor' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'operator' => null,
        'operators' => null,
        'transaction_type' => null,
        'designated_signer' => null,
        'designated_signers' => null,
        'type' => null,
        'action' => null,
        'asset' => null,
        'src_type' => null,
        'src_sub_type' => null,
        'src_id' => null,
        'src' => null,
        'dst_type' => null,
        'dst_sub_type' => null,
        'dst_id' => null,
        'dst' => null,
        'dst_address_type' => null,
        'amount_currency' => null,
        'amount_scope' => null,
        'amount' => null,
        'period_sec' => null,
        'authorizers' => null,
        'authorizers_count' => null,
        'authorization_groups' => null,
        'amount_aggregation' => null,
        'raw_message_signing' => null,
        'apply_for_approve' => null,
        'apply_for_typed_message' => null,
        'external_descriptor' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'operator' => false,
        'operators' => false,
        'transaction_type' => false,
        'designated_signer' => false,
        'designated_signers' => false,
        'type' => false,
        'action' => false,
        'asset' => false,
        'src_type' => false,
        'src_sub_type' => false,
        'src_id' => false,
        'src' => false,
        'dst_type' => false,
        'dst_sub_type' => false,
        'dst_id' => false,
        'dst' => false,
        'dst_address_type' => false,
        'amount_currency' => false,
        'amount_scope' => false,
        'amount' => false,
        'period_sec' => false,
        'authorizers' => false,
        'authorizers_count' => false,
        'authorization_groups' => false,
        'amount_aggregation' => false,
        'raw_message_signing' => false,
        'apply_for_approve' => false,
        'apply_for_typed_message' => false,
        'external_descriptor' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operator' => 'operator',
        'operators' => 'operators',
        'transaction_type' => 'transactionType',
        'designated_signer' => 'designatedSigner',
        'designated_signers' => 'designatedSigners',
        'type' => 'type',
        'action' => 'action',
        'asset' => 'asset',
        'src_type' => 'srcType',
        'src_sub_type' => 'srcSubType',
        'src_id' => 'srcId',
        'src' => 'src',
        'dst_type' => 'dstType',
        'dst_sub_type' => 'dstSubType',
        'dst_id' => 'dstId',
        'dst' => 'dst',
        'dst_address_type' => 'dstAddressType',
        'amount_currency' => 'amountCurrency',
        'amount_scope' => 'amountScope',
        'amount' => 'amount',
        'period_sec' => 'periodSec',
        'authorizers' => 'authorizers',
        'authorizers_count' => 'authorizersCount',
        'authorization_groups' => 'authorizationGroups',
        'amount_aggregation' => 'amountAggregation',
        'raw_message_signing' => 'rawMessageSigning',
        'apply_for_approve' => 'applyForApprove',
        'apply_for_typed_message' => 'applyForTypedMessage',
        'external_descriptor' => 'externalDescriptor'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operator' => 'setOperator',
        'operators' => 'setOperators',
        'transaction_type' => 'setTransactionType',
        'designated_signer' => 'setDesignatedSigner',
        'designated_signers' => 'setDesignatedSigners',
        'type' => 'setType',
        'action' => 'setAction',
        'asset' => 'setAsset',
        'src_type' => 'setSrcType',
        'src_sub_type' => 'setSrcSubType',
        'src_id' => 'setSrcId',
        'src' => 'setSrc',
        'dst_type' => 'setDstType',
        'dst_sub_type' => 'setDstSubType',
        'dst_id' => 'setDstId',
        'dst' => 'setDst',
        'dst_address_type' => 'setDstAddressType',
        'amount_currency' => 'setAmountCurrency',
        'amount_scope' => 'setAmountScope',
        'amount' => 'setAmount',
        'period_sec' => 'setPeriodSec',
        'authorizers' => 'setAuthorizers',
        'authorizers_count' => 'setAuthorizersCount',
        'authorization_groups' => 'setAuthorizationGroups',
        'amount_aggregation' => 'setAmountAggregation',
        'raw_message_signing' => 'setRawMessageSigning',
        'apply_for_approve' => 'setApplyForApprove',
        'apply_for_typed_message' => 'setApplyForTypedMessage',
        'external_descriptor' => 'setExternalDescriptor'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operator' => 'getOperator',
        'operators' => 'getOperators',
        'transaction_type' => 'getTransactionType',
        'designated_signer' => 'getDesignatedSigner',
        'designated_signers' => 'getDesignatedSigners',
        'type' => 'getType',
        'action' => 'getAction',
        'asset' => 'getAsset',
        'src_type' => 'getSrcType',
        'src_sub_type' => 'getSrcSubType',
        'src_id' => 'getSrcId',
        'src' => 'getSrc',
        'dst_type' => 'getDstType',
        'dst_sub_type' => 'getDstSubType',
        'dst_id' => 'getDstId',
        'dst' => 'getDst',
        'dst_address_type' => 'getDstAddressType',
        'amount_currency' => 'getAmountCurrency',
        'amount_scope' => 'getAmountScope',
        'amount' => 'getAmount',
        'period_sec' => 'getPeriodSec',
        'authorizers' => 'getAuthorizers',
        'authorizers_count' => 'getAuthorizersCount',
        'authorization_groups' => 'getAuthorizationGroups',
        'amount_aggregation' => 'getAmountAggregation',
        'raw_message_signing' => 'getRawMessageSigning',
        'apply_for_approve' => 'getApplyForApprove',
        'apply_for_typed_message' => 'getApplyForTypedMessage',
        'external_descriptor' => 'getExternalDescriptor'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TRANSACTION_TYPE_TRANSFER = 'TRANSFER';
    public const TRANSACTION_TYPE_CONTRACT_CALL = 'CONTRACT_CALL';
    public const TRANSACTION_TYPE_APPROVE = 'APPROVE';
    public const TRANSACTION_TYPE_MINT = 'MINT';
    public const TRANSACTION_TYPE_BURN = 'BURN';
    public const TRANSACTION_TYPE_SUPPLY = 'SUPPLY';
    public const TRANSACTION_TYPE_REDEEM = 'REDEEM';
    public const TRANSACTION_TYPE_STAKE = 'STAKE';
    public const TRANSACTION_TYPE_RAW = 'RAW';
    public const TRANSACTION_TYPE_TYPED_MESSAGE = 'TYPED_MESSAGE';
    public const TYPE_TRANSFER = 'TRANSFER';
    public const ACTION_ALLOW = 'ALLOW';
    public const ACTION_BLOCK = 'BLOCK';
    public const ACTION__2_TIER = '2-TIER';
    public const DST_ADDRESS_TYPE_WHITELISTED = 'WHITELISTED';
    public const DST_ADDRESS_TYPE_ONE_TIME = 'ONE_TIME';
    public const DST_ADDRESS_TYPE_STAR = '*';
    public const AMOUNT_CURRENCY_USD = 'USD';
    public const AMOUNT_CURRENCY_EUR = 'EUR';
    public const AMOUNT_CURRENCY_NATIVE = 'NATIVE';
    public const AMOUNT_SCOPE_SINGLE_TX = 'SINGLE_TX';
    public const AMOUNT_SCOPE_TIMEFRAME = 'TIMEFRAME';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionTypeAllowableValues()
    {
        return [
            self::TRANSACTION_TYPE_TRANSFER,
            self::TRANSACTION_TYPE_CONTRACT_CALL,
            self::TRANSACTION_TYPE_APPROVE,
            self::TRANSACTION_TYPE_MINT,
            self::TRANSACTION_TYPE_BURN,
            self::TRANSACTION_TYPE_SUPPLY,
            self::TRANSACTION_TYPE_REDEEM,
            self::TRANSACTION_TYPE_STAKE,
            self::TRANSACTION_TYPE_RAW,
            self::TRANSACTION_TYPE_TYPED_MESSAGE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TRANSFER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_ALLOW,
            self::ACTION_BLOCK,
            self::ACTION__2_TIER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDstAddressTypeAllowableValues()
    {
        return [
            self::DST_ADDRESS_TYPE_WHITELISTED,
            self::DST_ADDRESS_TYPE_ONE_TIME,
            self::DST_ADDRESS_TYPE_STAR,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAmountCurrencyAllowableValues()
    {
        return [
            self::AMOUNT_CURRENCY_USD,
            self::AMOUNT_CURRENCY_EUR,
            self::AMOUNT_CURRENCY_NATIVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAmountScopeAllowableValues()
    {
        return [
            self::AMOUNT_SCOPE_SINGLE_TX,
            self::AMOUNT_SCOPE_TIMEFRAME,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('operator', $data ?? [], null);
        $this->setIfExists('operators', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('designated_signer', $data ?? [], null);
        $this->setIfExists('designated_signers', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('src_type', $data ?? [], null);
        $this->setIfExists('src_sub_type', $data ?? [], null);
        $this->setIfExists('src_id', $data ?? [], null);
        $this->setIfExists('src', $data ?? [], null);
        $this->setIfExists('dst_type', $data ?? [], null);
        $this->setIfExists('dst_sub_type', $data ?? [], null);
        $this->setIfExists('dst_id', $data ?? [], null);
        $this->setIfExists('dst', $data ?? [], null);
        $this->setIfExists('dst_address_type', $data ?? [], null);
        $this->setIfExists('amount_currency', $data ?? [], null);
        $this->setIfExists('amount_scope', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('period_sec', $data ?? [], null);
        $this->setIfExists('authorizers', $data ?? [], null);
        $this->setIfExists('authorizers_count', $data ?? [], null);
        $this->setIfExists('authorization_groups', $data ?? [], null);
        $this->setIfExists('amount_aggregation', $data ?? [], null);
        $this->setIfExists('raw_message_signing', $data ?? [], null);
        $this->setIfExists('apply_for_approve', $data ?? [], null);
        $this->setIfExists('apply_for_typed_message', $data ?? [], null);
        $this->setIfExists('external_descriptor', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!is_null($this->container['transaction_type']) && !in_array($this->container['transaction_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'transaction_type', must be one of '%s'",
                $this->container['transaction_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'action', must be one of '%s'",
                $this->container['action'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        $allowedValues = $this->getDstAddressTypeAllowableValues();
        if (!is_null($this->container['dst_address_type']) && !in_array($this->container['dst_address_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'dst_address_type', must be one of '%s'",
                $this->container['dst_address_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount_currency'] === null) {
            $invalidProperties[] = "'amount_currency' can't be null";
        }
        $allowedValues = $this->getAmountCurrencyAllowableValues();
        if (!is_null($this->container['amount_currency']) && !in_array($this->container['amount_currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'amount_currency', must be one of '%s'",
                $this->container['amount_currency'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount_scope'] === null) {
            $invalidProperties[] = "'amount_scope' can't be null";
        }
        $allowedValues = $this->getAmountScopeAllowableValues();
        if (!is_null($this->container['amount_scope']) && !in_array($this->container['amount_scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'amount_scope', must be one of '%s'",
                $this->container['amount_scope'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['period_sec'] === null) {
            $invalidProperties[] = "'period_sec' can't be null";
        }
        if ($this->container['external_descriptor'] === null) {
            $invalidProperties[] = "'external_descriptor' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operator
     *
     * @return string|null
     * @deprecated
     */
    public function getOperator()
    {
        return $this->container['operator'];
    }

    /**
     * Sets operator
     *
     * @param string|null $operator (deprecated - replaced by \"operators\")  | Defines users who can initiate the type of transaction to which the rule applies. options are * \"*\" - All users are allowed * Specific User id
     *
     * @return self
     * @deprecated
     */
    public function setOperator($operator)
    {
        if (is_null($operator)) {
            throw new \InvalidArgumentException('non-nullable operator cannot be null');
        }
        $this->container['operator'] = $operator;

        return $this;
    }

    /**
     * Gets operators
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicyRuleOperators|null
     */
    public function getOperators()
    {
        return $this->container['operators'];
    }

    /**
     * Sets operators
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicyRuleOperators|null $operators operators
     *
     * @return self
     */
    public function setOperators($operators)
    {
        if (is_null($operators)) {
            throw new \InvalidArgumentException('non-nullable operators cannot be null');
        }
        $this->container['operators'] = $operators;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type Defines the type of transaction to which the rule applies.   * TRANSFER - Default. Transfers funds from one account to another   * CONTRACT_CALL - Calls a smart contract, mainly for DeFi operations.   * APPROVE - Allows a smart contract to withdraw from a designated wallet.   * MINT - Perform a mint operation (increase supply) on a supported token   * BURN - Perform a burn operation (reduce supply) on a supported token   * SUPPLY - Use for DeFi to lend assets   * REDEEM - Use for DeFi to get lending back   * STAKE - Allows you to allocate and lock certain assets for earning staking rewards.   * RAW - An off-chain message with no predefined format, use it to sign any message with your private key.   * TYPED_MESSAGE - An off-chain message type that follows a predefined format, used to sign specific messages that are not actual transactions.
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        $allowedValues = $this->getTransactionTypeAllowableValues();
        if (!in_array($transaction_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'transaction_type', must be one of '%s'",
                    $transaction_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets designated_signer
     *
     * @return string|null
     * @deprecated
     */
    public function getDesignatedSigner()
    {
        return $this->container['designated_signer'];
    }

    /**
     * Sets designated_signer
     *
     * @param string|null $designated_signer (deprecated - replaced by \"designatedSigners\") Id representing the user who signs transactions that match a specific rule
     *
     * @return self
     * @deprecated
     */
    public function setDesignatedSigner($designated_signer)
    {
        if (is_null($designated_signer)) {
            throw new \InvalidArgumentException('non-nullable designated_signer cannot be null');
        }
        $this->container['designated_signer'] = $designated_signer;

        return $this;
    }

    /**
     * Gets designated_signers
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicyRuleDesignatedSigners|null
     */
    public function getDesignatedSigners()
    {
        return $this->container['designated_signers'];
    }

    /**
     * Sets designated_signers
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicyRuleDesignatedSigners|null $designated_signers designated_signers
     *
     * @return self
     */
    public function setDesignatedSigners($designated_signers)
    {
        if (is_null($designated_signers)) {
            throw new \InvalidArgumentException('non-nullable designated_signers cannot be null');
        }
        $this->container['designated_signers'] = $designated_signers;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Policy rule type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action Defines what occurs when a transaction meets the rule's criteria * ALLOW - The transaction goes through and can be signed without requiring additional approvals * BLOCK - The transaction is automatically blocked * 2-TIER - Only these users or user groups can approve             If any of them reject the transaction before the required approval threshold is met, the transaction doesn't go through            The list of entities are set is \"authorizationGroups\" field
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }
        $allowedValues = $this->getActionAllowableValues();
        if (!in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'action', must be one of '%s'",
                    $action,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string $asset Defines the type of asset being transacted, options are * \"*\" - All assets * Specific asset
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets src_type
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestType|null
     * @deprecated
     */
    public function getSrcType()
    {
        return $this->container['src_type'];
    }

    /**
     * Sets src_type
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestType|null $src_type (deprecated - replaced by \"src\") source account type
     *
     * @return self
     * @deprecated
     */
    public function setSrcType($src_type)
    {
        if (is_null($src_type)) {
            throw new \InvalidArgumentException('non-nullable src_type cannot be null');
        }
        $this->container['src_type'] = $src_type;

        return $this;
    }

    /**
     * Gets src_sub_type
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestSubType|null
     * @deprecated
     */
    public function getSrcSubType()
    {
        return $this->container['src_sub_type'];
    }

    /**
     * Sets src_sub_type
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestSubType|null $src_sub_type (deprecated - replaced by \"src\") source sub account type
     *
     * @return self
     * @deprecated
     */
    public function setSrcSubType($src_sub_type)
    {
        if (is_null($src_sub_type)) {
            throw new \InvalidArgumentException('non-nullable src_sub_type cannot be null');
        }
        $this->container['src_sub_type'] = $src_sub_type;

        return $this;
    }

    /**
     * Gets src_id
     *
     * @return string|null
     * @deprecated
     */
    public function getSrcId()
    {
        return $this->container['src_id'];
    }

    /**
     * Sets src_id
     *
     * @param string|null $src_id (deprecated - replaced by \"src\") source account id
     *
     * @return self
     * @deprecated
     */
    public function setSrcId($src_id)
    {
        if (is_null($src_id)) {
            throw new \InvalidArgumentException('non-nullable src_id cannot be null');
        }
        $this->container['src_id'] = $src_id;

        return $this;
    }

    /**
     * Gets src
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicyRuleSrc|null
     */
    public function getSrc()
    {
        return $this->container['src'];
    }

    /**
     * Sets src
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicyRuleSrc|null $src src
     *
     * @return self
     */
    public function setSrc($src)
    {
        if (is_null($src)) {
            throw new \InvalidArgumentException('non-nullable src cannot be null');
        }
        $this->container['src'] = $src;

        return $this;
    }

    /**
     * Gets dst_type
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestType|null
     * @deprecated
     */
    public function getDstType()
    {
        return $this->container['dst_type'];
    }

    /**
     * Sets dst_type
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestType|null $dst_type (deprecated - replaced by \"dst\") destination account type
     *
     * @return self
     * @deprecated
     */
    public function setDstType($dst_type)
    {
        if (is_null($dst_type)) {
            throw new \InvalidArgumentException('non-nullable dst_type cannot be null');
        }
        $this->container['dst_type'] = $dst_type;

        return $this;
    }

    /**
     * Gets dst_sub_type
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestSubType|null
     * @deprecated
     */
    public function getDstSubType()
    {
        return $this->container['dst_sub_type'];
    }

    /**
     * Sets dst_sub_type
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicySrcOrDestSubType|null $dst_sub_type (deprecated - replaced by \"dst\") destination sub account type
     *
     * @return self
     * @deprecated
     */
    public function setDstSubType($dst_sub_type)
    {
        if (is_null($dst_sub_type)) {
            throw new \InvalidArgumentException('non-nullable dst_sub_type cannot be null');
        }
        $this->container['dst_sub_type'] = $dst_sub_type;

        return $this;
    }

    /**
     * Gets dst_id
     *
     * @return string|null
     * @deprecated
     */
    public function getDstId()
    {
        return $this->container['dst_id'];
    }

    /**
     * Sets dst_id
     *
     * @param string|null $dst_id (deprecated - replaced by \"dst\") destination account id
     *
     * @return self
     * @deprecated
     */
    public function setDstId($dst_id)
    {
        if (is_null($dst_id)) {
            throw new \InvalidArgumentException('non-nullable dst_id cannot be null');
        }
        $this->container['dst_id'] = $dst_id;

        return $this;
    }

    /**
     * Gets dst
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicyRuleDst|null
     */
    public function getDst()
    {
        return $this->container['dst'];
    }

    /**
     * Sets dst
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicyRuleDst|null $dst dst
     *
     * @return self
     */
    public function setDst($dst)
    {
        if (is_null($dst)) {
            throw new \InvalidArgumentException('non-nullable dst cannot be null');
        }
        $this->container['dst'] = $dst;

        return $this;
    }

    /**
     * Gets dst_address_type
     *
     * @return string|null
     */
    public function getDstAddressType()
    {
        return $this->container['dst_address_type'];
    }

    /**
     * Sets dst_address_type
     *
     * @param string|null $dst_address_type Defines whether the destination to which you are sending funds must be whitelisted, to allow one-time transfers to non-whitelisted external addresses, or both. By default, you can only transfer to an external address after it’s whitelisted.   * WHITELISTED - Can only be sent to whitelisted addresses.   * ONE_TIME - Can only be sent to non-whitelisted external addresses.   * \"*\" - can be sent to whitelisted addresses or non-whitelisted external
     *
     * @return self
     */
    public function setDstAddressType($dst_address_type)
    {
        if (is_null($dst_address_type)) {
            throw new \InvalidArgumentException('non-nullable dst_address_type cannot be null');
        }
        $allowedValues = $this->getDstAddressTypeAllowableValues();
        if (!in_array($dst_address_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'dst_address_type', must be one of '%s'",
                    $dst_address_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['dst_address_type'] = $dst_address_type;

        return $this;
    }

    /**
     * Gets amount_currency
     *
     * @return string
     */
    public function getAmountCurrency()
    {
        return $this->container['amount_currency'];
    }

    /**
     * Sets amount_currency
     *
     * @param string $amount_currency * USD - Limits the amount of any asset users can transfer based on the USD equivalent of the asset. * EUR - Limits the amount of any asset users can transfer based on the EURO equivalent of the asset. * NATIVE - Limits the amount of an asset a user can transfer when using a specific asset.
     *
     * @return self
     */
    public function setAmountCurrency($amount_currency)
    {
        if (is_null($amount_currency)) {
            throw new \InvalidArgumentException('non-nullable amount_currency cannot be null');
        }
        $allowedValues = $this->getAmountCurrencyAllowableValues();
        if (!in_array($amount_currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'amount_currency', must be one of '%s'",
                    $amount_currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['amount_currency'] = $amount_currency;

        return $this;
    }

    /**
     * Gets amount_scope
     *
     * @return string
     */
    public function getAmountScope()
    {
        return $this->container['amount_scope'];
    }

    /**
     * Sets amount_scope
     *
     * @param string $amount_scope * SINGLE_TX - limit applies to a single transaction * TIMEFRAME - limit applies to all transactions within the defined time period
     *
     * @return self
     */
    public function setAmountScope($amount_scope)
    {
        if (is_null($amount_scope)) {
            throw new \InvalidArgumentException('non-nullable amount_scope cannot be null');
        }
        $allowedValues = $this->getAmountScopeAllowableValues();
        if (!in_array($amount_scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'amount_scope', must be one of '%s'",
                    $amount_scope,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['amount_scope'] = $amount_scope;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicyRuleAmount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicyRuleAmount $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets period_sec
     *
     * @return float
     */
    public function getPeriodSec()
    {
        return $this->container['period_sec'];
    }

    /**
     * Sets period_sec
     *
     * @param float $period_sec Time period in seconds applied by the amountScope field to accumulate transferred amounts in transactions that match the rule, until the total exceeds the value you specify under Minimum. When the specified amount is reached within that period, whether by one or many transactions, further transactions in that period either fail or require more approvals.
     *
     * @return self
     */
    public function setPeriodSec($period_sec)
    {
        if (is_null($period_sec)) {
            throw new \InvalidArgumentException('non-nullable period_sec cannot be null');
        }
        $this->container['period_sec'] = $period_sec;

        return $this;
    }

    /**
     * Gets authorizers
     *
     * @return string[]|null
     * @deprecated
     */
    public function getAuthorizers()
    {
        return $this->container['authorizers'];
    }

    /**
     * Sets authorizers
     *
     * @param string[]|null $authorizers (deprecated - replaced by \"authorizationGroups\") Allowed entities which can approves a transaction
     *
     * @return self
     * @deprecated
     */
    public function setAuthorizers($authorizers)
    {
        if (is_null($authorizers)) {
            throw new \InvalidArgumentException('non-nullable authorizers cannot be null');
        }
        $this->container['authorizers'] = $authorizers;

        return $this;
    }

    /**
     * Gets authorizers_count
     *
     * @return float|null
     * @deprecated
     */
    public function getAuthorizersCount()
    {
        return $this->container['authorizers_count'];
    }

    /**
     * Sets authorizers_count
     *
     * @param float|null $authorizers_count (deprecated - replaced by \"authorizationGroups\") Min amount of entities which are needed to approve a transaction
     *
     * @return self
     * @deprecated
     */
    public function setAuthorizersCount($authorizers_count)
    {
        if (is_null($authorizers_count)) {
            throw new \InvalidArgumentException('non-nullable authorizers_count cannot be null');
        }
        $this->container['authorizers_count'] = $authorizers_count;

        return $this;
    }

    /**
     * Gets authorization_groups
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicyRuleAuthorizationGroups|null
     */
    public function getAuthorizationGroups()
    {
        return $this->container['authorization_groups'];
    }

    /**
     * Sets authorization_groups
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicyRuleAuthorizationGroups|null $authorization_groups authorization_groups
     *
     * @return self
     */
    public function setAuthorizationGroups($authorization_groups)
    {
        if (is_null($authorization_groups)) {
            throw new \InvalidArgumentException('non-nullable authorization_groups cannot be null');
        }
        $this->container['authorization_groups'] = $authorization_groups;

        return $this;
    }

    /**
     * Gets amount_aggregation
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicyRuleAmountAggregation|null
     */
    public function getAmountAggregation()
    {
        return $this->container['amount_aggregation'];
    }

    /**
     * Sets amount_aggregation
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicyRuleAmountAggregation|null $amount_aggregation amount_aggregation
     *
     * @return self
     */
    public function setAmountAggregation($amount_aggregation)
    {
        if (is_null($amount_aggregation)) {
            throw new \InvalidArgumentException('non-nullable amount_aggregation cannot be null');
        }
        $this->container['amount_aggregation'] = $amount_aggregation;

        return $this;
    }

    /**
     * Gets raw_message_signing
     *
     * @return \DeveloperayoFireblocksLaravel\Model\PolicyRuleRawMessageSigning|null
     */
    public function getRawMessageSigning()
    {
        return $this->container['raw_message_signing'];
    }

    /**
     * Sets raw_message_signing
     *
     * @param \DeveloperayoFireblocksLaravel\Model\PolicyRuleRawMessageSigning|null $raw_message_signing raw_message_signing
     *
     * @return self
     */
    public function setRawMessageSigning($raw_message_signing)
    {
        if (is_null($raw_message_signing)) {
            throw new \InvalidArgumentException('non-nullable raw_message_signing cannot be null');
        }
        $this->container['raw_message_signing'] = $raw_message_signing;

        return $this;
    }

    /**
     * Gets apply_for_approve
     *
     * @return bool|null
     */
    public function getApplyForApprove()
    {
        return $this->container['apply_for_approve'];
    }

    /**
     * Sets apply_for_approve
     *
     * @param bool|null $apply_for_approve Applying this rule over APPROVE type transactions (can only be enabled when rule's transaction type is TRANSFER)
     *
     * @return self
     */
    public function setApplyForApprove($apply_for_approve)
    {
        if (is_null($apply_for_approve)) {
            throw new \InvalidArgumentException('non-nullable apply_for_approve cannot be null');
        }
        $this->container['apply_for_approve'] = $apply_for_approve;

        return $this;
    }

    /**
     * Gets apply_for_typed_message
     *
     * @return bool|null
     */
    public function getApplyForTypedMessage()
    {
        return $this->container['apply_for_typed_message'];
    }

    /**
     * Sets apply_for_typed_message
     *
     * @param bool|null $apply_for_typed_message Applying this rule over TYPED_MESSAGE type transactions (can only be enabled when rule's transaction type is CONTRACT_CALL)
     *
     * @return self
     */
    public function setApplyForTypedMessage($apply_for_typed_message)
    {
        if (is_null($apply_for_typed_message)) {
            throw new \InvalidArgumentException('non-nullable apply_for_typed_message cannot be null');
        }
        $this->container['apply_for_typed_message'] = $apply_for_typed_message;

        return $this;
    }

    /**
     * Gets external_descriptor
     *
     * @return string
     */
    public function getExternalDescriptor()
    {
        return $this->container['external_descriptor'];
    }

    /**
     * Sets external_descriptor
     *
     * @param string $external_descriptor A unique id identifying the rule
     *
     * @return self
     */
    public function setExternalDescriptor($external_descriptor)
    {
        if (is_null($external_descriptor)) {
            throw new \InvalidArgumentException('non-nullable external_descriptor cannot be null');
        }
        $this->container['external_descriptor'] = $external_descriptor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


