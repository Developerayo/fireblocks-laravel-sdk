<?php
/**
 * SmartTransferTicketTermDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * SmartTransferTicketTermDto Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SmartTransferTicketTermDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SmartTransferTicketTermDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'ticket_id' => 'string',
        'asset' => 'string',
        'amount' => 'float',
        'from_network_id' => 'string',
        'from_network_id_name' => 'string',
        'to_network_id' => 'string',
        'to_network_id_name' => 'string',
        'tx_hash' => 'string',
        'fb_tx_id' => 'string',
        'tx_status' => 'string',
        'status' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'ticket_id' => null,
        'asset' => null,
        'amount' => null,
        'from_network_id' => null,
        'from_network_id_name' => null,
        'to_network_id' => null,
        'to_network_id_name' => null,
        'tx_hash' => null,
        'fb_tx_id' => null,
        'tx_status' => null,
        'status' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'ticket_id' => false,
        'asset' => false,
        'amount' => false,
        'from_network_id' => false,
        'from_network_id_name' => false,
        'to_network_id' => false,
        'to_network_id_name' => false,
        'tx_hash' => true,
        'fb_tx_id' => true,
        'tx_status' => true,
        'status' => false,
        'created_at' => false,
        'updated_at' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ticket_id' => 'ticketId',
        'asset' => 'asset',
        'amount' => 'amount',
        'from_network_id' => 'fromNetworkId',
        'from_network_id_name' => 'fromNetworkIdName',
        'to_network_id' => 'toNetworkId',
        'to_network_id_name' => 'toNetworkIdName',
        'tx_hash' => 'txHash',
        'fb_tx_id' => 'fbTxId',
        'tx_status' => 'txStatus',
        'status' => 'status',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ticket_id' => 'setTicketId',
        'asset' => 'setAsset',
        'amount' => 'setAmount',
        'from_network_id' => 'setFromNetworkId',
        'from_network_id_name' => 'setFromNetworkIdName',
        'to_network_id' => 'setToNetworkId',
        'to_network_id_name' => 'setToNetworkIdName',
        'tx_hash' => 'setTxHash',
        'fb_tx_id' => 'setFbTxId',
        'tx_status' => 'setTxStatus',
        'status' => 'setStatus',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ticket_id' => 'getTicketId',
        'asset' => 'getAsset',
        'amount' => 'getAmount',
        'from_network_id' => 'getFromNetworkId',
        'from_network_id_name' => 'getFromNetworkIdName',
        'to_network_id' => 'getToNetworkId',
        'to_network_id_name' => 'getToNetworkIdName',
        'tx_hash' => 'getTxHash',
        'fb_tx_id' => 'getFbTxId',
        'tx_status' => 'getTxStatus',
        'status' => 'getStatus',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TX_STATUS_QUEUED = 'queued';
    public const TX_STATUS_SUBMITTED = 'submitted';
    public const TX_STATUS_PENDING_SIGNATURE = 'pendingSignature';
    public const TX_STATUS_PENDING_AUTHORIZATION = 'pendingAuthorization';
    public const TX_STATUS_BROADCASTING = 'broadcasting';
    public const TX_STATUS_CONFIRMING = 'confirming';
    public const TX_STATUS_PENDING_AML_SCREENING = 'pendingAmlScreening';
    public const TX_STATUS_COMPLETED = 'completed';
    public const TX_STATUS_CANCELLED = 'cancelled';
    public const TX_STATUS_FAILED = 'failed';
    public const TX_STATUS_REJECTED = 'rejected';
    public const TX_STATUS_BLOCKED = 'blocked';
    public const TX_STATUS_THIRD_PARTY_PENDING_MANUAL_APPROVAL = 'thirdPartyPendingManualApproval';
    public const TX_STATUS_THIRD_PARTY_PENDING = 'thirdPartyPending';
    public const TX_STATUS_PARTIALLY_COMPLETED = 'partiallyCompleted';
    public const TX_STATUS_CANCELLING = 'cancelling';
    public const STATUS_CREATED = 'CREATED';
    public const STATUS_FUNDING = 'FUNDING';
    public const STATUS_FUNDING_FAILED = 'FUNDING_FAILED';
    public const STATUS_FUNDED = 'FUNDED';
    public const STATUS_REJECTED = 'REJECTED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTxStatusAllowableValues()
    {
        return [
            self::TX_STATUS_QUEUED,
            self::TX_STATUS_SUBMITTED,
            self::TX_STATUS_PENDING_SIGNATURE,
            self::TX_STATUS_PENDING_AUTHORIZATION,
            self::TX_STATUS_BROADCASTING,
            self::TX_STATUS_CONFIRMING,
            self::TX_STATUS_PENDING_AML_SCREENING,
            self::TX_STATUS_COMPLETED,
            self::TX_STATUS_CANCELLED,
            self::TX_STATUS_FAILED,
            self::TX_STATUS_REJECTED,
            self::TX_STATUS_BLOCKED,
            self::TX_STATUS_THIRD_PARTY_PENDING_MANUAL_APPROVAL,
            self::TX_STATUS_THIRD_PARTY_PENDING,
            self::TX_STATUS_PARTIALLY_COMPLETED,
            self::TX_STATUS_CANCELLING,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_FUNDING,
            self::STATUS_FUNDING_FAILED,
            self::STATUS_FUNDED,
            self::STATUS_REJECTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('ticket_id', $data ?? [], null);
        $this->setIfExists('asset', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('from_network_id', $data ?? [], null);
        $this->setIfExists('from_network_id_name', $data ?? [], null);
        $this->setIfExists('to_network_id', $data ?? [], null);
        $this->setIfExists('to_network_id_name', $data ?? [], null);
        $this->setIfExists('tx_hash', $data ?? [], null);
        $this->setIfExists('fb_tx_id', $data ?? [], null);
        $this->setIfExists('tx_status', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['ticket_id'] === null) {
            $invalidProperties[] = "'ticket_id' can't be null";
        }
        if ($this->container['asset'] === null) {
            $invalidProperties[] = "'asset' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['from_network_id'] === null) {
            $invalidProperties[] = "'from_network_id' can't be null";
        }
        if ($this->container['from_network_id_name'] === null) {
            $invalidProperties[] = "'from_network_id_name' can't be null";
        }
        if ($this->container['to_network_id'] === null) {
            $invalidProperties[] = "'to_network_id' can't be null";
        }
        if ($this->container['to_network_id_name'] === null) {
            $invalidProperties[] = "'to_network_id_name' can't be null";
        }
        if ($this->container['tx_hash'] === null) {
            $invalidProperties[] = "'tx_hash' can't be null";
        }
        if ($this->container['fb_tx_id'] === null) {
            $invalidProperties[] = "'fb_tx_id' can't be null";
        }
        if ($this->container['tx_status'] === null) {
            $invalidProperties[] = "'tx_status' can't be null";
        }
        $allowedValues = $this->getTxStatusAllowableValues();
        if (!is_null($this->container['tx_status']) && !in_array($this->container['tx_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'tx_status', must be one of '%s'",
                $this->container['tx_status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique id of Smart Transfer ticket term
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ticket_id
     *
     * @return string
     */
    public function getTicketId()
    {
        return $this->container['ticket_id'];
    }

    /**
     * Sets ticket_id
     *
     * @param string $ticket_id Unique id of Smart Transfer ticket
     *
     * @return self
     */
    public function setTicketId($ticket_id)
    {
        if (is_null($ticket_id)) {
            throw new \InvalidArgumentException('non-nullable ticket_id cannot be null');
        }
        $this->container['ticket_id'] = $ticket_id;

        return $this;
    }

    /**
     * Gets asset
     *
     * @return string
     */
    public function getAsset()
    {
        return $this->container['asset'];
    }

    /**
     * Sets asset
     *
     * @param string $asset Asset name
     *
     * @return self
     */
    public function setAsset($asset)
    {
        if (is_null($asset)) {
            throw new \InvalidArgumentException('non-nullable asset cannot be null');
        }
        $this->container['asset'] = $asset;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets from_network_id
     *
     * @return string
     */
    public function getFromNetworkId()
    {
        return $this->container['from_network_id'];
    }

    /**
     * Sets from_network_id
     *
     * @param string $from_network_id Identifier of the origination Network Profile
     *
     * @return self
     */
    public function setFromNetworkId($from_network_id)
    {
        if (is_null($from_network_id)) {
            throw new \InvalidArgumentException('non-nullable from_network_id cannot be null');
        }
        $this->container['from_network_id'] = $from_network_id;

        return $this;
    }

    /**
     * Gets from_network_id_name
     *
     * @return string
     */
    public function getFromNetworkIdName()
    {
        return $this->container['from_network_id_name'];
    }

    /**
     * Sets from_network_id_name
     *
     * @param string $from_network_id_name Source network name
     *
     * @return self
     */
    public function setFromNetworkIdName($from_network_id_name)
    {
        if (is_null($from_network_id_name)) {
            throw new \InvalidArgumentException('non-nullable from_network_id_name cannot be null');
        }
        $this->container['from_network_id_name'] = $from_network_id_name;

        return $this;
    }

    /**
     * Gets to_network_id
     *
     * @return string
     */
    public function getToNetworkId()
    {
        return $this->container['to_network_id'];
    }

    /**
     * Sets to_network_id
     *
     * @param string $to_network_id Identifier of the destination Network Profile
     *
     * @return self
     */
    public function setToNetworkId($to_network_id)
    {
        if (is_null($to_network_id)) {
            throw new \InvalidArgumentException('non-nullable to_network_id cannot be null');
        }
        $this->container['to_network_id'] = $to_network_id;

        return $this;
    }

    /**
     * Gets to_network_id_name
     *
     * @return string
     */
    public function getToNetworkIdName()
    {
        return $this->container['to_network_id_name'];
    }

    /**
     * Sets to_network_id_name
     *
     * @param string $to_network_id_name Destination network name
     *
     * @return self
     */
    public function setToNetworkIdName($to_network_id_name)
    {
        if (is_null($to_network_id_name)) {
            throw new \InvalidArgumentException('non-nullable to_network_id_name cannot be null');
        }
        $this->container['to_network_id_name'] = $to_network_id_name;

        return $this;
    }

    /**
     * Gets tx_hash
     *
     * @return string
     */
    public function getTxHash()
    {
        return $this->container['tx_hash'];
    }

    /**
     * Sets tx_hash
     *
     * @param string $tx_hash Blockchain TX hash
     *
     * @return self
     */
    public function setTxHash($tx_hash)
    {
        if (is_null($tx_hash)) {
            array_push($this->openAPINullablesSetToNull, 'tx_hash');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tx_hash', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tx_hash'] = $tx_hash;

        return $this;
    }

    /**
     * Gets fb_tx_id
     *
     * @return string
     */
    public function getFbTxId()
    {
        return $this->container['fb_tx_id'];
    }

    /**
     * Sets fb_tx_id
     *
     * @param string $fb_tx_id Fireblocks transaction ID. It is set when the funding transaction is created.
     *
     * @return self
     */
    public function setFbTxId($fb_tx_id)
    {
        if (is_null($fb_tx_id)) {
            array_push($this->openAPINullablesSetToNull, 'fb_tx_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fb_tx_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fb_tx_id'] = $fb_tx_id;

        return $this;
    }

    /**
     * Gets tx_status
     *
     * @return string
     */
    public function getTxStatus()
    {
        return $this->container['tx_status'];
    }

    /**
     * Sets tx_status
     *
     * @param string $tx_status Ticket term transaction status
     *
     * @return self
     */
    public function setTxStatus($tx_status)
    {
        if (is_null($tx_status)) {
            array_push($this->openAPINullablesSetToNull, 'tx_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tx_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTxStatusAllowableValues();
        if (!is_null($tx_status) && !in_array($tx_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'tx_status', must be one of '%s'",
                    $tx_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tx_status'] = $tx_status;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Ticket term status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date and time when the term is created.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date and time of last term update.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


