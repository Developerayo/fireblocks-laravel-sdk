<?php
/**
 * DestinationTransferPeerPath
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * DestinationTransferPeerPath Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DestinationTransferPeerPath implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DestinationTransferPeerPath';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'sub_type' => 'string',
        'id' => 'string',
        'name' => 'string',
        'wallet_id' => 'string',
        'one_time_address' => '\DeveloperayoFireblocksLaravel\Model\OneTimeAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'sub_type' => null,
        'id' => null,
        'name' => null,
        'wallet_id' => 'uuid',
        'one_time_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'sub_type' => false,
        'id' => false,
        'name' => false,
        'wallet_id' => false,
        'one_time_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'sub_type' => 'subType',
        'id' => 'id',
        'name' => 'name',
        'wallet_id' => 'walletId',
        'one_time_address' => 'oneTimeAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'sub_type' => 'setSubType',
        'id' => 'setId',
        'name' => 'setName',
        'wallet_id' => 'setWalletId',
        'one_time_address' => 'setOneTimeAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'sub_type' => 'getSubType',
        'id' => 'getId',
        'name' => 'getName',
        'wallet_id' => 'getWalletId',
        'one_time_address' => 'getOneTimeAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_VAULT_ACCOUNT = 'VAULT_ACCOUNT';
    public const TYPE_EXCHANGE_ACCOUNT = 'EXCHANGE_ACCOUNT';
    public const TYPE_INTERNAL_WALLET = 'INTERNAL_WALLET';
    public const TYPE_EXTERNAL_WALLET = 'EXTERNAL_WALLET';
    public const TYPE_NETWORK_CONNECTION = 'NETWORK_CONNECTION';
    public const TYPE_FIAT_ACCOUNT = 'FIAT_ACCOUNT';
    public const TYPE_COMPOUND = 'COMPOUND';
    public const TYPE_GAS_STATION = 'GAS_STATION';
    public const TYPE_ONE_TIME_ADDRESS = 'ONE_TIME_ADDRESS';
    public const TYPE_UNKNOWN = 'UNKNOWN';
    public const TYPE_END_USER_WALLET = 'END_USER_WALLET';
    public const SUB_TYPE_BINANCE = 'BINANCE';
    public const SUB_TYPE_BINANCEUS = 'BINANCEUS';
    public const SUB_TYPE_BITFINEX = 'BITFINEX';
    public const SUB_TYPE_BITHUMB = 'BITHUMB';
    public const SUB_TYPE_BITMEX = 'BITMEX';
    public const SUB_TYPE_BITSO = 'BITSO';
    public const SUB_TYPE_BITSTAMP = 'BITSTAMP';
    public const SUB_TYPE_BITTREX = 'BITTREX';
    public const SUB_TYPE_BLINC = 'BLINC';
    public const SUB_TYPE_BYBIT = 'BYBIT';
    public const SUB_TYPE_CIRCLE = 'CIRCLE';
    public const SUB_TYPE_COINBASEEXCHANGE = 'COINBASEEXCHANGE';
    public const SUB_TYPE_COINBASEPRO = 'COINBASEPRO';
    public const SUB_TYPE_COINMETRO = 'COINMETRO';
    public const SUB_TYPE_COINSPRO = 'COINSPRO';
    public const SUB_TYPE_CRYPTOCOM = 'CRYPTOCOM';
    public const SUB_TYPE_DERIBIT = 'DERIBIT';
    public const SUB_TYPE_GEMINI = 'GEMINI';
    public const SUB_TYPE_HITBTC = 'HITBTC';
    public const SUB_TYPE_HUOBI = 'HUOBI';
    public const SUB_TYPE_INDEPENDENTRESERVE = 'INDEPENDENTRESERVE';
    public const SUB_TYPE_KORBIT = 'KORBIT';
    public const SUB_TYPE_KRAKEN = 'KRAKEN';
    public const SUB_TYPE_KRAKENINTL = 'KRAKENINTL';
    public const SUB_TYPE_KUCOIN = 'KUCOIN';
    public const SUB_TYPE_LIQUID = 'LIQUID';
    public const SUB_TYPE_OKCOIN = 'OKCOIN';
    public const SUB_TYPE_OKEX = 'OKEX';
    public const SUB_TYPE_PAXOS = 'PAXOS';
    public const SUB_TYPE_POLONIEX = 'POLONIEX';
    public const SUB_TYPE_EXTERNAL = 'External';
    public const SUB_TYPE_INTERNAL = 'Internal';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_VAULT_ACCOUNT,
            self::TYPE_EXCHANGE_ACCOUNT,
            self::TYPE_INTERNAL_WALLET,
            self::TYPE_EXTERNAL_WALLET,
            self::TYPE_NETWORK_CONNECTION,
            self::TYPE_FIAT_ACCOUNT,
            self::TYPE_COMPOUND,
            self::TYPE_GAS_STATION,
            self::TYPE_ONE_TIME_ADDRESS,
            self::TYPE_UNKNOWN,
            self::TYPE_END_USER_WALLET,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubTypeAllowableValues()
    {
        return [
            self::SUB_TYPE_BINANCE,
            self::SUB_TYPE_BINANCEUS,
            self::SUB_TYPE_BITFINEX,
            self::SUB_TYPE_BITHUMB,
            self::SUB_TYPE_BITMEX,
            self::SUB_TYPE_BITSO,
            self::SUB_TYPE_BITSTAMP,
            self::SUB_TYPE_BITTREX,
            self::SUB_TYPE_BLINC,
            self::SUB_TYPE_BYBIT,
            self::SUB_TYPE_CIRCLE,
            self::SUB_TYPE_COINBASEEXCHANGE,
            self::SUB_TYPE_COINBASEPRO,
            self::SUB_TYPE_COINMETRO,
            self::SUB_TYPE_COINSPRO,
            self::SUB_TYPE_CRYPTOCOM,
            self::SUB_TYPE_DERIBIT,
            self::SUB_TYPE_GEMINI,
            self::SUB_TYPE_HITBTC,
            self::SUB_TYPE_HUOBI,
            self::SUB_TYPE_INDEPENDENTRESERVE,
            self::SUB_TYPE_KORBIT,
            self::SUB_TYPE_KRAKEN,
            self::SUB_TYPE_KRAKENINTL,
            self::SUB_TYPE_KUCOIN,
            self::SUB_TYPE_LIQUID,
            self::SUB_TYPE_OKCOIN,
            self::SUB_TYPE_OKEX,
            self::SUB_TYPE_PAXOS,
            self::SUB_TYPE_POLONIEX,
            self::SUB_TYPE_EXTERNAL,
            self::SUB_TYPE_INTERNAL,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('sub_type', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('wallet_id', $data ?? [], null);
        $this->setIfExists('one_time_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubTypeAllowableValues();
        if (!is_null($this->container['sub_type']) && !in_array($this->container['sub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'sub_type', must be one of '%s'",
                $this->container['sub_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return string|null
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param string|null $sub_type sub_type
     *
     * @return self
     */
    public function setSubType($sub_type)
    {
        if (is_null($sub_type)) {
            throw new \InvalidArgumentException('non-nullable sub_type cannot be null');
        }
        $allowedValues = $this->getSubTypeAllowableValues();
        if (!in_array($sub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'sub_type', must be one of '%s'",
                    $sub_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets wallet_id
     *
     * @return string|null
     */
    public function getWalletId()
    {
        return $this->container['wallet_id'];
    }

    /**
     * Sets wallet_id
     *
     * @param string|null $wallet_id wallet_id
     *
     * @return self
     */
    public function setWalletId($wallet_id)
    {
        if (is_null($wallet_id)) {
            throw new \InvalidArgumentException('non-nullable wallet_id cannot be null');
        }
        $this->container['wallet_id'] = $wallet_id;

        return $this;
    }

    /**
     * Gets one_time_address
     *
     * @return \DeveloperayoFireblocksLaravel\Model\OneTimeAddress|null
     */
    public function getOneTimeAddress()
    {
        return $this->container['one_time_address'];
    }

    /**
     * Sets one_time_address
     *
     * @param \DeveloperayoFireblocksLaravel\Model\OneTimeAddress|null $one_time_address one_time_address
     *
     * @return self
     */
    public function setOneTimeAddress($one_time_address)
    {
        if (is_null($one_time_address)) {
            throw new \InvalidArgumentException('non-nullable one_time_address cannot be null');
        }
        $this->container['one_time_address'] = $one_time_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


