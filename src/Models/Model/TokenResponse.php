<?php
/**
 * TokenResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * TokenResponse Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TokenResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TokenResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'token_id' => 'string',
        'standard' => 'string',
        'metadata_uri' => 'string',
        'cached_metadata_uri' => 'string',
        'media' => '\DeveloperayoFireblocksLaravel\Model\MediaEntityResponse[]',
        'spam' => '\DeveloperayoFireblocksLaravel\Model\SpamTokenResponse',
        'collection' => '\DeveloperayoFireblocksLaravel\Model\TokenCollectionResponse',
        'blockchain_descriptor' => 'string',
        'description' => 'string',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'token_id' => null,
        'standard' => null,
        'metadata_uri' => null,
        'cached_metadata_uri' => null,
        'media' => null,
        'spam' => null,
        'collection' => null,
        'blockchain_descriptor' => null,
        'description' => null,
        'name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'token_id' => false,
        'standard' => false,
        'metadata_uri' => false,
        'cached_metadata_uri' => false,
        'media' => false,
        'spam' => false,
        'collection' => false,
        'blockchain_descriptor' => false,
        'description' => false,
        'name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'token_id' => 'tokenId',
        'standard' => 'standard',
        'metadata_uri' => 'metadataURI',
        'cached_metadata_uri' => 'cachedMetadataURI',
        'media' => 'media',
        'spam' => 'spam',
        'collection' => 'collection',
        'blockchain_descriptor' => 'blockchainDescriptor',
        'description' => 'description',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'token_id' => 'setTokenId',
        'standard' => 'setStandard',
        'metadata_uri' => 'setMetadataUri',
        'cached_metadata_uri' => 'setCachedMetadataUri',
        'media' => 'setMedia',
        'spam' => 'setSpam',
        'collection' => 'setCollection',
        'blockchain_descriptor' => 'setBlockchainDescriptor',
        'description' => 'setDescription',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'token_id' => 'getTokenId',
        'standard' => 'getStandard',
        'metadata_uri' => 'getMetadataUri',
        'cached_metadata_uri' => 'getCachedMetadataUri',
        'media' => 'getMedia',
        'spam' => 'getSpam',
        'collection' => 'getCollection',
        'blockchain_descriptor' => 'getBlockchainDescriptor',
        'description' => 'getDescription',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BLOCKCHAIN_DESCRIPTOR_ETH = 'ETH';
    public const BLOCKCHAIN_DESCRIPTOR_ETH_TEST3 = 'ETH_TEST3';
    public const BLOCKCHAIN_DESCRIPTOR_ETH_TEST5 = 'ETH_TEST5';
    public const BLOCKCHAIN_DESCRIPTOR_ETH_TEST6 = 'ETH_TEST6';
    public const BLOCKCHAIN_DESCRIPTOR_POLYGON = 'POLYGON';
    public const BLOCKCHAIN_DESCRIPTOR_POLYGON_TEST_MUMBAI = 'POLYGON_TEST_MUMBAI';
    public const BLOCKCHAIN_DESCRIPTOR_AMOY_POLYGON_TEST = 'AMOY_POLYGON_TEST';
    public const BLOCKCHAIN_DESCRIPTOR_XTZ = 'XTZ';
    public const BLOCKCHAIN_DESCRIPTOR_XTZ_TEST = 'XTZ_TEST';
    public const BLOCKCHAIN_DESCRIPTOR_BASECHAIN_ETH = 'BASECHAIN_ETH';
    public const BLOCKCHAIN_DESCRIPTOR_BASECHAIN_ETH_TEST3 = 'BASECHAIN_ETH_TEST3';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBlockchainDescriptorAllowableValues()
    {
        return [
            self::BLOCKCHAIN_DESCRIPTOR_ETH,
            self::BLOCKCHAIN_DESCRIPTOR_ETH_TEST3,
            self::BLOCKCHAIN_DESCRIPTOR_ETH_TEST5,
            self::BLOCKCHAIN_DESCRIPTOR_ETH_TEST6,
            self::BLOCKCHAIN_DESCRIPTOR_POLYGON,
            self::BLOCKCHAIN_DESCRIPTOR_POLYGON_TEST_MUMBAI,
            self::BLOCKCHAIN_DESCRIPTOR_AMOY_POLYGON_TEST,
            self::BLOCKCHAIN_DESCRIPTOR_XTZ,
            self::BLOCKCHAIN_DESCRIPTOR_XTZ_TEST,
            self::BLOCKCHAIN_DESCRIPTOR_BASECHAIN_ETH,
            self::BLOCKCHAIN_DESCRIPTOR_BASECHAIN_ETH_TEST3,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('token_id', $data ?? [], null);
        $this->setIfExists('standard', $data ?? [], null);
        $this->setIfExists('metadata_uri', $data ?? [], null);
        $this->setIfExists('cached_metadata_uri', $data ?? [], null);
        $this->setIfExists('media', $data ?? [], null);
        $this->setIfExists('spam', $data ?? [], null);
        $this->setIfExists('collection', $data ?? [], null);
        $this->setIfExists('blockchain_descriptor', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['token_id'] === null) {
            $invalidProperties[] = "'token_id' can't be null";
        }
        if ($this->container['standard'] === null) {
            $invalidProperties[] = "'standard' can't be null";
        }
        if ($this->container['blockchain_descriptor'] === null) {
            $invalidProperties[] = "'blockchain_descriptor' can't be null";
        }
        $allowedValues = $this->getBlockchainDescriptorAllowableValues();
        if (!is_null($this->container['blockchain_descriptor']) && !in_array($this->container['blockchain_descriptor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'blockchain_descriptor', must be one of '%s'",
                $this->container['blockchain_descriptor'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The Fireblocks NFT asset id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets token_id
     *
     * @return string
     */
    public function getTokenId()
    {
        return $this->container['token_id'];
    }

    /**
     * Sets token_id
     *
     * @param string $token_id Token id within the contract/collection
     *
     * @return self
     */
    public function setTokenId($token_id)
    {
        if (is_null($token_id)) {
            throw new \InvalidArgumentException('non-nullable token_id cannot be null');
        }
        $this->container['token_id'] = $token_id;

        return $this;
    }

    /**
     * Gets standard
     *
     * @return string
     */
    public function getStandard()
    {
        return $this->container['standard'];
    }

    /**
     * Sets standard
     *
     * @param string $standard ERC721 / ERC1155
     *
     * @return self
     */
    public function setStandard($standard)
    {
        if (is_null($standard)) {
            throw new \InvalidArgumentException('non-nullable standard cannot be null');
        }
        $this->container['standard'] = $standard;

        return $this;
    }

    /**
     * Gets metadata_uri
     *
     * @return string|null
     */
    public function getMetadataUri()
    {
        return $this->container['metadata_uri'];
    }

    /**
     * Sets metadata_uri
     *
     * @param string|null $metadata_uri URL of the original token JSON metadata
     *
     * @return self
     */
    public function setMetadataUri($metadata_uri)
    {
        if (is_null($metadata_uri)) {
            throw new \InvalidArgumentException('non-nullable metadata_uri cannot be null');
        }
        $this->container['metadata_uri'] = $metadata_uri;

        return $this;
    }

    /**
     * Gets cached_metadata_uri
     *
     * @return string|null
     */
    public function getCachedMetadataUri()
    {
        return $this->container['cached_metadata_uri'];
    }

    /**
     * Sets cached_metadata_uri
     *
     * @param string|null $cached_metadata_uri URL of the cached token JSON metadata
     *
     * @return self
     */
    public function setCachedMetadataUri($cached_metadata_uri)
    {
        if (is_null($cached_metadata_uri)) {
            throw new \InvalidArgumentException('non-nullable cached_metadata_uri cannot be null');
        }
        $this->container['cached_metadata_uri'] = $cached_metadata_uri;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \DeveloperayoFireblocksLaravel\Model\MediaEntityResponse[]|null
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \DeveloperayoFireblocksLaravel\Model\MediaEntityResponse[]|null $media Media items extracted from metadata JSON
     *
     * @return self
     */
    public function setMedia($media)
    {
        if (is_null($media)) {
            throw new \InvalidArgumentException('non-nullable media cannot be null');
        }
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets spam
     *
     * @return \DeveloperayoFireblocksLaravel\Model\SpamTokenResponse|null
     */
    public function getSpam()
    {
        return $this->container['spam'];
    }

    /**
     * Sets spam
     *
     * @param \DeveloperayoFireblocksLaravel\Model\SpamTokenResponse|null $spam Token spam status
     *
     * @return self
     */
    public function setSpam($spam)
    {
        if (is_null($spam)) {
            throw new \InvalidArgumentException('non-nullable spam cannot be null');
        }
        $this->container['spam'] = $spam;

        return $this;
    }

    /**
     * Gets collection
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TokenCollectionResponse|null
     */
    public function getCollection()
    {
        return $this->container['collection'];
    }

    /**
     * Sets collection
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TokenCollectionResponse|null $collection Parent collection information
     *
     * @return self
     */
    public function setCollection($collection)
    {
        if (is_null($collection)) {
            throw new \InvalidArgumentException('non-nullable collection cannot be null');
        }
        $this->container['collection'] = $collection;

        return $this;
    }

    /**
     * Gets blockchain_descriptor
     *
     * @return string
     */
    public function getBlockchainDescriptor()
    {
        return $this->container['blockchain_descriptor'];
    }

    /**
     * Sets blockchain_descriptor
     *
     * @param string $blockchain_descriptor blockchain_descriptor
     *
     * @return self
     */
    public function setBlockchainDescriptor($blockchain_descriptor)
    {
        if (is_null($blockchain_descriptor)) {
            throw new \InvalidArgumentException('non-nullable blockchain_descriptor cannot be null');
        }
        $allowedValues = $this->getBlockchainDescriptorAllowableValues();
        if (!in_array($blockchain_descriptor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'blockchain_descriptor', must be one of '%s'",
                    $blockchain_descriptor,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['blockchain_descriptor'] = $blockchain_descriptor;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


