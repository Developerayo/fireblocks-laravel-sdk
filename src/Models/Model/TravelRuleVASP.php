<?php
/**
 * TravelRuleVASP
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * TravelRuleVASP Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TravelRuleVASP implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TravelRuleVASP';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'did' => 'string',
        'name' => 'string',
        'verification_status' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'city' => 'string',
        'country' => 'string',
        'email_domains' => 'string',
        'website' => 'string',
        'logo' => 'string',
        'legal_structure' => 'string',
        'legal_name' => 'string',
        'year_founded' => 'string',
        'incorporation_country' => 'string',
        'is_regulated' => 'string',
        'other_names' => 'string',
        'identification_type' => 'string',
        'identification_country' => 'string',
        'business_number' => 'string',
        'regulatory_authorities' => 'string',
        'jurisdictions' => 'string',
        'street' => 'string',
        'number' => 'string',
        'unit' => 'string',
        'post_code' => 'string',
        'state' => 'string',
        'certificates' => 'string',
        'description' => 'string',
        'travel_rule_openvasp' => 'string',
        'travel_rule_sygna' => 'string',
        'travel_rule_trisa' => 'string',
        'travel_rule_trlight' => 'string',
        'travel_rule_email' => 'string',
        'travel_rule_trp' => 'string',
        'travel_rule_shyft' => 'string',
        'travel_rule_ustravelrulewg' => 'string',
        'created_at' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'updated_by' => 'string',
        'last_sent_date' => 'string',
        'last_received_date' => 'string',
        'documents' => 'string',
        'has_admin' => 'bool',
        'is_notifiable' => 'bool',
        'issuers' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuers'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'did' => null,
        'name' => null,
        'verification_status' => null,
        'address_line1' => null,
        'address_line2' => null,
        'city' => null,
        'country' => null,
        'email_domains' => null,
        'website' => null,
        'logo' => null,
        'legal_structure' => null,
        'legal_name' => null,
        'year_founded' => null,
        'incorporation_country' => null,
        'is_regulated' => null,
        'other_names' => null,
        'identification_type' => null,
        'identification_country' => null,
        'business_number' => null,
        'regulatory_authorities' => null,
        'jurisdictions' => null,
        'street' => null,
        'number' => null,
        'unit' => null,
        'post_code' => null,
        'state' => null,
        'certificates' => null,
        'description' => null,
        'travel_rule_openvasp' => null,
        'travel_rule_sygna' => null,
        'travel_rule_trisa' => null,
        'travel_rule_trlight' => null,
        'travel_rule_email' => null,
        'travel_rule_trp' => null,
        'travel_rule_shyft' => null,
        'travel_rule_ustravelrulewg' => null,
        'created_at' => null,
        'created_by' => null,
        'updated_at' => null,
        'updated_by' => null,
        'last_sent_date' => null,
        'last_received_date' => null,
        'documents' => null,
        'has_admin' => null,
        'is_notifiable' => null,
        'issuers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'did' => false,
        'name' => false,
        'verification_status' => false,
        'address_line1' => false,
        'address_line2' => false,
        'city' => false,
        'country' => false,
        'email_domains' => false,
        'website' => false,
        'logo' => false,
        'legal_structure' => false,
        'legal_name' => false,
        'year_founded' => false,
        'incorporation_country' => false,
        'is_regulated' => false,
        'other_names' => false,
        'identification_type' => false,
        'identification_country' => false,
        'business_number' => false,
        'regulatory_authorities' => false,
        'jurisdictions' => false,
        'street' => false,
        'number' => false,
        'unit' => false,
        'post_code' => false,
        'state' => false,
        'certificates' => false,
        'description' => false,
        'travel_rule_openvasp' => false,
        'travel_rule_sygna' => false,
        'travel_rule_trisa' => false,
        'travel_rule_trlight' => false,
        'travel_rule_email' => false,
        'travel_rule_trp' => false,
        'travel_rule_shyft' => false,
        'travel_rule_ustravelrulewg' => false,
        'created_at' => false,
        'created_by' => false,
        'updated_at' => false,
        'updated_by' => false,
        'last_sent_date' => false,
        'last_received_date' => false,
        'documents' => false,
        'has_admin' => false,
        'is_notifiable' => false,
        'issuers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'did' => 'did',
        'name' => 'name',
        'verification_status' => 'verificationStatus',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'city' => 'city',
        'country' => 'country',
        'email_domains' => 'emailDomains',
        'website' => 'website',
        'logo' => 'logo',
        'legal_structure' => 'legalStructure',
        'legal_name' => 'legalName',
        'year_founded' => 'yearFounded',
        'incorporation_country' => 'incorporationCountry',
        'is_regulated' => 'isRegulated',
        'other_names' => 'otherNames',
        'identification_type' => 'identificationType',
        'identification_country' => 'identificationCountry',
        'business_number' => 'businessNumber',
        'regulatory_authorities' => 'regulatoryAuthorities',
        'jurisdictions' => 'jurisdictions',
        'street' => 'street',
        'number' => 'number',
        'unit' => 'unit',
        'post_code' => 'postCode',
        'state' => 'state',
        'certificates' => 'certificates',
        'description' => 'description',
        'travel_rule_openvasp' => 'travelRule_OPENVASP',
        'travel_rule_sygna' => 'travelRule_SYGNA',
        'travel_rule_trisa' => 'travelRule_TRISA',
        'travel_rule_trlight' => 'travelRule_TRLIGHT',
        'travel_rule_email' => 'travelRule_EMAIL',
        'travel_rule_trp' => 'travelRule_TRP',
        'travel_rule_shyft' => 'travelRule_SHYFT',
        'travel_rule_ustravelrulewg' => 'travelRule_USTRAVELRULEWG',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy',
        'last_sent_date' => 'lastSentDate',
        'last_received_date' => 'lastReceivedDate',
        'documents' => 'documents',
        'has_admin' => 'hasAdmin',
        'is_notifiable' => 'isNotifiable',
        'issuers' => 'issuers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'did' => 'setDid',
        'name' => 'setName',
        'verification_status' => 'setVerificationStatus',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'city' => 'setCity',
        'country' => 'setCountry',
        'email_domains' => 'setEmailDomains',
        'website' => 'setWebsite',
        'logo' => 'setLogo',
        'legal_structure' => 'setLegalStructure',
        'legal_name' => 'setLegalName',
        'year_founded' => 'setYearFounded',
        'incorporation_country' => 'setIncorporationCountry',
        'is_regulated' => 'setIsRegulated',
        'other_names' => 'setOtherNames',
        'identification_type' => 'setIdentificationType',
        'identification_country' => 'setIdentificationCountry',
        'business_number' => 'setBusinessNumber',
        'regulatory_authorities' => 'setRegulatoryAuthorities',
        'jurisdictions' => 'setJurisdictions',
        'street' => 'setStreet',
        'number' => 'setNumber',
        'unit' => 'setUnit',
        'post_code' => 'setPostCode',
        'state' => 'setState',
        'certificates' => 'setCertificates',
        'description' => 'setDescription',
        'travel_rule_openvasp' => 'setTravelRuleOpenvasp',
        'travel_rule_sygna' => 'setTravelRuleSygna',
        'travel_rule_trisa' => 'setTravelRuleTrisa',
        'travel_rule_trlight' => 'setTravelRuleTrlight',
        'travel_rule_email' => 'setTravelRuleEmail',
        'travel_rule_trp' => 'setTravelRuleTrp',
        'travel_rule_shyft' => 'setTravelRuleShyft',
        'travel_rule_ustravelrulewg' => 'setTravelRuleUstravelrulewg',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy',
        'last_sent_date' => 'setLastSentDate',
        'last_received_date' => 'setLastReceivedDate',
        'documents' => 'setDocuments',
        'has_admin' => 'setHasAdmin',
        'is_notifiable' => 'setIsNotifiable',
        'issuers' => 'setIssuers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'did' => 'getDid',
        'name' => 'getName',
        'verification_status' => 'getVerificationStatus',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'city' => 'getCity',
        'country' => 'getCountry',
        'email_domains' => 'getEmailDomains',
        'website' => 'getWebsite',
        'logo' => 'getLogo',
        'legal_structure' => 'getLegalStructure',
        'legal_name' => 'getLegalName',
        'year_founded' => 'getYearFounded',
        'incorporation_country' => 'getIncorporationCountry',
        'is_regulated' => 'getIsRegulated',
        'other_names' => 'getOtherNames',
        'identification_type' => 'getIdentificationType',
        'identification_country' => 'getIdentificationCountry',
        'business_number' => 'getBusinessNumber',
        'regulatory_authorities' => 'getRegulatoryAuthorities',
        'jurisdictions' => 'getJurisdictions',
        'street' => 'getStreet',
        'number' => 'getNumber',
        'unit' => 'getUnit',
        'post_code' => 'getPostCode',
        'state' => 'getState',
        'certificates' => 'getCertificates',
        'description' => 'getDescription',
        'travel_rule_openvasp' => 'getTravelRuleOpenvasp',
        'travel_rule_sygna' => 'getTravelRuleSygna',
        'travel_rule_trisa' => 'getTravelRuleTrisa',
        'travel_rule_trlight' => 'getTravelRuleTrlight',
        'travel_rule_email' => 'getTravelRuleEmail',
        'travel_rule_trp' => 'getTravelRuleTrp',
        'travel_rule_shyft' => 'getTravelRuleShyft',
        'travel_rule_ustravelrulewg' => 'getTravelRuleUstravelrulewg',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy',
        'last_sent_date' => 'getLastSentDate',
        'last_received_date' => 'getLastReceivedDate',
        'documents' => 'getDocuments',
        'has_admin' => 'getHasAdmin',
        'is_notifiable' => 'getIsNotifiable',
        'issuers' => 'getIssuers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('did', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('verification_status', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('address_line2', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('email_domains', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('legal_structure', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('year_founded', $data ?? [], null);
        $this->setIfExists('incorporation_country', $data ?? [], null);
        $this->setIfExists('is_regulated', $data ?? [], null);
        $this->setIfExists('other_names', $data ?? [], null);
        $this->setIfExists('identification_type', $data ?? [], null);
        $this->setIfExists('identification_country', $data ?? [], null);
        $this->setIfExists('business_number', $data ?? [], null);
        $this->setIfExists('regulatory_authorities', $data ?? [], null);
        $this->setIfExists('jurisdictions', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('post_code', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('certificates', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('travel_rule_openvasp', $data ?? [], null);
        $this->setIfExists('travel_rule_sygna', $data ?? [], null);
        $this->setIfExists('travel_rule_trisa', $data ?? [], null);
        $this->setIfExists('travel_rule_trlight', $data ?? [], null);
        $this->setIfExists('travel_rule_email', $data ?? [], null);
        $this->setIfExists('travel_rule_trp', $data ?? [], null);
        $this->setIfExists('travel_rule_shyft', $data ?? [], null);
        $this->setIfExists('travel_rule_ustravelrulewg', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('last_sent_date', $data ?? [], null);
        $this->setIfExists('last_received_date', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('has_admin', $data ?? [], null);
        $this->setIfExists('is_notifiable', $data ?? [], null);
        $this->setIfExists('issuers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['did'] === null) {
            $invalidProperties[] = "'did' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['verification_status'] === null) {
            $invalidProperties[] = "'verification_status' can't be null";
        }
        if ($this->container['address_line1'] === null) {
            $invalidProperties[] = "'address_line1' can't be null";
        }
        if ($this->container['address_line2'] === null) {
            $invalidProperties[] = "'address_line2' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['email_domains'] === null) {
            $invalidProperties[] = "'email_domains' can't be null";
        }
        if ($this->container['website'] === null) {
            $invalidProperties[] = "'website' can't be null";
        }
        if ($this->container['logo'] === null) {
            $invalidProperties[] = "'logo' can't be null";
        }
        if ($this->container['legal_structure'] === null) {
            $invalidProperties[] = "'legal_structure' can't be null";
        }
        if ($this->container['legal_name'] === null) {
            $invalidProperties[] = "'legal_name' can't be null";
        }
        if ($this->container['year_founded'] === null) {
            $invalidProperties[] = "'year_founded' can't be null";
        }
        if ($this->container['incorporation_country'] === null) {
            $invalidProperties[] = "'incorporation_country' can't be null";
        }
        if ($this->container['is_regulated'] === null) {
            $invalidProperties[] = "'is_regulated' can't be null";
        }
        if ($this->container['other_names'] === null) {
            $invalidProperties[] = "'other_names' can't be null";
        }
        if ($this->container['identification_type'] === null) {
            $invalidProperties[] = "'identification_type' can't be null";
        }
        if ($this->container['identification_country'] === null) {
            $invalidProperties[] = "'identification_country' can't be null";
        }
        if ($this->container['business_number'] === null) {
            $invalidProperties[] = "'business_number' can't be null";
        }
        if ($this->container['regulatory_authorities'] === null) {
            $invalidProperties[] = "'regulatory_authorities' can't be null";
        }
        if ($this->container['jurisdictions'] === null) {
            $invalidProperties[] = "'jurisdictions' can't be null";
        }
        if ($this->container['street'] === null) {
            $invalidProperties[] = "'street' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['unit'] === null) {
            $invalidProperties[] = "'unit' can't be null";
        }
        if ($this->container['post_code'] === null) {
            $invalidProperties[] = "'post_code' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['certificates'] === null) {
            $invalidProperties[] = "'certificates' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['travel_rule_openvasp'] === null) {
            $invalidProperties[] = "'travel_rule_openvasp' can't be null";
        }
        if ($this->container['travel_rule_sygna'] === null) {
            $invalidProperties[] = "'travel_rule_sygna' can't be null";
        }
        if ($this->container['travel_rule_trisa'] === null) {
            $invalidProperties[] = "'travel_rule_trisa' can't be null";
        }
        if ($this->container['travel_rule_trlight'] === null) {
            $invalidProperties[] = "'travel_rule_trlight' can't be null";
        }
        if ($this->container['travel_rule_email'] === null) {
            $invalidProperties[] = "'travel_rule_email' can't be null";
        }
        if ($this->container['travel_rule_trp'] === null) {
            $invalidProperties[] = "'travel_rule_trp' can't be null";
        }
        if ($this->container['travel_rule_shyft'] === null) {
            $invalidProperties[] = "'travel_rule_shyft' can't be null";
        }
        if ($this->container['travel_rule_ustravelrulewg'] === null) {
            $invalidProperties[] = "'travel_rule_ustravelrulewg' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['updated_by'] === null) {
            $invalidProperties[] = "'updated_by' can't be null";
        }
        if ($this->container['last_sent_date'] === null) {
            $invalidProperties[] = "'last_sent_date' can't be null";
        }
        if ($this->container['last_received_date'] === null) {
            $invalidProperties[] = "'last_received_date' can't be null";
        }
        if ($this->container['documents'] === null) {
            $invalidProperties[] = "'documents' can't be null";
        }
        if ($this->container['has_admin'] === null) {
            $invalidProperties[] = "'has_admin' can't be null";
        }
        if ($this->container['is_notifiable'] === null) {
            $invalidProperties[] = "'is_notifiable' can't be null";
        }
        if ($this->container['issuers'] === null) {
            $invalidProperties[] = "'issuers' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets did
     *
     * @return string
     */
    public function getDid()
    {
        return $this->container['did'];
    }

    /**
     * Sets did
     *
     * @param string $did did
     *
     * @return self
     */
    public function setDid($did)
    {
        if (is_null($did)) {
            throw new \InvalidArgumentException('non-nullable did cannot be null');
        }
        $this->container['did'] = $did;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets verification_status
     *
     * @return string
     */
    public function getVerificationStatus()
    {
        return $this->container['verification_status'];
    }

    /**
     * Sets verification_status
     *
     * @param string $verification_status verification_status
     *
     * @return self
     */
    public function setVerificationStatus($verification_status)
    {
        if (is_null($verification_status)) {
            throw new \InvalidArgumentException('non-nullable verification_status cannot be null');
        }
        $this->container['verification_status'] = $verification_status;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 address_line1
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            throw new \InvalidArgumentException('non-nullable address_line1 cannot be null');
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string $address_line2 address_line2
     *
     * @return self
     */
    public function setAddressLine2($address_line2)
    {
        if (is_null($address_line2)) {
            throw new \InvalidArgumentException('non-nullable address_line2 cannot be null');
        }
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets email_domains
     *
     * @return string
     */
    public function getEmailDomains()
    {
        return $this->container['email_domains'];
    }

    /**
     * Sets email_domains
     *
     * @param string $email_domains email_domains
     *
     * @return self
     */
    public function setEmailDomains($email_domains)
    {
        if (is_null($email_domains)) {
            throw new \InvalidArgumentException('non-nullable email_domains cannot be null');
        }
        $this->container['email_domains'] = $email_domains;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets legal_structure
     *
     * @return string
     */
    public function getLegalStructure()
    {
        return $this->container['legal_structure'];
    }

    /**
     * Sets legal_structure
     *
     * @param string $legal_structure legal_structure
     *
     * @return self
     */
    public function setLegalStructure($legal_structure)
    {
        if (is_null($legal_structure)) {
            throw new \InvalidArgumentException('non-nullable legal_structure cannot be null');
        }
        $this->container['legal_structure'] = $legal_structure;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return string
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param string $legal_name legal_name
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            throw new \InvalidArgumentException('non-nullable legal_name cannot be null');
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets year_founded
     *
     * @return string
     */
    public function getYearFounded()
    {
        return $this->container['year_founded'];
    }

    /**
     * Sets year_founded
     *
     * @param string $year_founded year_founded
     *
     * @return self
     */
    public function setYearFounded($year_founded)
    {
        if (is_null($year_founded)) {
            throw new \InvalidArgumentException('non-nullable year_founded cannot be null');
        }
        $this->container['year_founded'] = $year_founded;

        return $this;
    }

    /**
     * Gets incorporation_country
     *
     * @return string
     */
    public function getIncorporationCountry()
    {
        return $this->container['incorporation_country'];
    }

    /**
     * Sets incorporation_country
     *
     * @param string $incorporation_country incorporation_country
     *
     * @return self
     */
    public function setIncorporationCountry($incorporation_country)
    {
        if (is_null($incorporation_country)) {
            throw new \InvalidArgumentException('non-nullable incorporation_country cannot be null');
        }
        $this->container['incorporation_country'] = $incorporation_country;

        return $this;
    }

    /**
     * Gets is_regulated
     *
     * @return string
     */
    public function getIsRegulated()
    {
        return $this->container['is_regulated'];
    }

    /**
     * Sets is_regulated
     *
     * @param string $is_regulated is_regulated
     *
     * @return self
     */
    public function setIsRegulated($is_regulated)
    {
        if (is_null($is_regulated)) {
            throw new \InvalidArgumentException('non-nullable is_regulated cannot be null');
        }
        $this->container['is_regulated'] = $is_regulated;

        return $this;
    }

    /**
     * Gets other_names
     *
     * @return string
     */
    public function getOtherNames()
    {
        return $this->container['other_names'];
    }

    /**
     * Sets other_names
     *
     * @param string $other_names other_names
     *
     * @return self
     */
    public function setOtherNames($other_names)
    {
        if (is_null($other_names)) {
            throw new \InvalidArgumentException('non-nullable other_names cannot be null');
        }
        $this->container['other_names'] = $other_names;

        return $this;
    }

    /**
     * Gets identification_type
     *
     * @return string
     */
    public function getIdentificationType()
    {
        return $this->container['identification_type'];
    }

    /**
     * Sets identification_type
     *
     * @param string $identification_type identification_type
     *
     * @return self
     */
    public function setIdentificationType($identification_type)
    {
        if (is_null($identification_type)) {
            throw new \InvalidArgumentException('non-nullable identification_type cannot be null');
        }
        $this->container['identification_type'] = $identification_type;

        return $this;
    }

    /**
     * Gets identification_country
     *
     * @return string
     */
    public function getIdentificationCountry()
    {
        return $this->container['identification_country'];
    }

    /**
     * Sets identification_country
     *
     * @param string $identification_country identification_country
     *
     * @return self
     */
    public function setIdentificationCountry($identification_country)
    {
        if (is_null($identification_country)) {
            throw new \InvalidArgumentException('non-nullable identification_country cannot be null');
        }
        $this->container['identification_country'] = $identification_country;

        return $this;
    }

    /**
     * Gets business_number
     *
     * @return string
     */
    public function getBusinessNumber()
    {
        return $this->container['business_number'];
    }

    /**
     * Sets business_number
     *
     * @param string $business_number business_number
     *
     * @return self
     */
    public function setBusinessNumber($business_number)
    {
        if (is_null($business_number)) {
            throw new \InvalidArgumentException('non-nullable business_number cannot be null');
        }
        $this->container['business_number'] = $business_number;

        return $this;
    }

    /**
     * Gets regulatory_authorities
     *
     * @return string
     */
    public function getRegulatoryAuthorities()
    {
        return $this->container['regulatory_authorities'];
    }

    /**
     * Sets regulatory_authorities
     *
     * @param string $regulatory_authorities regulatory_authorities
     *
     * @return self
     */
    public function setRegulatoryAuthorities($regulatory_authorities)
    {
        if (is_null($regulatory_authorities)) {
            throw new \InvalidArgumentException('non-nullable regulatory_authorities cannot be null');
        }
        $this->container['regulatory_authorities'] = $regulatory_authorities;

        return $this;
    }

    /**
     * Gets jurisdictions
     *
     * @return string
     */
    public function getJurisdictions()
    {
        return $this->container['jurisdictions'];
    }

    /**
     * Sets jurisdictions
     *
     * @param string $jurisdictions jurisdictions
     *
     * @return self
     */
    public function setJurisdictions($jurisdictions)
    {
        if (is_null($jurisdictions)) {
            throw new \InvalidArgumentException('non-nullable jurisdictions cannot be null');
        }
        $this->container['jurisdictions'] = $jurisdictions;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string $post_code post_code
     *
     * @return self
     */
    public function setPostCode($post_code)
    {
        if (is_null($post_code)) {
            throw new \InvalidArgumentException('non-nullable post_code cannot be null');
        }
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets certificates
     *
     * @return string
     */
    public function getCertificates()
    {
        return $this->container['certificates'];
    }

    /**
     * Sets certificates
     *
     * @param string $certificates certificates
     *
     * @return self
     */
    public function setCertificates($certificates)
    {
        if (is_null($certificates)) {
            throw new \InvalidArgumentException('non-nullable certificates cannot be null');
        }
        $this->container['certificates'] = $certificates;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets travel_rule_openvasp
     *
     * @return string
     */
    public function getTravelRuleOpenvasp()
    {
        return $this->container['travel_rule_openvasp'];
    }

    /**
     * Sets travel_rule_openvasp
     *
     * @param string $travel_rule_openvasp travel_rule_openvasp
     *
     * @return self
     */
    public function setTravelRuleOpenvasp($travel_rule_openvasp)
    {
        if (is_null($travel_rule_openvasp)) {
            throw new \InvalidArgumentException('non-nullable travel_rule_openvasp cannot be null');
        }
        $this->container['travel_rule_openvasp'] = $travel_rule_openvasp;

        return $this;
    }

    /**
     * Gets travel_rule_sygna
     *
     * @return string
     */
    public function getTravelRuleSygna()
    {
        return $this->container['travel_rule_sygna'];
    }

    /**
     * Sets travel_rule_sygna
     *
     * @param string $travel_rule_sygna travel_rule_sygna
     *
     * @return self
     */
    public function setTravelRuleSygna($travel_rule_sygna)
    {
        if (is_null($travel_rule_sygna)) {
            throw new \InvalidArgumentException('non-nullable travel_rule_sygna cannot be null');
        }
        $this->container['travel_rule_sygna'] = $travel_rule_sygna;

        return $this;
    }

    /**
     * Gets travel_rule_trisa
     *
     * @return string
     */
    public function getTravelRuleTrisa()
    {
        return $this->container['travel_rule_trisa'];
    }

    /**
     * Sets travel_rule_trisa
     *
     * @param string $travel_rule_trisa travel_rule_trisa
     *
     * @return self
     */
    public function setTravelRuleTrisa($travel_rule_trisa)
    {
        if (is_null($travel_rule_trisa)) {
            throw new \InvalidArgumentException('non-nullable travel_rule_trisa cannot be null');
        }
        $this->container['travel_rule_trisa'] = $travel_rule_trisa;

        return $this;
    }

    /**
     * Gets travel_rule_trlight
     *
     * @return string
     */
    public function getTravelRuleTrlight()
    {
        return $this->container['travel_rule_trlight'];
    }

    /**
     * Sets travel_rule_trlight
     *
     * @param string $travel_rule_trlight travel_rule_trlight
     *
     * @return self
     */
    public function setTravelRuleTrlight($travel_rule_trlight)
    {
        if (is_null($travel_rule_trlight)) {
            throw new \InvalidArgumentException('non-nullable travel_rule_trlight cannot be null');
        }
        $this->container['travel_rule_trlight'] = $travel_rule_trlight;

        return $this;
    }

    /**
     * Gets travel_rule_email
     *
     * @return string
     */
    public function getTravelRuleEmail()
    {
        return $this->container['travel_rule_email'];
    }

    /**
     * Sets travel_rule_email
     *
     * @param string $travel_rule_email travel_rule_email
     *
     * @return self
     */
    public function setTravelRuleEmail($travel_rule_email)
    {
        if (is_null($travel_rule_email)) {
            throw new \InvalidArgumentException('non-nullable travel_rule_email cannot be null');
        }
        $this->container['travel_rule_email'] = $travel_rule_email;

        return $this;
    }

    /**
     * Gets travel_rule_trp
     *
     * @return string
     */
    public function getTravelRuleTrp()
    {
        return $this->container['travel_rule_trp'];
    }

    /**
     * Sets travel_rule_trp
     *
     * @param string $travel_rule_trp travel_rule_trp
     *
     * @return self
     */
    public function setTravelRuleTrp($travel_rule_trp)
    {
        if (is_null($travel_rule_trp)) {
            throw new \InvalidArgumentException('non-nullable travel_rule_trp cannot be null');
        }
        $this->container['travel_rule_trp'] = $travel_rule_trp;

        return $this;
    }

    /**
     * Gets travel_rule_shyft
     *
     * @return string
     */
    public function getTravelRuleShyft()
    {
        return $this->container['travel_rule_shyft'];
    }

    /**
     * Sets travel_rule_shyft
     *
     * @param string $travel_rule_shyft travel_rule_shyft
     *
     * @return self
     */
    public function setTravelRuleShyft($travel_rule_shyft)
    {
        if (is_null($travel_rule_shyft)) {
            throw new \InvalidArgumentException('non-nullable travel_rule_shyft cannot be null');
        }
        $this->container['travel_rule_shyft'] = $travel_rule_shyft;

        return $this;
    }

    /**
     * Gets travel_rule_ustravelrulewg
     *
     * @return string
     */
    public function getTravelRuleUstravelrulewg()
    {
        return $this->container['travel_rule_ustravelrulewg'];
    }

    /**
     * Sets travel_rule_ustravelrulewg
     *
     * @param string $travel_rule_ustravelrulewg travel_rule_ustravelrulewg
     *
     * @return self
     */
    public function setTravelRuleUstravelrulewg($travel_rule_ustravelrulewg)
    {
        if (is_null($travel_rule_ustravelrulewg)) {
            throw new \InvalidArgumentException('non-nullable travel_rule_ustravelrulewg cannot be null');
        }
        $this->container['travel_rule_ustravelrulewg'] = $travel_rule_ustravelrulewg;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets last_sent_date
     *
     * @return string
     */
    public function getLastSentDate()
    {
        return $this->container['last_sent_date'];
    }

    /**
     * Sets last_sent_date
     *
     * @param string $last_sent_date last_sent_date
     *
     * @return self
     */
    public function setLastSentDate($last_sent_date)
    {
        if (is_null($last_sent_date)) {
            throw new \InvalidArgumentException('non-nullable last_sent_date cannot be null');
        }
        $this->container['last_sent_date'] = $last_sent_date;

        return $this;
    }

    /**
     * Gets last_received_date
     *
     * @return string
     */
    public function getLastReceivedDate()
    {
        return $this->container['last_received_date'];
    }

    /**
     * Sets last_received_date
     *
     * @param string $last_received_date last_received_date
     *
     * @return self
     */
    public function setLastReceivedDate($last_received_date)
    {
        if (is_null($last_received_date)) {
            throw new \InvalidArgumentException('non-nullable last_received_date cannot be null');
        }
        $this->container['last_received_date'] = $last_received_date;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return string
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param string $documents documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets has_admin
     *
     * @return bool
     */
    public function getHasAdmin()
    {
        return $this->container['has_admin'];
    }

    /**
     * Sets has_admin
     *
     * @param bool $has_admin has_admin
     *
     * @return self
     */
    public function setHasAdmin($has_admin)
    {
        if (is_null($has_admin)) {
            throw new \InvalidArgumentException('non-nullable has_admin cannot be null');
        }
        $this->container['has_admin'] = $has_admin;

        return $this;
    }

    /**
     * Gets is_notifiable
     *
     * @return bool
     */
    public function getIsNotifiable()
    {
        return $this->container['is_notifiable'];
    }

    /**
     * Sets is_notifiable
     *
     * @param bool $is_notifiable is_notifiable
     *
     * @return self
     */
    public function setIsNotifiable($is_notifiable)
    {
        if (is_null($is_notifiable)) {
            throw new \InvalidArgumentException('non-nullable is_notifiable cannot be null');
        }
        $this->container['is_notifiable'] = $is_notifiable;

        return $this;
    }

    /**
     * Gets issuers
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuers
     */
    public function getIssuers()
    {
        return $this->container['issuers'];
    }

    /**
     * Sets issuers
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuers $issuers issuers
     *
     * @return self
     */
    public function setIssuers($issuers)
    {
        if (is_null($issuers)) {
            throw new \InvalidArgumentException('non-nullable issuers cannot be null');
        }
        $this->container['issuers'] = $issuers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


