<?php
/**
 * PolicyStatus
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * PolicyStatus Class Doc Comment
 *
 * @category Class
 * @description * SUCCESS - success * UNVALIDATED - not validated yet * INVALID_CONFIGURATION - at least one rule is invalid * PENDING - pending approval * PENDING_CONSOLE_APPROVAL - pending approval from the console app * AWAITING_QUORUM - pending quorum approval * UNHANDLED_ERROR - unhandled error
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PolicyStatus
{
    /**
     * Possible values of this enum
     */
    public const SUCCESS = 'SUCCESS';

    public const UNVALIDATED = 'UNVALIDATED';

    public const INVALID_CONFIGURATION = 'INVALID_CONFIGURATION';

    public const PENDING = 'PENDING';

    public const PENDING_CONSOLE_APPROVAL = 'PENDING_CONSOLE_APPROVAL';

    public const AWAITING_QUORUM = 'AWAITING_QUORUM';

    public const UNHANDLED_ERROR = 'UNHANDLED_ERROR';

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::SUCCESS,
            self::UNVALIDATED,
            self::INVALID_CONFIGURATION,
            self::PENDING,
            self::PENDING_CONSOLE_APPROVAL,
            self::AWAITING_QUORUM,
            self::UNHANDLED_ERROR
        ];
    }
}


