<?php
/**
 * ScreeningVerdict
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * ScreeningVerdict Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ScreeningVerdict implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ScreeningVerdict';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'verdict' => 'string',
        'execution_operation_id' => 'string',
        'account' => '\DeveloperayoFireblocksLaravel\Model\Destination',
        'asset_id' => 'string',
        'amount' => 'string',
        'matched_rule' => '\DeveloperayoFireblocksLaravel\Model\ScreeningVerdictMatchedRule'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'verdict' => null,
        'execution_operation_id' => null,
        'account' => null,
        'asset_id' => null,
        'amount' => null,
        'matched_rule' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'verdict' => false,
        'execution_operation_id' => false,
        'account' => false,
        'asset_id' => false,
        'amount' => false,
        'matched_rule' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'verdict' => 'verdict',
        'execution_operation_id' => 'executionOperationId',
        'account' => 'account',
        'asset_id' => 'assetId',
        'amount' => 'amount',
        'matched_rule' => 'matchedRule'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'verdict' => 'setVerdict',
        'execution_operation_id' => 'setExecutionOperationId',
        'account' => 'setAccount',
        'asset_id' => 'setAssetId',
        'amount' => 'setAmount',
        'matched_rule' => 'setMatchedRule'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'verdict' => 'getVerdict',
        'execution_operation_id' => 'getExecutionOperationId',
        'account' => 'getAccount',
        'asset_id' => 'getAssetId',
        'amount' => 'getAmount',
        'matched_rule' => 'getMatchedRule'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const VERDICT_PASSED = 'PASSED';
    public const VERDICT_PASSED_WITH_ALERT = 'PASSED_WITH_ALERT';
    public const VERDICT_REJECTED = 'REJECTED';
    public const VERDICT_FAILED = 'FAILED';
    public const VERDICT_BYPASSED = 'BYPASSED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVerdictAllowableValues()
    {
        return [
            self::VERDICT_PASSED,
            self::VERDICT_PASSED_WITH_ALERT,
            self::VERDICT_REJECTED,
            self::VERDICT_FAILED,
            self::VERDICT_BYPASSED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('verdict', $data ?? [], null);
        $this->setIfExists('execution_operation_id', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('asset_id', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('matched_rule', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['verdict'] === null) {
            $invalidProperties[] = "'verdict' can't be null";
        }
        $allowedValues = $this->getVerdictAllowableValues();
        if (!is_null($this->container['verdict']) && !in_array($this->container['verdict'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'verdict', must be one of '%s'",
                $this->container['verdict'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['execution_operation_id'] === null) {
            $invalidProperties[] = "'execution_operation_id' can't be null";
        }
        if ($this->container['account'] === null) {
            $invalidProperties[] = "'account' can't be null";
        }
        if ($this->container['asset_id'] === null) {
            $invalidProperties[] = "'asset_id' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets verdict
     *
     * @return string
     */
    public function getVerdict()
    {
        return $this->container['verdict'];
    }

    /**
     * Sets verdict
     *
     * @param string $verdict verdict
     *
     * @return self
     */
    public function setVerdict($verdict)
    {
        if (is_null($verdict)) {
            throw new \InvalidArgumentException('non-nullable verdict cannot be null');
        }
        $allowedValues = $this->getVerdictAllowableValues();
        if (!in_array($verdict, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'verdict', must be one of '%s'",
                    $verdict,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['verdict'] = $verdict;

        return $this;
    }

    /**
     * Gets execution_operation_id
     *
     * @return string
     */
    public function getExecutionOperationId()
    {
        return $this->container['execution_operation_id'];
    }

    /**
     * Sets execution_operation_id
     *
     * @param string $execution_operation_id execution_operation_id
     *
     * @return self
     */
    public function setExecutionOperationId($execution_operation_id)
    {
        if (is_null($execution_operation_id)) {
            throw new \InvalidArgumentException('non-nullable execution_operation_id cannot be null');
        }
        $this->container['execution_operation_id'] = $execution_operation_id;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \DeveloperayoFireblocksLaravel\Model\Destination
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \DeveloperayoFireblocksLaravel\Model\Destination $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string $asset_id asset_id
     *
     * @return self
     */
    public function setAssetId($asset_id)
    {
        if (is_null($asset_id)) {
            throw new \InvalidArgumentException('non-nullable asset_id cannot be null');
        }
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets matched_rule
     *
     * @return \DeveloperayoFireblocksLaravel\Model\ScreeningVerdictMatchedRule|null
     */
    public function getMatchedRule()
    {
        return $this->container['matched_rule'];
    }

    /**
     * Sets matched_rule
     *
     * @param \DeveloperayoFireblocksLaravel\Model\ScreeningVerdictMatchedRule|null $matched_rule matched_rule
     *
     * @return self
     */
    public function setMatchedRule($matched_rule)
    {
        if (is_null($matched_rule)) {
            throw new \InvalidArgumentException('non-nullable matched_rule cannot be null');
        }
        $this->container['matched_rule'] = $matched_rule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


