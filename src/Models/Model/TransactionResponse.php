<?php
/**
 * TransactionResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * TransactionResponse Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'external_tx_id' => 'string',
        'status' => 'string',
        'sub_status' => 'string',
        'tx_hash' => 'string',
        'operation' => '\DeveloperayoFireblocksLaravel\Model\GetTransactionOperation',
        'note' => 'string',
        'asset_id' => 'string',
        'source' => '\DeveloperayoFireblocksLaravel\Model\SourceTransferPeerPathResponse',
        'source_address' => 'string',
        'tag' => 'string',
        'destination' => '\DeveloperayoFireblocksLaravel\Model\DestinationTransferPeerPathResponse',
        'destinations' => '\DeveloperayoFireblocksLaravel\Model\TransactionResponseDestination[]',
        'destination_address' => 'string',
        'destination_address_description' => 'string',
        'destination_tag' => 'string',
        'contract_call_decoded_data' => '\DeveloperayoFireblocksLaravel\Model\TransactionResponseContractCallDecodedData',
        'amount_info' => '\DeveloperayoFireblocksLaravel\Model\AmountInfo',
        'treat_as_gross_amount' => 'bool',
        'fee_info' => '\DeveloperayoFireblocksLaravel\Model\FeeInfo',
        'fee_currency' => 'string',
        'network_records' => '\DeveloperayoFireblocksLaravel\Model\NetworkRecord[]',
        'created_at' => 'float',
        'last_updated' => 'float',
        'created_by' => 'string',
        'signed_by' => 'string[]',
        'rejected_by' => 'string',
        'authorization_info' => '\DeveloperayoFireblocksLaravel\Model\AuthorizationInfo',
        'exchange_tx_id' => 'string',
        'customer_ref_id' => 'string',
        'aml_screening_result' => '\DeveloperayoFireblocksLaravel\Model\AmlScreeningResult',
        'extra_parameters' => '\DeveloperayoFireblocksLaravel\Model\ExtraParameters',
        'signed_messages' => '\DeveloperayoFireblocksLaravel\Model\SignedMessage[]',
        'num_of_confirmations' => 'float',
        'block_info' => '\DeveloperayoFireblocksLaravel\Model\BlockInfo',
        'index' => 'float',
        'reward_info' => '\DeveloperayoFireblocksLaravel\Model\RewardInfo',
        'system_messages' => '\DeveloperayoFireblocksLaravel\Model\SystemMessageInfo',
        'address_type' => 'string',
        'requested_amount' => 'float',
        'amount' => 'float',
        'net_amount' => 'float',
        'amount_usd' => 'float',
        'service_fee' => 'float',
        'fee' => 'float',
        'network_fee' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'external_tx_id' => null,
        'status' => null,
        'sub_status' => null,
        'tx_hash' => null,
        'operation' => null,
        'note' => null,
        'asset_id' => null,
        'source' => null,
        'source_address' => null,
        'tag' => null,
        'destination' => null,
        'destinations' => null,
        'destination_address' => null,
        'destination_address_description' => null,
        'destination_tag' => null,
        'contract_call_decoded_data' => null,
        'amount_info' => null,
        'treat_as_gross_amount' => null,
        'fee_info' => null,
        'fee_currency' => null,
        'network_records' => null,
        'created_at' => null,
        'last_updated' => null,
        'created_by' => null,
        'signed_by' => null,
        'rejected_by' => null,
        'authorization_info' => null,
        'exchange_tx_id' => null,
        'customer_ref_id' => null,
        'aml_screening_result' => null,
        'extra_parameters' => null,
        'signed_messages' => null,
        'num_of_confirmations' => null,
        'block_info' => null,
        'index' => null,
        'reward_info' => null,
        'system_messages' => null,
        'address_type' => null,
        'requested_amount' => null,
        'amount' => null,
        'net_amount' => null,
        'amount_usd' => null,
        'service_fee' => null,
        'fee' => null,
        'network_fee' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'external_tx_id' => false,
        'status' => false,
        'sub_status' => false,
        'tx_hash' => false,
        'operation' => false,
        'note' => false,
        'asset_id' => false,
        'source' => false,
        'source_address' => false,
        'tag' => false,
        'destination' => false,
        'destinations' => false,
        'destination_address' => false,
        'destination_address_description' => false,
        'destination_tag' => false,
        'contract_call_decoded_data' => false,
        'amount_info' => false,
        'treat_as_gross_amount' => false,
        'fee_info' => false,
        'fee_currency' => false,
        'network_records' => false,
        'created_at' => false,
        'last_updated' => false,
        'created_by' => false,
        'signed_by' => false,
        'rejected_by' => false,
        'authorization_info' => false,
        'exchange_tx_id' => false,
        'customer_ref_id' => false,
        'aml_screening_result' => false,
        'extra_parameters' => false,
        'signed_messages' => false,
        'num_of_confirmations' => false,
        'block_info' => false,
        'index' => false,
        'reward_info' => false,
        'system_messages' => false,
        'address_type' => false,
        'requested_amount' => false,
        'amount' => false,
        'net_amount' => false,
        'amount_usd' => true,
        'service_fee' => false,
        'fee' => false,
        'network_fee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'external_tx_id' => 'externalTxId',
        'status' => 'status',
        'sub_status' => 'subStatus',
        'tx_hash' => 'txHash',
        'operation' => 'operation',
        'note' => 'note',
        'asset_id' => 'assetId',
        'source' => 'source',
        'source_address' => 'sourceAddress',
        'tag' => 'tag',
        'destination' => 'destination',
        'destinations' => 'destinations',
        'destination_address' => 'destinationAddress',
        'destination_address_description' => 'destinationAddressDescription',
        'destination_tag' => 'destinationTag',
        'contract_call_decoded_data' => 'contractCallDecodedData',
        'amount_info' => 'amountInfo',
        'treat_as_gross_amount' => 'treatAsGrossAmount',
        'fee_info' => 'feeInfo',
        'fee_currency' => 'feeCurrency',
        'network_records' => 'networkRecords',
        'created_at' => 'createdAt',
        'last_updated' => 'lastUpdated',
        'created_by' => 'createdBy',
        'signed_by' => 'signedBy',
        'rejected_by' => 'rejectedBy',
        'authorization_info' => 'authorizationInfo',
        'exchange_tx_id' => 'exchangeTxId',
        'customer_ref_id' => 'customerRefId',
        'aml_screening_result' => 'amlScreeningResult',
        'extra_parameters' => 'extraParameters',
        'signed_messages' => 'signedMessages',
        'num_of_confirmations' => 'numOfConfirmations',
        'block_info' => 'blockInfo',
        'index' => 'index',
        'reward_info' => 'rewardInfo',
        'system_messages' => 'systemMessages',
        'address_type' => 'addressType',
        'requested_amount' => 'requestedAmount',
        'amount' => 'amount',
        'net_amount' => 'netAmount',
        'amount_usd' => 'amountUSD',
        'service_fee' => 'serviceFee',
        'fee' => 'fee',
        'network_fee' => 'networkFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'external_tx_id' => 'setExternalTxId',
        'status' => 'setStatus',
        'sub_status' => 'setSubStatus',
        'tx_hash' => 'setTxHash',
        'operation' => 'setOperation',
        'note' => 'setNote',
        'asset_id' => 'setAssetId',
        'source' => 'setSource',
        'source_address' => 'setSourceAddress',
        'tag' => 'setTag',
        'destination' => 'setDestination',
        'destinations' => 'setDestinations',
        'destination_address' => 'setDestinationAddress',
        'destination_address_description' => 'setDestinationAddressDescription',
        'destination_tag' => 'setDestinationTag',
        'contract_call_decoded_data' => 'setContractCallDecodedData',
        'amount_info' => 'setAmountInfo',
        'treat_as_gross_amount' => 'setTreatAsGrossAmount',
        'fee_info' => 'setFeeInfo',
        'fee_currency' => 'setFeeCurrency',
        'network_records' => 'setNetworkRecords',
        'created_at' => 'setCreatedAt',
        'last_updated' => 'setLastUpdated',
        'created_by' => 'setCreatedBy',
        'signed_by' => 'setSignedBy',
        'rejected_by' => 'setRejectedBy',
        'authorization_info' => 'setAuthorizationInfo',
        'exchange_tx_id' => 'setExchangeTxId',
        'customer_ref_id' => 'setCustomerRefId',
        'aml_screening_result' => 'setAmlScreeningResult',
        'extra_parameters' => 'setExtraParameters',
        'signed_messages' => 'setSignedMessages',
        'num_of_confirmations' => 'setNumOfConfirmations',
        'block_info' => 'setBlockInfo',
        'index' => 'setIndex',
        'reward_info' => 'setRewardInfo',
        'system_messages' => 'setSystemMessages',
        'address_type' => 'setAddressType',
        'requested_amount' => 'setRequestedAmount',
        'amount' => 'setAmount',
        'net_amount' => 'setNetAmount',
        'amount_usd' => 'setAmountUsd',
        'service_fee' => 'setServiceFee',
        'fee' => 'setFee',
        'network_fee' => 'setNetworkFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'external_tx_id' => 'getExternalTxId',
        'status' => 'getStatus',
        'sub_status' => 'getSubStatus',
        'tx_hash' => 'getTxHash',
        'operation' => 'getOperation',
        'note' => 'getNote',
        'asset_id' => 'getAssetId',
        'source' => 'getSource',
        'source_address' => 'getSourceAddress',
        'tag' => 'getTag',
        'destination' => 'getDestination',
        'destinations' => 'getDestinations',
        'destination_address' => 'getDestinationAddress',
        'destination_address_description' => 'getDestinationAddressDescription',
        'destination_tag' => 'getDestinationTag',
        'contract_call_decoded_data' => 'getContractCallDecodedData',
        'amount_info' => 'getAmountInfo',
        'treat_as_gross_amount' => 'getTreatAsGrossAmount',
        'fee_info' => 'getFeeInfo',
        'fee_currency' => 'getFeeCurrency',
        'network_records' => 'getNetworkRecords',
        'created_at' => 'getCreatedAt',
        'last_updated' => 'getLastUpdated',
        'created_by' => 'getCreatedBy',
        'signed_by' => 'getSignedBy',
        'rejected_by' => 'getRejectedBy',
        'authorization_info' => 'getAuthorizationInfo',
        'exchange_tx_id' => 'getExchangeTxId',
        'customer_ref_id' => 'getCustomerRefId',
        'aml_screening_result' => 'getAmlScreeningResult',
        'extra_parameters' => 'getExtraParameters',
        'signed_messages' => 'getSignedMessages',
        'num_of_confirmations' => 'getNumOfConfirmations',
        'block_info' => 'getBlockInfo',
        'index' => 'getIndex',
        'reward_info' => 'getRewardInfo',
        'system_messages' => 'getSystemMessages',
        'address_type' => 'getAddressType',
        'requested_amount' => 'getRequestedAmount',
        'amount' => 'getAmount',
        'net_amount' => 'getNetAmount',
        'amount_usd' => 'getAmountUsd',
        'service_fee' => 'getServiceFee',
        'fee' => 'getFee',
        'network_fee' => 'getNetworkFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ADDRESS_TYPE_WHITELISTED = 'WHITELISTED';
    public const ADDRESS_TYPE_ONE_TIME = 'ONE_TIME';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressTypeAllowableValues()
    {
        return [
            self::ADDRESS_TYPE_WHITELISTED,
            self::ADDRESS_TYPE_ONE_TIME,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('external_tx_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('sub_status', $data ?? [], null);
        $this->setIfExists('tx_hash', $data ?? [], null);
        $this->setIfExists('operation', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('asset_id', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('source_address', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('destinations', $data ?? [], null);
        $this->setIfExists('destination_address', $data ?? [], null);
        $this->setIfExists('destination_address_description', $data ?? [], null);
        $this->setIfExists('destination_tag', $data ?? [], null);
        $this->setIfExists('contract_call_decoded_data', $data ?? [], null);
        $this->setIfExists('amount_info', $data ?? [], null);
        $this->setIfExists('treat_as_gross_amount', $data ?? [], null);
        $this->setIfExists('fee_info', $data ?? [], null);
        $this->setIfExists('fee_currency', $data ?? [], null);
        $this->setIfExists('network_records', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('signed_by', $data ?? [], null);
        $this->setIfExists('rejected_by', $data ?? [], null);
        $this->setIfExists('authorization_info', $data ?? [], null);
        $this->setIfExists('exchange_tx_id', $data ?? [], null);
        $this->setIfExists('customer_ref_id', $data ?? [], null);
        $this->setIfExists('aml_screening_result', $data ?? [], null);
        $this->setIfExists('extra_parameters', $data ?? [], null);
        $this->setIfExists('signed_messages', $data ?? [], null);
        $this->setIfExists('num_of_confirmations', $data ?? [], null);
        $this->setIfExists('block_info', $data ?? [], null);
        $this->setIfExists('index', $data ?? [], null);
        $this->setIfExists('reward_info', $data ?? [], null);
        $this->setIfExists('system_messages', $data ?? [], null);
        $this->setIfExists('address_type', $data ?? [], null);
        $this->setIfExists('requested_amount', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('amount_usd', $data ?? [], null);
        $this->setIfExists('service_fee', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
        $this->setIfExists('network_fee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!is_null($this->container['address_type']) && !in_array($this->container['address_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'address_type', must be one of '%s'",
                $this->container['address_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID of the transaction.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets external_tx_id
     *
     * @return string|null
     */
    public function getExternalTxId()
    {
        return $this->container['external_tx_id'];
    }

    /**
     * Sets external_tx_id
     *
     * @param string|null $external_tx_id Unique transaction ID provided by the user. Fireblocks highly recommends setting an `externalTxId` for every transaction created, to avoid submitting the same transaction twice.
     *
     * @return self
     */
    public function setExternalTxId($external_tx_id)
    {
        if (is_null($external_tx_id)) {
            throw new \InvalidArgumentException('non-nullable external_tx_id cannot be null');
        }
        $this->container['external_tx_id'] = $external_tx_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The primary status of the transaction. For details, see [Primary transaction statuses](https://developers.fireblocks.com/reference/primary-transaction-statuses).
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub_status
     *
     * @return string|null
     */
    public function getSubStatus()
    {
        return $this->container['sub_status'];
    }

    /**
     * Sets sub_status
     *
     * @param string|null $sub_status See [Transaction substatuses](https://developers.fireblocks.com/reference/transaction-substatuses) for the list of transaction sub statuses.
     *
     * @return self
     */
    public function setSubStatus($sub_status)
    {
        if (is_null($sub_status)) {
            throw new \InvalidArgumentException('non-nullable sub_status cannot be null');
        }
        $this->container['sub_status'] = $sub_status;

        return $this;
    }

    /**
     * Gets tx_hash
     *
     * @return string|null
     */
    public function getTxHash()
    {
        return $this->container['tx_hash'];
    }

    /**
     * Sets tx_hash
     *
     * @param string|null $tx_hash The hash of the transaction on the blockchain.  * This parameter exists if at least one of the following conditions is met:       1. The transaction’s source type is `UNKNOWN`, `WHITELISTED_ADDRESS`, `NETWORK_CONNECTION`, `ONE_TIME_ADDRESS`, `FIAT_ACCOUNT` or `GAS_STATION`.       2. The transaction’s source type is `VAULT` and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these statuses prior to changing to `FAILED` or `REJECTED`. In some instances, transactions in status `BROADCASTING` will include the txHash as well.       3. The transaction’s source type is `EXCHANGE_ACCOUNT` and the transaction’s destination type is `VAULT`, and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these status prior to changing to `FAILED`.     * In addition, the following conditions must be met:      1. The asset is a crypto asset (not fiat).      2. The transaction operation is not RAW or `TYPED_MESSAGE`.
     *
     * @return self
     */
    public function setTxHash($tx_hash)
    {
        if (is_null($tx_hash)) {
            throw new \InvalidArgumentException('non-nullable tx_hash cannot be null');
        }
        $this->container['tx_hash'] = $tx_hash;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return \DeveloperayoFireblocksLaravel\Model\GetTransactionOperation|null
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param \DeveloperayoFireblocksLaravel\Model\GetTransactionOperation|null $operation operation
     *
     * @return self
     */
    public function setOperation($operation)
    {
        if (is_null($operation)) {
            throw new \InvalidArgumentException('non-nullable operation cannot be null');
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Custom note, not sent to the blockchain, that describes the transaction at your Fireblocks workspace.
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string|null
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string|null $asset_id The ID of the asset to transfer, for `TRANSFER`, `MINT`, `BURN`, `ENABLE_ASSET`,`STAKE` ,`UNSTAKE` or `WITHDRAW` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)
     *
     * @return self
     */
    public function setAssetId($asset_id)
    {
        if (is_null($asset_id)) {
            throw new \InvalidArgumentException('non-nullable asset_id cannot be null');
        }
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \DeveloperayoFireblocksLaravel\Model\SourceTransferPeerPathResponse|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \DeveloperayoFireblocksLaravel\Model\SourceTransferPeerPathResponse|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_address
     *
     * @return string|null
     */
    public function getSourceAddress()
    {
        return $this->container['source_address'];
    }

    /**
     * Sets source_address
     *
     * @param string|null $source_address For account based assets only, the source address of the transaction. **Note:** If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the source address. In any other case, this parameter will be empty.
     *
     * @return self
     */
    public function setSourceAddress($source_address)
    {
        if (is_null($source_address)) {
            throw new \InvalidArgumentException('non-nullable source_address cannot be null');
        }
        $this->container['source_address'] = $source_address;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag Source address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group).
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \DeveloperayoFireblocksLaravel\Model\DestinationTransferPeerPathResponse|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \DeveloperayoFireblocksLaravel\Model\DestinationTransferPeerPathResponse|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TransactionResponseDestination[]|null
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TransactionResponseDestination[]|null $destinations The transaction’s destinations. **Note:** In case the transaction is sent to a single destination, the `destination` parameter is used instead of this.
     *
     * @return self
     */
    public function setDestinations($destinations)
    {
        if (is_null($destinations)) {
            throw new \InvalidArgumentException('non-nullable destinations cannot be null');
        }
        $this->container['destinations'] = $destinations;

        return $this;
    }

    /**
     * Gets destination_address
     *
     * @return string|null
     */
    public function getDestinationAddress()
    {
        return $this->container['destination_address'];
    }

    /**
     * Sets destination_address
     *
     * @param string|null $destination_address Address where the asset were transferred. Notes:   - For [Multi destination transactions](https://support.fireblocks.io/hc/en-us/articles/360018447980-Multi-destination-transactions), this parameter will be empty. In this case, you should refer to the destinations field.   - If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the destination address. In any other case, this parameter will be empty.
     *
     * @return self
     */
    public function setDestinationAddress($destination_address)
    {
        if (is_null($destination_address)) {
            throw new \InvalidArgumentException('non-nullable destination_address cannot be null');
        }
        $this->container['destination_address'] = $destination_address;

        return $this;
    }

    /**
     * Gets destination_address_description
     *
     * @return string|null
     */
    public function getDestinationAddressDescription()
    {
        return $this->container['destination_address_description'];
    }

    /**
     * Sets destination_address_description
     *
     * @param string|null $destination_address_description Description of the address.
     *
     * @return self
     */
    public function setDestinationAddressDescription($destination_address_description)
    {
        if (is_null($destination_address_description)) {
            throw new \InvalidArgumentException('non-nullable destination_address_description cannot be null');
        }
        $this->container['destination_address_description'] = $destination_address_description;

        return $this;
    }

    /**
     * Gets destination_tag
     *
     * @return string|null
     */
    public function getDestinationTag()
    {
        return $this->container['destination_tag'];
    }

    /**
     * Sets destination_tag
     *
     * @param string|null $destination_tag Destination address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group).
     *
     * @return self
     */
    public function setDestinationTag($destination_tag)
    {
        if (is_null($destination_tag)) {
            throw new \InvalidArgumentException('non-nullable destination_tag cannot be null');
        }
        $this->container['destination_tag'] = $destination_tag;

        return $this;
    }

    /**
     * Gets contract_call_decoded_data
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TransactionResponseContractCallDecodedData|null
     */
    public function getContractCallDecodedData()
    {
        return $this->container['contract_call_decoded_data'];
    }

    /**
     * Sets contract_call_decoded_data
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TransactionResponseContractCallDecodedData|null $contract_call_decoded_data contract_call_decoded_data
     *
     * @return self
     */
    public function setContractCallDecodedData($contract_call_decoded_data)
    {
        if (is_null($contract_call_decoded_data)) {
            throw new \InvalidArgumentException('non-nullable contract_call_decoded_data cannot be null');
        }
        $this->container['contract_call_decoded_data'] = $contract_call_decoded_data;

        return $this;
    }

    /**
     * Gets amount_info
     *
     * @return \DeveloperayoFireblocksLaravel\Model\AmountInfo|null
     */
    public function getAmountInfo()
    {
        return $this->container['amount_info'];
    }

    /**
     * Sets amount_info
     *
     * @param \DeveloperayoFireblocksLaravel\Model\AmountInfo|null $amount_info amount_info
     *
     * @return self
     */
    public function setAmountInfo($amount_info)
    {
        if (is_null($amount_info)) {
            throw new \InvalidArgumentException('non-nullable amount_info cannot be null');
        }
        $this->container['amount_info'] = $amount_info;

        return $this;
    }

    /**
     * Gets treat_as_gross_amount
     *
     * @return bool|null
     */
    public function getTreatAsGrossAmount()
    {
        return $this->container['treat_as_gross_amount'];
    }

    /**
     * Sets treat_as_gross_amount
     *
     * @param bool|null $treat_as_gross_amount For transactions initiated via this Fireblocks workspace, when set to `true`, the fee is deducted from the requested amount.  **Note**: This parameter can only be considered if a transaction's asset is a base asset, such as ETH or MATIC. If the asset can't be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account.
     *
     * @return self
     */
    public function setTreatAsGrossAmount($treat_as_gross_amount)
    {
        if (is_null($treat_as_gross_amount)) {
            throw new \InvalidArgumentException('non-nullable treat_as_gross_amount cannot be null');
        }
        $this->container['treat_as_gross_amount'] = $treat_as_gross_amount;

        return $this;
    }

    /**
     * Gets fee_info
     *
     * @return \DeveloperayoFireblocksLaravel\Model\FeeInfo|null
     */
    public function getFeeInfo()
    {
        return $this->container['fee_info'];
    }

    /**
     * Sets fee_info
     *
     * @param \DeveloperayoFireblocksLaravel\Model\FeeInfo|null $fee_info fee_info
     *
     * @return self
     */
    public function setFeeInfo($fee_info)
    {
        if (is_null($fee_info)) {
            throw new \InvalidArgumentException('non-nullable fee_info cannot be null');
        }
        $this->container['fee_info'] = $fee_info;

        return $this;
    }

    /**
     * Gets fee_currency
     *
     * @return string|null
     */
    public function getFeeCurrency()
    {
        return $this->container['fee_currency'];
    }

    /**
     * Sets fee_currency
     *
     * @param string|null $fee_currency The asset which was withdrawn to pay the transaction fee, for example ETH for EVM-based blockchains, BTC for Tether Omni.
     *
     * @return self
     */
    public function setFeeCurrency($fee_currency)
    {
        if (is_null($fee_currency)) {
            throw new \InvalidArgumentException('non-nullable fee_currency cannot be null');
        }
        $this->container['fee_currency'] = $fee_currency;

        return $this;
    }

    /**
     * Gets network_records
     *
     * @return \DeveloperayoFireblocksLaravel\Model\NetworkRecord[]|null
     */
    public function getNetworkRecords()
    {
        return $this->container['network_records'];
    }

    /**
     * Sets network_records
     *
     * @param \DeveloperayoFireblocksLaravel\Model\NetworkRecord[]|null $network_records In case a single transaction resulted with multiple transfers, for example a result of a contract call, then this parameter specifies each transfer that took place on the blockchain. In case of a single transfer transaction, this parameter is empty.
     *
     * @return self
     */
    public function setNetworkRecords($network_records)
    {
        if (is_null($network_records)) {
            throw new \InvalidArgumentException('non-nullable network_records cannot be null');
        }
        $this->container['network_records'] = $network_records;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return float|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param float|null $created_at The transaction’s creation date and time, in unix timestamp.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return float|null
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param float|null $last_updated The transaction’s last update date and time, in unix timestamp.
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by User ID of the initiator of the transaction.
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets signed_by
     *
     * @return string[]|null
     */
    public function getSignedBy()
    {
        return $this->container['signed_by'];
    }

    /**
     * Sets signed_by
     *
     * @param string[]|null $signed_by User ID’s of the signers of the transaction.
     *
     * @return self
     */
    public function setSignedBy($signed_by)
    {
        if (is_null($signed_by)) {
            throw new \InvalidArgumentException('non-nullable signed_by cannot be null');
        }
        $this->container['signed_by'] = $signed_by;

        return $this;
    }

    /**
     * Gets rejected_by
     *
     * @return string|null
     */
    public function getRejectedBy()
    {
        return $this->container['rejected_by'];
    }

    /**
     * Sets rejected_by
     *
     * @param string|null $rejected_by User ID of the user that rejected the transaction (in case it was rejected).
     *
     * @return self
     */
    public function setRejectedBy($rejected_by)
    {
        if (is_null($rejected_by)) {
            throw new \InvalidArgumentException('non-nullable rejected_by cannot be null');
        }
        $this->container['rejected_by'] = $rejected_by;

        return $this;
    }

    /**
     * Gets authorization_info
     *
     * @return \DeveloperayoFireblocksLaravel\Model\AuthorizationInfo|null
     */
    public function getAuthorizationInfo()
    {
        return $this->container['authorization_info'];
    }

    /**
     * Sets authorization_info
     *
     * @param \DeveloperayoFireblocksLaravel\Model\AuthorizationInfo|null $authorization_info authorization_info
     *
     * @return self
     */
    public function setAuthorizationInfo($authorization_info)
    {
        if (is_null($authorization_info)) {
            throw new \InvalidArgumentException('non-nullable authorization_info cannot be null');
        }
        $this->container['authorization_info'] = $authorization_info;

        return $this;
    }

    /**
     * Gets exchange_tx_id
     *
     * @return string|null
     */
    public function getExchangeTxId()
    {
        return $this->container['exchange_tx_id'];
    }

    /**
     * Sets exchange_tx_id
     *
     * @param string|null $exchange_tx_id If the transaction originated from an exchange, this is the ID of this transaction at the exchange.
     *
     * @return self
     */
    public function setExchangeTxId($exchange_tx_id)
    {
        if (is_null($exchange_tx_id)) {
            throw new \InvalidArgumentException('non-nullable exchange_tx_id cannot be null');
        }
        $this->container['exchange_tx_id'] = $exchange_tx_id;

        return $this;
    }

    /**
     * Gets customer_ref_id
     *
     * @return string|null
     */
    public function getCustomerRefId()
    {
        return $this->container['customer_ref_id'];
    }

    /**
     * Sets customer_ref_id
     *
     * @param string|null $customer_ref_id The ID for AML providers to associate the owner of funds with transactions.
     *
     * @return self
     */
    public function setCustomerRefId($customer_ref_id)
    {
        if (is_null($customer_ref_id)) {
            throw new \InvalidArgumentException('non-nullable customer_ref_id cannot be null');
        }
        $this->container['customer_ref_id'] = $customer_ref_id;

        return $this;
    }

    /**
     * Gets aml_screening_result
     *
     * @return \DeveloperayoFireblocksLaravel\Model\AmlScreeningResult|null
     */
    public function getAmlScreeningResult()
    {
        return $this->container['aml_screening_result'];
    }

    /**
     * Sets aml_screening_result
     *
     * @param \DeveloperayoFireblocksLaravel\Model\AmlScreeningResult|null $aml_screening_result aml_screening_result
     *
     * @return self
     */
    public function setAmlScreeningResult($aml_screening_result)
    {
        if (is_null($aml_screening_result)) {
            throw new \InvalidArgumentException('non-nullable aml_screening_result cannot be null');
        }
        $this->container['aml_screening_result'] = $aml_screening_result;

        return $this;
    }

    /**
     * Gets extra_parameters
     *
     * @return \DeveloperayoFireblocksLaravel\Model\ExtraParameters|null
     */
    public function getExtraParameters()
    {
        return $this->container['extra_parameters'];
    }

    /**
     * Sets extra_parameters
     *
     * @param \DeveloperayoFireblocksLaravel\Model\ExtraParameters|null $extra_parameters extra_parameters
     *
     * @return self
     */
    public function setExtraParameters($extra_parameters)
    {
        if (is_null($extra_parameters)) {
            throw new \InvalidArgumentException('non-nullable extra_parameters cannot be null');
        }
        $this->container['extra_parameters'] = $extra_parameters;

        return $this;
    }

    /**
     * Gets signed_messages
     *
     * @return \DeveloperayoFireblocksLaravel\Model\SignedMessage[]|null
     */
    public function getSignedMessages()
    {
        return $this->container['signed_messages'];
    }

    /**
     * Sets signed_messages
     *
     * @param \DeveloperayoFireblocksLaravel\Model\SignedMessage[]|null $signed_messages signed_messages
     *
     * @return self
     */
    public function setSignedMessages($signed_messages)
    {
        if (is_null($signed_messages)) {
            throw new \InvalidArgumentException('non-nullable signed_messages cannot be null');
        }
        $this->container['signed_messages'] = $signed_messages;

        return $this;
    }

    /**
     * Gets num_of_confirmations
     *
     * @return float|null
     */
    public function getNumOfConfirmations()
    {
        return $this->container['num_of_confirmations'];
    }

    /**
     * Sets num_of_confirmations
     *
     * @param float|null $num_of_confirmations The number of confirmations of the transaction. The number will increase until the transaction will be considered completed according to the confirmation policy.
     *
     * @return self
     */
    public function setNumOfConfirmations($num_of_confirmations)
    {
        if (is_null($num_of_confirmations)) {
            throw new \InvalidArgumentException('non-nullable num_of_confirmations cannot be null');
        }
        $this->container['num_of_confirmations'] = $num_of_confirmations;

        return $this;
    }

    /**
     * Gets block_info
     *
     * @return \DeveloperayoFireblocksLaravel\Model\BlockInfo|null
     */
    public function getBlockInfo()
    {
        return $this->container['block_info'];
    }

    /**
     * Sets block_info
     *
     * @param \DeveloperayoFireblocksLaravel\Model\BlockInfo|null $block_info block_info
     *
     * @return self
     */
    public function setBlockInfo($block_info)
    {
        if (is_null($block_info)) {
            throw new \InvalidArgumentException('non-nullable block_info cannot be null');
        }
        $this->container['block_info'] = $block_info;

        return $this;
    }

    /**
     * Gets index
     *
     * @return float|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param float|null $index For UTXO based assets this is the vOut, for Ethereum based, this is the index of the event of the contract call.  **Note:** This field is not returned if a transaction uses the `destinations` object with more than one value.
     *
     * @return self
     */
    public function setIndex($index)
    {
        if (is_null($index)) {
            throw new \InvalidArgumentException('non-nullable index cannot be null');
        }
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets reward_info
     *
     * @return \DeveloperayoFireblocksLaravel\Model\RewardInfo|null
     */
    public function getRewardInfo()
    {
        return $this->container['reward_info'];
    }

    /**
     * Sets reward_info
     *
     * @param \DeveloperayoFireblocksLaravel\Model\RewardInfo|null $reward_info reward_info
     *
     * @return self
     */
    public function setRewardInfo($reward_info)
    {
        if (is_null($reward_info)) {
            throw new \InvalidArgumentException('non-nullable reward_info cannot be null');
        }
        $this->container['reward_info'] = $reward_info;

        return $this;
    }

    /**
     * Gets system_messages
     *
     * @return \DeveloperayoFireblocksLaravel\Model\SystemMessageInfo|null
     */
    public function getSystemMessages()
    {
        return $this->container['system_messages'];
    }

    /**
     * Sets system_messages
     *
     * @param \DeveloperayoFireblocksLaravel\Model\SystemMessageInfo|null $system_messages system_messages
     *
     * @return self
     */
    public function setSystemMessages($system_messages)
    {
        if (is_null($system_messages)) {
            throw new \InvalidArgumentException('non-nullable system_messages cannot be null');
        }
        $this->container['system_messages'] = $system_messages;

        return $this;
    }

    /**
     * Gets address_type
     *
     * @return string|null
     */
    public function getAddressType()
    {
        return $this->container['address_type'];
    }

    /**
     * Sets address_type
     *
     * @param string|null $address_type address_type
     *
     * @return self
     */
    public function setAddressType($address_type)
    {
        if (is_null($address_type)) {
            throw new \InvalidArgumentException('non-nullable address_type cannot be null');
        }
        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!in_array($address_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'address_type', must be one of '%s'",
                    $address_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['address_type'] = $address_type;

        return $this;
    }

    /**
     * Gets requested_amount
     *
     * @return float|null
     * @deprecated
     */
    public function getRequestedAmount()
    {
        return $this->container['requested_amount'];
    }

    /**
     * Sets requested_amount
     *
     * @param float|null $requested_amount The amount requested by the user. Deprecated - please use the `amountInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setRequestedAmount($requested_amount)
    {
        if (is_null($requested_amount)) {
            throw new \InvalidArgumentException('non-nullable requested_amount cannot be null');
        }
        $this->container['requested_amount'] = $requested_amount;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     * @deprecated
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount If the transfer is a withdrawal from an exchange, the actual amount that was requested to be transferred. Otherwise, the requested amount. Deprecated - please use the `amountInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     * @deprecated
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount The net amount of the transaction, after fee deduction. Deprecated - please use the `amountInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets amount_usd
     *
     * @return float|null
     * @deprecated
     */
    public function getAmountUsd()
    {
        return $this->container['amount_usd'];
    }

    /**
     * Sets amount_usd
     *
     * @param float|null $amount_usd The USD value of the requested amount. Deprecated - please use the `amountInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setAmountUsd($amount_usd)
    {
        if (is_null($amount_usd)) {
            array_push($this->openAPINullablesSetToNull, 'amount_usd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_usd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_usd'] = $amount_usd;

        return $this;
    }

    /**
     * Gets service_fee
     *
     * @return float|null
     * @deprecated
     */
    public function getServiceFee()
    {
        return $this->container['service_fee'];
    }

    /**
     * Sets service_fee
     *
     * @param float|null $service_fee The total fee deducted by the exchange from the actual requested amount (`serviceFee` = `amount` - `netAmount`). Deprecated - please use the `feeInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setServiceFee($service_fee)
    {
        if (is_null($service_fee)) {
            throw new \InvalidArgumentException('non-nullable service_fee cannot be null');
        }
        $this->container['service_fee'] = $service_fee;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float|null
     * @deprecated
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float|null $fee Deprecated - please use the `feeInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets network_fee
     *
     * @return float|null
     * @deprecated
     */
    public function getNetworkFee()
    {
        return $this->container['network_fee'];
    }

    /**
     * Sets network_fee
     *
     * @param float|null $network_fee The fee paid to the network. Deprecated - please use the `feeInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setNetworkFee($network_fee)
    {
        if (is_null($network_fee)) {
            throw new \InvalidArgumentException('non-nullable network_fee cannot be null');
        }
        $this->container['network_fee'] = $network_fee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


