<?php
/**
 * DelegationDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * DelegationDto Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DelegationDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DelegationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'vault_account_id' => 'string',
        'validator_name' => 'string',
        'provider_name' => 'string',
        'chain_descriptor' => 'string',
        'amount' => 'string',
        'rewards_amount' => 'string',
        'date_created' => 'string',
        'status' => 'string',
        'related_transactions' => '\DeveloperayoFireblocksLaravel\Model\RelatedTransactionDto[]',
        'validator_address' => 'string',
        'provider_id' => 'string',
        'available_actions' => 'string[]',
        'in_progress' => 'bool',
        'in_progress_tx_id' => 'string',
        'blockchain_position_info' => '\DeveloperayoFireblocksLaravel\Model\SolanaBlockchainDataDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'vault_account_id' => null,
        'validator_name' => null,
        'provider_name' => null,
        'chain_descriptor' => null,
        'amount' => null,
        'rewards_amount' => null,
        'date_created' => null,
        'status' => null,
        'related_transactions' => null,
        'validator_address' => null,
        'provider_id' => null,
        'available_actions' => null,
        'in_progress' => null,
        'in_progress_tx_id' => null,
        'blockchain_position_info' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'vault_account_id' => false,
        'validator_name' => false,
        'provider_name' => false,
        'chain_descriptor' => false,
        'amount' => false,
        'rewards_amount' => false,
        'date_created' => false,
        'status' => false,
        'related_transactions' => false,
        'validator_address' => false,
        'provider_id' => false,
        'available_actions' => false,
        'in_progress' => false,
        'in_progress_tx_id' => false,
        'blockchain_position_info' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'vault_account_id' => 'vaultAccountId',
        'validator_name' => 'validatorName',
        'provider_name' => 'providerName',
        'chain_descriptor' => 'chainDescriptor',
        'amount' => 'amount',
        'rewards_amount' => 'rewardsAmount',
        'date_created' => 'dateCreated',
        'status' => 'status',
        'related_transactions' => 'relatedTransactions',
        'validator_address' => 'validatorAddress',
        'provider_id' => 'providerId',
        'available_actions' => 'availableActions',
        'in_progress' => 'inProgress',
        'in_progress_tx_id' => 'inProgressTxId',
        'blockchain_position_info' => 'blockchainPositionInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'vault_account_id' => 'setVaultAccountId',
        'validator_name' => 'setValidatorName',
        'provider_name' => 'setProviderName',
        'chain_descriptor' => 'setChainDescriptor',
        'amount' => 'setAmount',
        'rewards_amount' => 'setRewardsAmount',
        'date_created' => 'setDateCreated',
        'status' => 'setStatus',
        'related_transactions' => 'setRelatedTransactions',
        'validator_address' => 'setValidatorAddress',
        'provider_id' => 'setProviderId',
        'available_actions' => 'setAvailableActions',
        'in_progress' => 'setInProgress',
        'in_progress_tx_id' => 'setInProgressTxId',
        'blockchain_position_info' => 'setBlockchainPositionInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'vault_account_id' => 'getVaultAccountId',
        'validator_name' => 'getValidatorName',
        'provider_name' => 'getProviderName',
        'chain_descriptor' => 'getChainDescriptor',
        'amount' => 'getAmount',
        'rewards_amount' => 'getRewardsAmount',
        'date_created' => 'getDateCreated',
        'status' => 'getStatus',
        'related_transactions' => 'getRelatedTransactions',
        'validator_address' => 'getValidatorAddress',
        'provider_id' => 'getProviderId',
        'available_actions' => 'getAvailableActions',
        'in_progress' => 'getInProgress',
        'in_progress_tx_id' => 'getInProgressTxId',
        'blockchain_position_info' => 'getBlockchainPositionInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ERROR = 'error';
    public const STATUS_FAILED = 'failed';
    public const STATUS_CREATING = 'creating';
    public const STATUS_CANCELED = 'canceled';
    public const STATUS_PENDING = 'pending';
    public const STATUS_ACTIVATING = 'activating';
    public const STATUS_ACTIVE = 'active';
    public const STATUS_DEACTIVATING = 'deactivating';
    public const STATUS_DEACTIVATED = 'deactivated';
    public const STATUS_WITHDRAWING = 'withdrawing';
    public const STATUS_WITHDRAWN = 'withdrawn';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ERROR,
            self::STATUS_FAILED,
            self::STATUS_CREATING,
            self::STATUS_CANCELED,
            self::STATUS_PENDING,
            self::STATUS_ACTIVATING,
            self::STATUS_ACTIVE,
            self::STATUS_DEACTIVATING,
            self::STATUS_DEACTIVATED,
            self::STATUS_WITHDRAWING,
            self::STATUS_WITHDRAWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('vault_account_id', $data ?? [], null);
        $this->setIfExists('validator_name', $data ?? [], null);
        $this->setIfExists('provider_name', $data ?? [], null);
        $this->setIfExists('chain_descriptor', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('rewards_amount', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('related_transactions', $data ?? [], null);
        $this->setIfExists('validator_address', $data ?? [], null);
        $this->setIfExists('provider_id', $data ?? [], null);
        $this->setIfExists('available_actions', $data ?? [], null);
        $this->setIfExists('in_progress', $data ?? [], null);
        $this->setIfExists('in_progress_tx_id', $data ?? [], null);
        $this->setIfExists('blockchain_position_info', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['vault_account_id'] === null) {
            $invalidProperties[] = "'vault_account_id' can't be null";
        }
        if ($this->container['validator_name'] === null) {
            $invalidProperties[] = "'validator_name' can't be null";
        }
        if ($this->container['provider_name'] === null) {
            $invalidProperties[] = "'provider_name' can't be null";
        }
        if ($this->container['chain_descriptor'] === null) {
            $invalidProperties[] = "'chain_descriptor' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['rewards_amount'] === null) {
            $invalidProperties[] = "'rewards_amount' can't be null";
        }
        if ($this->container['date_created'] === null) {
            $invalidProperties[] = "'date_created' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['related_transactions'] === null) {
            $invalidProperties[] = "'related_transactions' can't be null";
        }
        if ($this->container['validator_address'] === null) {
            $invalidProperties[] = "'validator_address' can't be null";
        }
        if ($this->container['provider_id'] === null) {
            $invalidProperties[] = "'provider_id' can't be null";
        }
        if ($this->container['available_actions'] === null) {
            $invalidProperties[] = "'available_actions' can't be null";
        }
        if ($this->container['in_progress'] === null) {
            $invalidProperties[] = "'in_progress' can't be null";
        }
        if ($this->container['blockchain_position_info'] === null) {
            $invalidProperties[] = "'blockchain_position_info' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier of the staking position
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vault_account_id
     *
     * @return string
     */
    public function getVaultAccountId()
    {
        return $this->container['vault_account_id'];
    }

    /**
     * Sets vault_account_id
     *
     * @param string $vault_account_id The source vault account to stake from
     *
     * @return self
     */
    public function setVaultAccountId($vault_account_id)
    {
        if (is_null($vault_account_id)) {
            throw new \InvalidArgumentException('non-nullable vault_account_id cannot be null');
        }
        $this->container['vault_account_id'] = $vault_account_id;

        return $this;
    }

    /**
     * Gets validator_name
     *
     * @return string
     */
    public function getValidatorName()
    {
        return $this->container['validator_name'];
    }

    /**
     * Sets validator_name
     *
     * @param string $validator_name The destination validator address name
     *
     * @return self
     */
    public function setValidatorName($validator_name)
    {
        if (is_null($validator_name)) {
            throw new \InvalidArgumentException('non-nullable validator_name cannot be null');
        }
        $this->container['validator_name'] = $validator_name;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string $provider_name The destination validator provider name
     *
     * @return self
     */
    public function setProviderName($provider_name)
    {
        if (is_null($provider_name)) {
            throw new \InvalidArgumentException('non-nullable provider_name cannot be null');
        }
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets chain_descriptor
     *
     * @return string
     */
    public function getChainDescriptor()
    {
        return $this->container['chain_descriptor'];
    }

    /**
     * Sets chain_descriptor
     *
     * @param string $chain_descriptor The protocol identifier (e.g. \"ETH\"/ \"SOL\") to use
     *
     * @return self
     */
    public function setChainDescriptor($chain_descriptor)
    {
        if (is_null($chain_descriptor)) {
            throw new \InvalidArgumentException('non-nullable chain_descriptor cannot be null');
        }
        $this->container['chain_descriptor'] = $chain_descriptor;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount Amount of tokens to stake, measured in the staked asset unit.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets rewards_amount
     *
     * @return string
     */
    public function getRewardsAmount()
    {
        return $this->container['rewards_amount'];
    }

    /**
     * Sets rewards_amount
     *
     * @param string $rewards_amount The amount staked in the position, measured in the staked asset unit.
     *
     * @return self
     */
    public function setRewardsAmount($rewards_amount)
    {
        if (is_null($rewards_amount)) {
            throw new \InvalidArgumentException('non-nullable rewards_amount cannot be null');
        }
        $this->container['rewards_amount'] = $rewards_amount;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string $date_created When was the request made (ISO Date).
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets related_transactions
     *
     * @return \DeveloperayoFireblocksLaravel\Model\RelatedTransactionDto[]
     */
    public function getRelatedTransactions()
    {
        return $this->container['related_transactions'];
    }

    /**
     * Sets related_transactions
     *
     * @param \DeveloperayoFireblocksLaravel\Model\RelatedTransactionDto[] $related_transactions An array of transaction objects related to this position. Each object includes a 'txId' representing the transaction ID and a 'completed' boolean indicating if the transaction was completed.
     *
     * @return self
     */
    public function setRelatedTransactions($related_transactions)
    {
        if (is_null($related_transactions)) {
            throw new \InvalidArgumentException('non-nullable related_transactions cannot be null');
        }
        $this->container['related_transactions'] = $related_transactions;

        return $this;
    }

    /**
     * Gets validator_address
     *
     * @return string
     */
    public function getValidatorAddress()
    {
        return $this->container['validator_address'];
    }

    /**
     * Sets validator_address
     *
     * @param string $validator_address The destination address of the staking transaction.
     *
     * @return self
     */
    public function setValidatorAddress($validator_address)
    {
        if (is_null($validator_address)) {
            throw new \InvalidArgumentException('non-nullable validator_address cannot be null');
        }
        $this->container['validator_address'] = $validator_address;

        return $this;
    }

    /**
     * Gets provider_id
     *
     * @return string
     */
    public function getProviderId()
    {
        return $this->container['provider_id'];
    }

    /**
     * Sets provider_id
     *
     * @param string $provider_id The unique identifier of the staking provider
     *
     * @return self
     */
    public function setProviderId($provider_id)
    {
        if (is_null($provider_id)) {
            throw new \InvalidArgumentException('non-nullable provider_id cannot be null');
        }
        $this->container['provider_id'] = $provider_id;

        return $this;
    }

    /**
     * Gets available_actions
     *
     * @return string[]
     */
    public function getAvailableActions()
    {
        return $this->container['available_actions'];
    }

    /**
     * Sets available_actions
     *
     * @param string[] $available_actions An array of available actions that can be performed. for example, actions like \"unstake\" or \"withdraw\".
     *
     * @return self
     */
    public function setAvailableActions($available_actions)
    {
        if (is_null($available_actions)) {
            throw new \InvalidArgumentException('non-nullable available_actions cannot be null');
        }
        $this->container['available_actions'] = $available_actions;

        return $this;
    }

    /**
     * Gets in_progress
     *
     * @return bool
     */
    public function getInProgress()
    {
        return $this->container['in_progress'];
    }

    /**
     * Sets in_progress
     *
     * @param bool $in_progress Indicates whether there is an ongoing action for this position (true if ongoing, false if not).
     *
     * @return self
     */
    public function setInProgress($in_progress)
    {
        if (is_null($in_progress)) {
            throw new \InvalidArgumentException('non-nullable in_progress cannot be null');
        }
        $this->container['in_progress'] = $in_progress;

        return $this;
    }

    /**
     * Gets in_progress_tx_id
     *
     * @return string|null
     */
    public function getInProgressTxId()
    {
        return $this->container['in_progress_tx_id'];
    }

    /**
     * Sets in_progress_tx_id
     *
     * @param string|null $in_progress_tx_id The transaction ID of the ongoing request
     *
     * @return self
     */
    public function setInProgressTxId($in_progress_tx_id)
    {
        if (is_null($in_progress_tx_id)) {
            throw new \InvalidArgumentException('non-nullable in_progress_tx_id cannot be null');
        }
        $this->container['in_progress_tx_id'] = $in_progress_tx_id;

        return $this;
    }

    /**
     * Gets blockchain_position_info
     *
     * @return \DeveloperayoFireblocksLaravel\Model\SolanaBlockchainDataDto
     */
    public function getBlockchainPositionInfo()
    {
        return $this->container['blockchain_position_info'];
    }

    /**
     * Sets blockchain_position_info
     *
     * @param \DeveloperayoFireblocksLaravel\Model\SolanaBlockchainDataDto $blockchain_position_info Additional fields per blockchain - can be empty or missing if not initialized or no additional info exists. The type depends on the chainDescriptor value. For Solana (SOL), stake account address. For Ethereum (ETH), an empty object is returned as no specific data is available.
     *
     * @return self
     */
    public function setBlockchainPositionInfo($blockchain_position_info)
    {
        if (is_null($blockchain_position_info)) {
            throw new \InvalidArgumentException('non-nullable blockchain_position_info cannot be null');
        }
        $this->container['blockchain_position_info'] = $blockchain_position_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


