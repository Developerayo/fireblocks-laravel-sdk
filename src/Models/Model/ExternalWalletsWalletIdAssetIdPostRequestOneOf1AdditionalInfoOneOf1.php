<?php
/**
 * ExternalWalletsWalletIdAssetIdPostRequestOneOf1AdditionalInfoOneOf1
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * ExternalWalletsWalletIdAssetIdPostRequestOneOf1AdditionalInfoOneOf1 Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExternalWalletsWalletIdAssetIdPostRequestOneOf1AdditionalInfoOneOf1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_external_wallets__walletId___assetId__post_request_oneOf_1_additionalInfo_oneOf_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_holder_given_name' => 'string',
        'account_holder_surname' => 'string',
        'account_holder_city' => 'string',
        'account_holder_country' => 'string',
        'account_holder_address1' => 'string',
        'account_holder_address2' => 'string',
        'account_holder_district' => 'string',
        'account_holder_postal_code' => 'string',
        'aba_routing_number' => 'string',
        'aba_account_number' => 'string',
        'aba_country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_holder_given_name' => null,
        'account_holder_surname' => null,
        'account_holder_city' => null,
        'account_holder_country' => null,
        'account_holder_address1' => null,
        'account_holder_address2' => null,
        'account_holder_district' => null,
        'account_holder_postal_code' => null,
        'aba_routing_number' => null,
        'aba_account_number' => null,
        'aba_country' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_holder_given_name' => false,
        'account_holder_surname' => false,
        'account_holder_city' => false,
        'account_holder_country' => false,
        'account_holder_address1' => false,
        'account_holder_address2' => false,
        'account_holder_district' => false,
        'account_holder_postal_code' => false,
        'aba_routing_number' => false,
        'aba_account_number' => false,
        'aba_country' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_holder_given_name' => 'accountHolderGivenName',
        'account_holder_surname' => 'accountHolderSurname',
        'account_holder_city' => 'accountHolderCity',
        'account_holder_country' => 'accountHolderCountry',
        'account_holder_address1' => 'accountHolderAddress1',
        'account_holder_address2' => 'accountHolderAddress2',
        'account_holder_district' => 'accountHolderDistrict',
        'account_holder_postal_code' => 'accountHolderPostalCode',
        'aba_routing_number' => 'abaRoutingNumber',
        'aba_account_number' => 'abaAccountNumber',
        'aba_country' => 'abaCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_holder_given_name' => 'setAccountHolderGivenName',
        'account_holder_surname' => 'setAccountHolderSurname',
        'account_holder_city' => 'setAccountHolderCity',
        'account_holder_country' => 'setAccountHolderCountry',
        'account_holder_address1' => 'setAccountHolderAddress1',
        'account_holder_address2' => 'setAccountHolderAddress2',
        'account_holder_district' => 'setAccountHolderDistrict',
        'account_holder_postal_code' => 'setAccountHolderPostalCode',
        'aba_routing_number' => 'setAbaRoutingNumber',
        'aba_account_number' => 'setAbaAccountNumber',
        'aba_country' => 'setAbaCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_holder_given_name' => 'getAccountHolderGivenName',
        'account_holder_surname' => 'getAccountHolderSurname',
        'account_holder_city' => 'getAccountHolderCity',
        'account_holder_country' => 'getAccountHolderCountry',
        'account_holder_address1' => 'getAccountHolderAddress1',
        'account_holder_address2' => 'getAccountHolderAddress2',
        'account_holder_district' => 'getAccountHolderDistrict',
        'account_holder_postal_code' => 'getAccountHolderPostalCode',
        'aba_routing_number' => 'getAbaRoutingNumber',
        'aba_account_number' => 'getAbaAccountNumber',
        'aba_country' => 'getAbaCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('account_holder_given_name', $data ?? [], null);
        $this->setIfExists('account_holder_surname', $data ?? [], null);
        $this->setIfExists('account_holder_city', $data ?? [], null);
        $this->setIfExists('account_holder_country', $data ?? [], null);
        $this->setIfExists('account_holder_address1', $data ?? [], null);
        $this->setIfExists('account_holder_address2', $data ?? [], null);
        $this->setIfExists('account_holder_district', $data ?? [], null);
        $this->setIfExists('account_holder_postal_code', $data ?? [], null);
        $this->setIfExists('aba_routing_number', $data ?? [], null);
        $this->setIfExists('aba_account_number', $data ?? [], null);
        $this->setIfExists('aba_country', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_holder_given_name'] === null) {
            $invalidProperties[] = "'account_holder_given_name' can't be null";
        }
        if ($this->container['account_holder_city'] === null) {
            $invalidProperties[] = "'account_holder_city' can't be null";
        }
        if ($this->container['account_holder_country'] === null) {
            $invalidProperties[] = "'account_holder_country' can't be null";
        }
        if ($this->container['account_holder_address1'] === null) {
            $invalidProperties[] = "'account_holder_address1' can't be null";
        }
        if ($this->container['account_holder_postal_code'] === null) {
            $invalidProperties[] = "'account_holder_postal_code' can't be null";
        }
        if ($this->container['aba_routing_number'] === null) {
            $invalidProperties[] = "'aba_routing_number' can't be null";
        }
        if ($this->container['aba_account_number'] === null) {
            $invalidProperties[] = "'aba_account_number' can't be null";
        }
        if ($this->container['aba_country'] === null) {
            $invalidProperties[] = "'aba_country' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_holder_given_name
     *
     * @return string
     */
    public function getAccountHolderGivenName()
    {
        return $this->container['account_holder_given_name'];
    }

    /**
     * Sets account_holder_given_name
     *
     * @param string $account_holder_given_name account_holder_given_name
     *
     * @return self
     */
    public function setAccountHolderGivenName($account_holder_given_name)
    {
        if (is_null($account_holder_given_name)) {
            throw new \InvalidArgumentException('non-nullable account_holder_given_name cannot be null');
        }
        $this->container['account_holder_given_name'] = $account_holder_given_name;

        return $this;
    }

    /**
     * Gets account_holder_surname
     *
     * @return string|null
     */
    public function getAccountHolderSurname()
    {
        return $this->container['account_holder_surname'];
    }

    /**
     * Sets account_holder_surname
     *
     * @param string|null $account_holder_surname account_holder_surname
     *
     * @return self
     */
    public function setAccountHolderSurname($account_holder_surname)
    {
        if (is_null($account_holder_surname)) {
            throw new \InvalidArgumentException('non-nullable account_holder_surname cannot be null');
        }
        $this->container['account_holder_surname'] = $account_holder_surname;

        return $this;
    }

    /**
     * Gets account_holder_city
     *
     * @return string
     */
    public function getAccountHolderCity()
    {
        return $this->container['account_holder_city'];
    }

    /**
     * Sets account_holder_city
     *
     * @param string $account_holder_city account_holder_city
     *
     * @return self
     */
    public function setAccountHolderCity($account_holder_city)
    {
        if (is_null($account_holder_city)) {
            throw new \InvalidArgumentException('non-nullable account_holder_city cannot be null');
        }
        $this->container['account_holder_city'] = $account_holder_city;

        return $this;
    }

    /**
     * Gets account_holder_country
     *
     * @return string
     */
    public function getAccountHolderCountry()
    {
        return $this->container['account_holder_country'];
    }

    /**
     * Sets account_holder_country
     *
     * @param string $account_holder_country account_holder_country
     *
     * @return self
     */
    public function setAccountHolderCountry($account_holder_country)
    {
        if (is_null($account_holder_country)) {
            throw new \InvalidArgumentException('non-nullable account_holder_country cannot be null');
        }
        $this->container['account_holder_country'] = $account_holder_country;

        return $this;
    }

    /**
     * Gets account_holder_address1
     *
     * @return string
     */
    public function getAccountHolderAddress1()
    {
        return $this->container['account_holder_address1'];
    }

    /**
     * Sets account_holder_address1
     *
     * @param string $account_holder_address1 account_holder_address1
     *
     * @return self
     */
    public function setAccountHolderAddress1($account_holder_address1)
    {
        if (is_null($account_holder_address1)) {
            throw new \InvalidArgumentException('non-nullable account_holder_address1 cannot be null');
        }
        $this->container['account_holder_address1'] = $account_holder_address1;

        return $this;
    }

    /**
     * Gets account_holder_address2
     *
     * @return string|null
     */
    public function getAccountHolderAddress2()
    {
        return $this->container['account_holder_address2'];
    }

    /**
     * Sets account_holder_address2
     *
     * @param string|null $account_holder_address2 account_holder_address2
     *
     * @return self
     */
    public function setAccountHolderAddress2($account_holder_address2)
    {
        if (is_null($account_holder_address2)) {
            throw new \InvalidArgumentException('non-nullable account_holder_address2 cannot be null');
        }
        $this->container['account_holder_address2'] = $account_holder_address2;

        return $this;
    }

    /**
     * Gets account_holder_district
     *
     * @return string|null
     */
    public function getAccountHolderDistrict()
    {
        return $this->container['account_holder_district'];
    }

    /**
     * Sets account_holder_district
     *
     * @param string|null $account_holder_district account_holder_district
     *
     * @return self
     */
    public function setAccountHolderDistrict($account_holder_district)
    {
        if (is_null($account_holder_district)) {
            throw new \InvalidArgumentException('non-nullable account_holder_district cannot be null');
        }
        $this->container['account_holder_district'] = $account_holder_district;

        return $this;
    }

    /**
     * Gets account_holder_postal_code
     *
     * @return string
     */
    public function getAccountHolderPostalCode()
    {
        return $this->container['account_holder_postal_code'];
    }

    /**
     * Sets account_holder_postal_code
     *
     * @param string $account_holder_postal_code account_holder_postal_code
     *
     * @return self
     */
    public function setAccountHolderPostalCode($account_holder_postal_code)
    {
        if (is_null($account_holder_postal_code)) {
            throw new \InvalidArgumentException('non-nullable account_holder_postal_code cannot be null');
        }
        $this->container['account_holder_postal_code'] = $account_holder_postal_code;

        return $this;
    }

    /**
     * Gets aba_routing_number
     *
     * @return string
     */
    public function getAbaRoutingNumber()
    {
        return $this->container['aba_routing_number'];
    }

    /**
     * Sets aba_routing_number
     *
     * @param string $aba_routing_number aba_routing_number
     *
     * @return self
     */
    public function setAbaRoutingNumber($aba_routing_number)
    {
        if (is_null($aba_routing_number)) {
            throw new \InvalidArgumentException('non-nullable aba_routing_number cannot be null');
        }
        $this->container['aba_routing_number'] = $aba_routing_number;

        return $this;
    }

    /**
     * Gets aba_account_number
     *
     * @return string
     */
    public function getAbaAccountNumber()
    {
        return $this->container['aba_account_number'];
    }

    /**
     * Sets aba_account_number
     *
     * @param string $aba_account_number aba_account_number
     *
     * @return self
     */
    public function setAbaAccountNumber($aba_account_number)
    {
        if (is_null($aba_account_number)) {
            throw new \InvalidArgumentException('non-nullable aba_account_number cannot be null');
        }
        $this->container['aba_account_number'] = $aba_account_number;

        return $this;
    }

    /**
     * Gets aba_country
     *
     * @return string
     */
    public function getAbaCountry()
    {
        return $this->container['aba_country'];
    }

    /**
     * Sets aba_country
     *
     * @param string $aba_country aba_country
     *
     * @return self
     */
    public function setAbaCountry($aba_country)
    {
        if (is_null($aba_country)) {
            throw new \InvalidArgumentException('non-nullable aba_country cannot be null');
        }
        $this->container['aba_country'] = $aba_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


