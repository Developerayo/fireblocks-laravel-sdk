<?php
/**
 * TravelRuleValidateFullTransactionRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * TravelRuleValidateFullTransactionRequest Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TravelRuleValidateFullTransactionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TravelRuleValidateFullTransactionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_asset' => 'string',
        'transaction_amount' => 'string',
        'originator_did' => 'string',
        'beneficiary_did' => 'string',
        'originator_vas_pdid' => 'string',
        'beneficiary_vas_pdid' => 'string',
        'beneficiary_vas_pname' => 'string',
        'transaction_blockchain_info' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleTransactionBlockchainInfo',
        'originator' => '\DeveloperayoFireblocksLaravel\Model\TravelRulePiiIVMS',
        'beneficiary' => '\DeveloperayoFireblocksLaravel\Model\TravelRulePiiIVMS',
        'encrypted' => 'string',
        'protocol' => 'string',
        'notification_email' => 'string',
        'skip_beneficiary_data_validation' => 'bool',
        'travel_rule_behavior' => 'bool',
        'originator_proof' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleOwnershipProof',
        'beneficiary_proof' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleOwnershipProof',
        'pii' => '\DeveloperayoFireblocksLaravel\Model\TravelRulePiiIVMS'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_asset' => null,
        'transaction_amount' => null,
        'originator_did' => null,
        'beneficiary_did' => null,
        'originator_vas_pdid' => null,
        'beneficiary_vas_pdid' => null,
        'beneficiary_vas_pname' => null,
        'transaction_blockchain_info' => null,
        'originator' => null,
        'beneficiary' => null,
        'encrypted' => null,
        'protocol' => null,
        'notification_email' => null,
        'skip_beneficiary_data_validation' => null,
        'travel_rule_behavior' => null,
        'originator_proof' => null,
        'beneficiary_proof' => null,
        'pii' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transaction_asset' => false,
        'transaction_amount' => false,
        'originator_did' => false,
        'beneficiary_did' => false,
        'originator_vas_pdid' => false,
        'beneficiary_vas_pdid' => false,
        'beneficiary_vas_pname' => false,
        'transaction_blockchain_info' => false,
        'originator' => false,
        'beneficiary' => false,
        'encrypted' => false,
        'protocol' => false,
        'notification_email' => false,
        'skip_beneficiary_data_validation' => false,
        'travel_rule_behavior' => false,
        'originator_proof' => false,
        'beneficiary_proof' => false,
        'pii' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_asset' => 'transactionAsset',
        'transaction_amount' => 'transactionAmount',
        'originator_did' => 'originatorDid',
        'beneficiary_did' => 'beneficiaryDid',
        'originator_vas_pdid' => 'originatorVASPdid',
        'beneficiary_vas_pdid' => 'beneficiaryVASPdid',
        'beneficiary_vas_pname' => 'beneficiaryVASPname',
        'transaction_blockchain_info' => 'transactionBlockchainInfo',
        'originator' => 'originator',
        'beneficiary' => 'beneficiary',
        'encrypted' => 'encrypted',
        'protocol' => 'protocol',
        'notification_email' => 'notificationEmail',
        'skip_beneficiary_data_validation' => 'skipBeneficiaryDataValidation',
        'travel_rule_behavior' => 'travelRuleBehavior',
        'originator_proof' => 'originatorProof',
        'beneficiary_proof' => 'beneficiaryProof',
        'pii' => 'pii'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_asset' => 'setTransactionAsset',
        'transaction_amount' => 'setTransactionAmount',
        'originator_did' => 'setOriginatorDid',
        'beneficiary_did' => 'setBeneficiaryDid',
        'originator_vas_pdid' => 'setOriginatorVasPdid',
        'beneficiary_vas_pdid' => 'setBeneficiaryVasPdid',
        'beneficiary_vas_pname' => 'setBeneficiaryVasPname',
        'transaction_blockchain_info' => 'setTransactionBlockchainInfo',
        'originator' => 'setOriginator',
        'beneficiary' => 'setBeneficiary',
        'encrypted' => 'setEncrypted',
        'protocol' => 'setProtocol',
        'notification_email' => 'setNotificationEmail',
        'skip_beneficiary_data_validation' => 'setSkipBeneficiaryDataValidation',
        'travel_rule_behavior' => 'setTravelRuleBehavior',
        'originator_proof' => 'setOriginatorProof',
        'beneficiary_proof' => 'setBeneficiaryProof',
        'pii' => 'setPii'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_asset' => 'getTransactionAsset',
        'transaction_amount' => 'getTransactionAmount',
        'originator_did' => 'getOriginatorDid',
        'beneficiary_did' => 'getBeneficiaryDid',
        'originator_vas_pdid' => 'getOriginatorVasPdid',
        'beneficiary_vas_pdid' => 'getBeneficiaryVasPdid',
        'beneficiary_vas_pname' => 'getBeneficiaryVasPname',
        'transaction_blockchain_info' => 'getTransactionBlockchainInfo',
        'originator' => 'getOriginator',
        'beneficiary' => 'getBeneficiary',
        'encrypted' => 'getEncrypted',
        'protocol' => 'getProtocol',
        'notification_email' => 'getNotificationEmail',
        'skip_beneficiary_data_validation' => 'getSkipBeneficiaryDataValidation',
        'travel_rule_behavior' => 'getTravelRuleBehavior',
        'originator_proof' => 'getOriginatorProof',
        'beneficiary_proof' => 'getBeneficiaryProof',
        'pii' => 'getPii'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('transaction_asset', $data ?? [], null);
        $this->setIfExists('transaction_amount', $data ?? [], null);
        $this->setIfExists('originator_did', $data ?? [], null);
        $this->setIfExists('beneficiary_did', $data ?? [], null);
        $this->setIfExists('originator_vas_pdid', $data ?? [], null);
        $this->setIfExists('beneficiary_vas_pdid', $data ?? [], null);
        $this->setIfExists('beneficiary_vas_pname', $data ?? [], null);
        $this->setIfExists('transaction_blockchain_info', $data ?? [], null);
        $this->setIfExists('originator', $data ?? [], null);
        $this->setIfExists('beneficiary', $data ?? [], null);
        $this->setIfExists('encrypted', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('notification_email', $data ?? [], null);
        $this->setIfExists('skip_beneficiary_data_validation', $data ?? [], null);
        $this->setIfExists('travel_rule_behavior', $data ?? [], null);
        $this->setIfExists('originator_proof', $data ?? [], null);
        $this->setIfExists('beneficiary_proof', $data ?? [], null);
        $this->setIfExists('pii', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_asset'] === null) {
            $invalidProperties[] = "'transaction_asset' can't be null";
        }
        if ($this->container['transaction_amount'] === null) {
            $invalidProperties[] = "'transaction_amount' can't be null";
        }
        if ($this->container['originator_did'] === null) {
            $invalidProperties[] = "'originator_did' can't be null";
        }
        if ($this->container['beneficiary_did'] === null) {
            $invalidProperties[] = "'beneficiary_did' can't be null";
        }
        if ($this->container['originator_vas_pdid'] === null) {
            $invalidProperties[] = "'originator_vas_pdid' can't be null";
        }
        if ($this->container['beneficiary_vas_pdid'] === null) {
            $invalidProperties[] = "'beneficiary_vas_pdid' can't be null";
        }
        if ($this->container['beneficiary_vas_pname'] === null) {
            $invalidProperties[] = "'beneficiary_vas_pname' can't be null";
        }
        if ($this->container['transaction_blockchain_info'] === null) {
            $invalidProperties[] = "'transaction_blockchain_info' can't be null";
        }
        if ($this->container['originator'] === null) {
            $invalidProperties[] = "'originator' can't be null";
        }
        if ($this->container['beneficiary'] === null) {
            $invalidProperties[] = "'beneficiary' can't be null";
        }
        if ($this->container['encrypted'] === null) {
            $invalidProperties[] = "'encrypted' can't be null";
        }
        if ($this->container['protocol'] === null) {
            $invalidProperties[] = "'protocol' can't be null";
        }
        if ($this->container['notification_email'] === null) {
            $invalidProperties[] = "'notification_email' can't be null";
        }
        if ($this->container['skip_beneficiary_data_validation'] === null) {
            $invalidProperties[] = "'skip_beneficiary_data_validation' can't be null";
        }
        if ($this->container['travel_rule_behavior'] === null) {
            $invalidProperties[] = "'travel_rule_behavior' can't be null";
        }
        if ($this->container['originator_proof'] === null) {
            $invalidProperties[] = "'originator_proof' can't be null";
        }
        if ($this->container['beneficiary_proof'] === null) {
            $invalidProperties[] = "'beneficiary_proof' can't be null";
        }
        if ($this->container['pii'] === null) {
            $invalidProperties[] = "'pii' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_asset
     *
     * @return string
     */
    public function getTransactionAsset()
    {
        return $this->container['transaction_asset'];
    }

    /**
     * Sets transaction_asset
     *
     * @param string $transaction_asset The asset involved in the transaction
     *
     * @return self
     */
    public function setTransactionAsset($transaction_asset)
    {
        if (is_null($transaction_asset)) {
            throw new \InvalidArgumentException('non-nullable transaction_asset cannot be null');
        }
        $this->container['transaction_asset'] = $transaction_asset;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return string
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param string $transaction_amount The amount of the transaction
     *
     * @return self
     */
    public function setTransactionAmount($transaction_amount)
    {
        if (is_null($transaction_amount)) {
            throw new \InvalidArgumentException('non-nullable transaction_amount cannot be null');
        }
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets originator_did
     *
     * @return string
     */
    public function getOriginatorDid()
    {
        return $this->container['originator_did'];
    }

    /**
     * Sets originator_did
     *
     * @param string $originator_did The DID of the transaction originator
     *
     * @return self
     */
    public function setOriginatorDid($originator_did)
    {
        if (is_null($originator_did)) {
            throw new \InvalidArgumentException('non-nullable originator_did cannot be null');
        }
        $this->container['originator_did'] = $originator_did;

        return $this;
    }

    /**
     * Gets beneficiary_did
     *
     * @return string
     */
    public function getBeneficiaryDid()
    {
        return $this->container['beneficiary_did'];
    }

    /**
     * Sets beneficiary_did
     *
     * @param string $beneficiary_did The DID of the transaction beneficiary
     *
     * @return self
     */
    public function setBeneficiaryDid($beneficiary_did)
    {
        if (is_null($beneficiary_did)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_did cannot be null');
        }
        $this->container['beneficiary_did'] = $beneficiary_did;

        return $this;
    }

    /**
     * Gets originator_vas_pdid
     *
     * @return string
     */
    public function getOriginatorVasPdid()
    {
        return $this->container['originator_vas_pdid'];
    }

    /**
     * Sets originator_vas_pdid
     *
     * @param string $originator_vas_pdid The VASP ID of the transaction originator
     *
     * @return self
     */
    public function setOriginatorVasPdid($originator_vas_pdid)
    {
        if (is_null($originator_vas_pdid)) {
            throw new \InvalidArgumentException('non-nullable originator_vas_pdid cannot be null');
        }
        $this->container['originator_vas_pdid'] = $originator_vas_pdid;

        return $this;
    }

    /**
     * Gets beneficiary_vas_pdid
     *
     * @return string
     */
    public function getBeneficiaryVasPdid()
    {
        return $this->container['beneficiary_vas_pdid'];
    }

    /**
     * Sets beneficiary_vas_pdid
     *
     * @param string $beneficiary_vas_pdid The VASP ID of the transaction beneficiary
     *
     * @return self
     */
    public function setBeneficiaryVasPdid($beneficiary_vas_pdid)
    {
        if (is_null($beneficiary_vas_pdid)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_vas_pdid cannot be null');
        }
        $this->container['beneficiary_vas_pdid'] = $beneficiary_vas_pdid;

        return $this;
    }

    /**
     * Gets beneficiary_vas_pname
     *
     * @return string
     */
    public function getBeneficiaryVasPname()
    {
        return $this->container['beneficiary_vas_pname'];
    }

    /**
     * Sets beneficiary_vas_pname
     *
     * @param string $beneficiary_vas_pname The name of the VASP acting as the beneficiary
     *
     * @return self
     */
    public function setBeneficiaryVasPname($beneficiary_vas_pname)
    {
        if (is_null($beneficiary_vas_pname)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_vas_pname cannot be null');
        }
        $this->container['beneficiary_vas_pname'] = $beneficiary_vas_pname;

        return $this;
    }

    /**
     * Gets transaction_blockchain_info
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleTransactionBlockchainInfo
     */
    public function getTransactionBlockchainInfo()
    {
        return $this->container['transaction_blockchain_info'];
    }

    /**
     * Sets transaction_blockchain_info
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleTransactionBlockchainInfo $transaction_blockchain_info Information about the blockchain transaction
     *
     * @return self
     */
    public function setTransactionBlockchainInfo($transaction_blockchain_info)
    {
        if (is_null($transaction_blockchain_info)) {
            throw new \InvalidArgumentException('non-nullable transaction_blockchain_info cannot be null');
        }
        $this->container['transaction_blockchain_info'] = $transaction_blockchain_info;

        return $this;
    }

    /**
     * Gets originator
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRulePiiIVMS
     */
    public function getOriginator()
    {
        return $this->container['originator'];
    }

    /**
     * Sets originator
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRulePiiIVMS $originator Information about the originator of the transaction
     *
     * @return self
     */
    public function setOriginator($originator)
    {
        if (is_null($originator)) {
            throw new \InvalidArgumentException('non-nullable originator cannot be null');
        }
        $this->container['originator'] = $originator;

        return $this;
    }

    /**
     * Gets beneficiary
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRulePiiIVMS
     */
    public function getBeneficiary()
    {
        return $this->container['beneficiary'];
    }

    /**
     * Sets beneficiary
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRulePiiIVMS $beneficiary Information about the beneficiary of the transaction
     *
     * @return self
     */
    public function setBeneficiary($beneficiary)
    {
        if (is_null($beneficiary)) {
            throw new \InvalidArgumentException('non-nullable beneficiary cannot be null');
        }
        $this->container['beneficiary'] = $beneficiary;

        return $this;
    }

    /**
     * Gets encrypted
     *
     * @return string
     */
    public function getEncrypted()
    {
        return $this->container['encrypted'];
    }

    /**
     * Sets encrypted
     *
     * @param string $encrypted Encrypted data related to the transaction
     *
     * @return self
     */
    public function setEncrypted($encrypted)
    {
        if (is_null($encrypted)) {
            throw new \InvalidArgumentException('non-nullable encrypted cannot be null');
        }
        $this->container['encrypted'] = $encrypted;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol The protocol used to perform the travel rule
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets notification_email
     *
     * @return string
     */
    public function getNotificationEmail()
    {
        return $this->container['notification_email'];
    }

    /**
     * Sets notification_email
     *
     * @param string $notification_email The email address where a notification should be sent upon completion of the travel rule
     *
     * @return self
     */
    public function setNotificationEmail($notification_email)
    {
        if (is_null($notification_email)) {
            throw new \InvalidArgumentException('non-nullable notification_email cannot be null');
        }
        $this->container['notification_email'] = $notification_email;

        return $this;
    }

    /**
     * Gets skip_beneficiary_data_validation
     *
     * @return bool
     */
    public function getSkipBeneficiaryDataValidation()
    {
        return $this->container['skip_beneficiary_data_validation'];
    }

    /**
     * Sets skip_beneficiary_data_validation
     *
     * @param bool $skip_beneficiary_data_validation Whether to skip validation of beneficiary data
     *
     * @return self
     */
    public function setSkipBeneficiaryDataValidation($skip_beneficiary_data_validation)
    {
        if (is_null($skip_beneficiary_data_validation)) {
            throw new \InvalidArgumentException('non-nullable skip_beneficiary_data_validation cannot be null');
        }
        $this->container['skip_beneficiary_data_validation'] = $skip_beneficiary_data_validation;

        return $this;
    }

    /**
     * Gets travel_rule_behavior
     *
     * @return bool
     */
    public function getTravelRuleBehavior()
    {
        return $this->container['travel_rule_behavior'];
    }

    /**
     * Sets travel_rule_behavior
     *
     * @param bool $travel_rule_behavior Whether to check if the transaction is a TRAVEL_RULE in the beneficiary VASP's jurisdiction
     *
     * @return self
     */
    public function setTravelRuleBehavior($travel_rule_behavior)
    {
        if (is_null($travel_rule_behavior)) {
            throw new \InvalidArgumentException('non-nullable travel_rule_behavior cannot be null');
        }
        $this->container['travel_rule_behavior'] = $travel_rule_behavior;

        return $this;
    }

    /**
     * Gets originator_proof
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleOwnershipProof
     */
    public function getOriginatorProof()
    {
        return $this->container['originator_proof'];
    }

    /**
     * Sets originator_proof
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleOwnershipProof $originator_proof Ownership proof related to the originator of the transaction
     *
     * @return self
     */
    public function setOriginatorProof($originator_proof)
    {
        if (is_null($originator_proof)) {
            throw new \InvalidArgumentException('non-nullable originator_proof cannot be null');
        }
        $this->container['originator_proof'] = $originator_proof;

        return $this;
    }

    /**
     * Gets beneficiary_proof
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleOwnershipProof
     */
    public function getBeneficiaryProof()
    {
        return $this->container['beneficiary_proof'];
    }

    /**
     * Sets beneficiary_proof
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleOwnershipProof $beneficiary_proof Ownership proof related to the beneficiary of the transaction
     *
     * @return self
     */
    public function setBeneficiaryProof($beneficiary_proof)
    {
        if (is_null($beneficiary_proof)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_proof cannot be null');
        }
        $this->container['beneficiary_proof'] = $beneficiary_proof;

        return $this;
    }

    /**
     * Gets pii
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRulePiiIVMS
     */
    public function getPii()
    {
        return $this->container['pii'];
    }

    /**
     * Sets pii
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRulePiiIVMS $pii Personal identifiable information related to the transaction
     *
     * @return self
     */
    public function setPii($pii)
    {
        if (is_null($pii)) {
            throw new \InvalidArgumentException('non-nullable pii cannot be null');
        }
        $this->container['pii'] = $pii;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


