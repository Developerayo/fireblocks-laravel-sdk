<?php
/**
 * TravelRuleValidateTransactionRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * TravelRuleValidateTransactionRequest Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TravelRuleValidateTransactionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TravelRuleValidateTransactionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_asset' => 'string',
        'destination' => 'string',
        'transaction_amount' => 'string',
        'originator_vas_pdid' => 'string',
        'originator_equals_beneficiary' => 'bool',
        'travel_rule_behavior' => 'bool',
        'beneficiary_vas_pdid' => 'string',
        'beneficiary_vas_pname' => 'string',
        'beneficiary_name' => 'string',
        'beneficiary_account_number' => 'string',
        'beneficiary_address' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_asset' => null,
        'destination' => null,
        'transaction_amount' => null,
        'originator_vas_pdid' => null,
        'originator_equals_beneficiary' => null,
        'travel_rule_behavior' => null,
        'beneficiary_vas_pdid' => null,
        'beneficiary_vas_pname' => null,
        'beneficiary_name' => null,
        'beneficiary_account_number' => null,
        'beneficiary_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transaction_asset' => false,
        'destination' => false,
        'transaction_amount' => false,
        'originator_vas_pdid' => false,
        'originator_equals_beneficiary' => false,
        'travel_rule_behavior' => false,
        'beneficiary_vas_pdid' => false,
        'beneficiary_vas_pname' => false,
        'beneficiary_name' => false,
        'beneficiary_account_number' => false,
        'beneficiary_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_asset' => 'transactionAsset',
        'destination' => 'destination',
        'transaction_amount' => 'transactionAmount',
        'originator_vas_pdid' => 'originatorVASPdid',
        'originator_equals_beneficiary' => 'originatorEqualsBeneficiary',
        'travel_rule_behavior' => 'travelRuleBehavior',
        'beneficiary_vas_pdid' => 'beneficiaryVASPdid',
        'beneficiary_vas_pname' => 'beneficiaryVASPname',
        'beneficiary_name' => 'beneficiaryName',
        'beneficiary_account_number' => 'beneficiaryAccountNumber',
        'beneficiary_address' => 'beneficiaryAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_asset' => 'setTransactionAsset',
        'destination' => 'setDestination',
        'transaction_amount' => 'setTransactionAmount',
        'originator_vas_pdid' => 'setOriginatorVasPdid',
        'originator_equals_beneficiary' => 'setOriginatorEqualsBeneficiary',
        'travel_rule_behavior' => 'setTravelRuleBehavior',
        'beneficiary_vas_pdid' => 'setBeneficiaryVasPdid',
        'beneficiary_vas_pname' => 'setBeneficiaryVasPname',
        'beneficiary_name' => 'setBeneficiaryName',
        'beneficiary_account_number' => 'setBeneficiaryAccountNumber',
        'beneficiary_address' => 'setBeneficiaryAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_asset' => 'getTransactionAsset',
        'destination' => 'getDestination',
        'transaction_amount' => 'getTransactionAmount',
        'originator_vas_pdid' => 'getOriginatorVasPdid',
        'originator_equals_beneficiary' => 'getOriginatorEqualsBeneficiary',
        'travel_rule_behavior' => 'getTravelRuleBehavior',
        'beneficiary_vas_pdid' => 'getBeneficiaryVasPdid',
        'beneficiary_vas_pname' => 'getBeneficiaryVasPname',
        'beneficiary_name' => 'getBeneficiaryName',
        'beneficiary_account_number' => 'getBeneficiaryAccountNumber',
        'beneficiary_address' => 'getBeneficiaryAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('transaction_asset', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('transaction_amount', $data ?? [], null);
        $this->setIfExists('originator_vas_pdid', $data ?? [], null);
        $this->setIfExists('originator_equals_beneficiary', $data ?? [], null);
        $this->setIfExists('travel_rule_behavior', $data ?? [], null);
        $this->setIfExists('beneficiary_vas_pdid', $data ?? [], null);
        $this->setIfExists('beneficiary_vas_pname', $data ?? [], null);
        $this->setIfExists('beneficiary_name', $data ?? [], null);
        $this->setIfExists('beneficiary_account_number', $data ?? [], null);
        $this->setIfExists('beneficiary_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_asset'] === null) {
            $invalidProperties[] = "'transaction_asset' can't be null";
        }
        if ($this->container['destination'] === null) {
            $invalidProperties[] = "'destination' can't be null";
        }
        if ($this->container['transaction_amount'] === null) {
            $invalidProperties[] = "'transaction_amount' can't be null";
        }
        if ($this->container['originator_vas_pdid'] === null) {
            $invalidProperties[] = "'originator_vas_pdid' can't be null";
        }
        if ($this->container['originator_equals_beneficiary'] === null) {
            $invalidProperties[] = "'originator_equals_beneficiary' can't be null";
        }
        if ($this->container['travel_rule_behavior'] === null) {
            $invalidProperties[] = "'travel_rule_behavior' can't be null";
        }
        if ($this->container['beneficiary_vas_pdid'] === null) {
            $invalidProperties[] = "'beneficiary_vas_pdid' can't be null";
        }
        if ($this->container['beneficiary_vas_pname'] === null) {
            $invalidProperties[] = "'beneficiary_vas_pname' can't be null";
        }
        if ($this->container['beneficiary_name'] === null) {
            $invalidProperties[] = "'beneficiary_name' can't be null";
        }
        if ($this->container['beneficiary_account_number'] === null) {
            $invalidProperties[] = "'beneficiary_account_number' can't be null";
        }
        if ($this->container['beneficiary_address'] === null) {
            $invalidProperties[] = "'beneficiary_address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_asset
     *
     * @return string
     */
    public function getTransactionAsset()
    {
        return $this->container['transaction_asset'];
    }

    /**
     * Sets transaction_asset
     *
     * @param string $transaction_asset Transaction asset symbol BTC,ETH)
     *
     * @return self
     */
    public function setTransactionAsset($transaction_asset)
    {
        if (is_null($transaction_asset)) {
            throw new \InvalidArgumentException('non-nullable transaction_asset cannot be null');
        }
        $this->container['transaction_asset'] = $transaction_asset;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return string
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param string $destination Transaction destination address
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return string
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param string $transaction_amount Transaction amount in the transaction asset
     *
     * @return self
     */
    public function setTransactionAmount($transaction_amount)
    {
        if (is_null($transaction_amount)) {
            throw new \InvalidArgumentException('non-nullable transaction_amount cannot be null');
        }
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets originator_vas_pdid
     *
     * @return string
     */
    public function getOriginatorVasPdid()
    {
        return $this->container['originator_vas_pdid'];
    }

    /**
     * Sets originator_vas_pdid
     *
     * @param string $originator_vas_pdid This is the identifier assigned to your VASP
     *
     * @return self
     */
    public function setOriginatorVasPdid($originator_vas_pdid)
    {
        if (is_null($originator_vas_pdid)) {
            throw new \InvalidArgumentException('non-nullable originator_vas_pdid cannot be null');
        }
        $this->container['originator_vas_pdid'] = $originator_vas_pdid;

        return $this;
    }

    /**
     * Gets originator_equals_beneficiary
     *
     * @return bool
     */
    public function getOriginatorEqualsBeneficiary()
    {
        return $this->container['originator_equals_beneficiary'];
    }

    /**
     * Sets originator_equals_beneficiary
     *
     * @param bool $originator_equals_beneficiary \"True\" if the originator and beneficiary is the same person and you therefore do not need to collect any information. \"False\" if it is a third-party transfer.
     *
     * @return self
     */
    public function setOriginatorEqualsBeneficiary($originator_equals_beneficiary)
    {
        if (is_null($originator_equals_beneficiary)) {
            throw new \InvalidArgumentException('non-nullable originator_equals_beneficiary cannot be null');
        }
        $this->container['originator_equals_beneficiary'] = $originator_equals_beneficiary;

        return $this;
    }

    /**
     * Gets travel_rule_behavior
     *
     * @return bool
     */
    public function getTravelRuleBehavior()
    {
        return $this->container['travel_rule_behavior'];
    }

    /**
     * Sets travel_rule_behavior
     *
     * @param bool $travel_rule_behavior This will also check if the transaction is a TRAVEL_RULE in the beneficiary VASP's jurisdiction
     *
     * @return self
     */
    public function setTravelRuleBehavior($travel_rule_behavior)
    {
        if (is_null($travel_rule_behavior)) {
            throw new \InvalidArgumentException('non-nullable travel_rule_behavior cannot be null');
        }
        $this->container['travel_rule_behavior'] = $travel_rule_behavior;

        return $this;
    }

    /**
     * Gets beneficiary_vas_pdid
     *
     * @return string
     */
    public function getBeneficiaryVasPdid()
    {
        return $this->container['beneficiary_vas_pdid'];
    }

    /**
     * Sets beneficiary_vas_pdid
     *
     * @param string $beneficiary_vas_pdid This is the identifier assigned to the VASP the funds are being sent to
     *
     * @return self
     */
    public function setBeneficiaryVasPdid($beneficiary_vas_pdid)
    {
        if (is_null($beneficiary_vas_pdid)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_vas_pdid cannot be null');
        }
        $this->container['beneficiary_vas_pdid'] = $beneficiary_vas_pdid;

        return $this;
    }

    /**
     * Gets beneficiary_vas_pname
     *
     * @return string
     */
    public function getBeneficiaryVasPname()
    {
        return $this->container['beneficiary_vas_pname'];
    }

    /**
     * Sets beneficiary_vas_pname
     *
     * @param string $beneficiary_vas_pname Beneficiary VASP name
     *
     * @return self
     */
    public function setBeneficiaryVasPname($beneficiary_vas_pname)
    {
        if (is_null($beneficiary_vas_pname)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_vas_pname cannot be null');
        }
        $this->container['beneficiary_vas_pname'] = $beneficiary_vas_pname;

        return $this;
    }

    /**
     * Gets beneficiary_name
     *
     * @return string
     */
    public function getBeneficiaryName()
    {
        return $this->container['beneficiary_name'];
    }

    /**
     * Sets beneficiary_name
     *
     * @param string $beneficiary_name Beneficiary  name
     *
     * @return self
     */
    public function setBeneficiaryName($beneficiary_name)
    {
        if (is_null($beneficiary_name)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_name cannot be null');
        }
        $this->container['beneficiary_name'] = $beneficiary_name;

        return $this;
    }

    /**
     * Gets beneficiary_account_number
     *
     * @return string
     */
    public function getBeneficiaryAccountNumber()
    {
        return $this->container['beneficiary_account_number'];
    }

    /**
     * Sets beneficiary_account_number
     *
     * @param string $beneficiary_account_number Beneficiary  name
     *
     * @return self
     */
    public function setBeneficiaryAccountNumber($beneficiary_account_number)
    {
        if (is_null($beneficiary_account_number)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_account_number cannot be null');
        }
        $this->container['beneficiary_account_number'] = $beneficiary_account_number;

        return $this;
    }

    /**
     * Gets beneficiary_address
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleAddress
     */
    public function getBeneficiaryAddress()
    {
        return $this->container['beneficiary_address'];
    }

    /**
     * Sets beneficiary_address
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleAddress $beneficiary_address Beneficiary  name
     *
     * @return self
     */
    public function setBeneficiaryAddress($beneficiary_address)
    {
        if (is_null($beneficiary_address)) {
            throw new \InvalidArgumentException('non-nullable beneficiary_address cannot be null');
        }
        $this->container['beneficiary_address'] = $beneficiary_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


