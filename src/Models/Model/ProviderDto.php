<?php
/**
 * ProviderDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * ProviderDto Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProviderDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProviderDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'provider_name' => 'string',
        'validators' => '\DeveloperayoFireblocksLaravel\Model\ValidatorDto[]',
        'icon_url' => 'string',
        'terms_of_service_url' => 'string',
        'is_terms_of_service_approved' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'provider_name' => null,
        'validators' => null,
        'icon_url' => null,
        'terms_of_service_url' => null,
        'is_terms_of_service_approved' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'provider_name' => false,
        'validators' => false,
        'icon_url' => false,
        'terms_of_service_url' => false,
        'is_terms_of_service_approved' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'provider_name' => 'providerName',
        'validators' => 'validators',
        'icon_url' => 'iconUrl',
        'terms_of_service_url' => 'termsOfServiceUrl',
        'is_terms_of_service_approved' => 'isTermsOfServiceApproved'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'provider_name' => 'setProviderName',
        'validators' => 'setValidators',
        'icon_url' => 'setIconUrl',
        'terms_of_service_url' => 'setTermsOfServiceUrl',
        'is_terms_of_service_approved' => 'setIsTermsOfServiceApproved'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'provider_name' => 'getProviderName',
        'validators' => 'getValidators',
        'icon_url' => 'getIconUrl',
        'terms_of_service_url' => 'getTermsOfServiceUrl',
        'is_terms_of_service_approved' => 'getIsTermsOfServiceApproved'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('provider_name', $data ?? [], null);
        $this->setIfExists('validators', $data ?? [], null);
        $this->setIfExists('icon_url', $data ?? [], null);
        $this->setIfExists('terms_of_service_url', $data ?? [], null);
        $this->setIfExists('is_terms_of_service_approved', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['provider_name'] === null) {
            $invalidProperties[] = "'provider_name' can't be null";
        }
        if ($this->container['validators'] === null) {
            $invalidProperties[] = "'validators' can't be null";
        }
        if ($this->container['icon_url'] === null) {
            $invalidProperties[] = "'icon_url' can't be null";
        }
        if ($this->container['terms_of_service_url'] === null) {
            $invalidProperties[] = "'terms_of_service_url' can't be null";
        }
        if ($this->container['is_terms_of_service_approved'] === null) {
            $invalidProperties[] = "'is_terms_of_service_approved' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the provider
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets provider_name
     *
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['provider_name'];
    }

    /**
     * Sets provider_name
     *
     * @param string $provider_name Name of the provider
     *
     * @return self
     */
    public function setProviderName($provider_name)
    {
        if (is_null($provider_name)) {
            throw new \InvalidArgumentException('non-nullable provider_name cannot be null');
        }
        $this->container['provider_name'] = $provider_name;

        return $this;
    }

    /**
     * Gets validators
     *
     * @return \DeveloperayoFireblocksLaravel\Model\ValidatorDto[]
     */
    public function getValidators()
    {
        return $this->container['validators'];
    }

    /**
     * Sets validators
     *
     * @param \DeveloperayoFireblocksLaravel\Model\ValidatorDto[] $validators An array of objects that includes chain descriptors and the corresponding fee percentages for validators supported by the provider
     *
     * @return self
     */
    public function setValidators($validators)
    {
        if (is_null($validators)) {
            throw new \InvalidArgumentException('non-nullable validators cannot be null');
        }
        $this->container['validators'] = $validators;

        return $this;
    }

    /**
     * Gets icon_url
     *
     * @return string
     */
    public function getIconUrl()
    {
        return $this->container['icon_url'];
    }

    /**
     * Sets icon_url
     *
     * @param string $icon_url URL to the validator's icon
     *
     * @return self
     */
    public function setIconUrl($icon_url)
    {
        if (is_null($icon_url)) {
            throw new \InvalidArgumentException('non-nullable icon_url cannot be null');
        }
        $this->container['icon_url'] = $icon_url;

        return $this;
    }

    /**
     * Gets terms_of_service_url
     *
     * @return string
     */
    public function getTermsOfServiceUrl()
    {
        return $this->container['terms_of_service_url'];
    }

    /**
     * Sets terms_of_service_url
     *
     * @param string $terms_of_service_url URL to the terms of service
     *
     * @return self
     */
    public function setTermsOfServiceUrl($terms_of_service_url)
    {
        if (is_null($terms_of_service_url)) {
            throw new \InvalidArgumentException('non-nullable terms_of_service_url cannot be null');
        }
        $this->container['terms_of_service_url'] = $terms_of_service_url;

        return $this;
    }

    /**
     * Gets is_terms_of_service_approved
     *
     * @return bool
     */
    public function getIsTermsOfServiceApproved()
    {
        return $this->container['is_terms_of_service_approved'];
    }

    /**
     * Sets is_terms_of_service_approved
     *
     * @param bool $is_terms_of_service_approved Indicates whether the terms of service are approved
     *
     * @return self
     */
    public function setIsTermsOfServiceApproved($is_terms_of_service_approved)
    {
        if (is_null($is_terms_of_service_approved)) {
            throw new \InvalidArgumentException('non-nullable is_terms_of_service_approved cannot be null');
        }
        $this->container['is_terms_of_service_approved'] = $is_terms_of_service_approved;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


