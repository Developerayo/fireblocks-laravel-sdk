<?php
/**
 * AssetWallet
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * AssetWallet Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AssetWallet implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AssetWallet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vault_id' => 'string',
        'asset_id' => 'string',
        'available' => 'string',
        'total' => 'string',
        'pending' => 'string',
        'staked' => 'string',
        'frozen' => 'string',
        'locked_amount' => 'string',
        'block_height' => 'string',
        'block_hash' => 'string',
        'creation_timestamp' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vault_id' => null,
        'asset_id' => null,
        'available' => null,
        'total' => null,
        'pending' => null,
        'staked' => null,
        'frozen' => null,
        'locked_amount' => null,
        'block_height' => null,
        'block_hash' => null,
        'creation_timestamp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vault_id' => false,
        'asset_id' => false,
        'available' => false,
        'total' => false,
        'pending' => false,
        'staked' => false,
        'frozen' => false,
        'locked_amount' => false,
        'block_height' => false,
        'block_hash' => false,
        'creation_timestamp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vault_id' => 'vaultId',
        'asset_id' => 'assetId',
        'available' => 'available',
        'total' => 'total',
        'pending' => 'pending',
        'staked' => 'staked',
        'frozen' => 'frozen',
        'locked_amount' => 'lockedAmount',
        'block_height' => 'blockHeight',
        'block_hash' => 'blockHash',
        'creation_timestamp' => 'creationTimestamp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vault_id' => 'setVaultId',
        'asset_id' => 'setAssetId',
        'available' => 'setAvailable',
        'total' => 'setTotal',
        'pending' => 'setPending',
        'staked' => 'setStaked',
        'frozen' => 'setFrozen',
        'locked_amount' => 'setLockedAmount',
        'block_height' => 'setBlockHeight',
        'block_hash' => 'setBlockHash',
        'creation_timestamp' => 'setCreationTimestamp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vault_id' => 'getVaultId',
        'asset_id' => 'getAssetId',
        'available' => 'getAvailable',
        'total' => 'getTotal',
        'pending' => 'getPending',
        'staked' => 'getStaked',
        'frozen' => 'getFrozen',
        'locked_amount' => 'getLockedAmount',
        'block_height' => 'getBlockHeight',
        'block_hash' => 'getBlockHash',
        'creation_timestamp' => 'getCreationTimestamp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('vault_id', $data ?? [], null);
        $this->setIfExists('asset_id', $data ?? [], null);
        $this->setIfExists('available', $data ?? [], null);
        $this->setIfExists('total', $data ?? [], null);
        $this->setIfExists('pending', $data ?? [], null);
        $this->setIfExists('staked', $data ?? [], null);
        $this->setIfExists('frozen', $data ?? [], null);
        $this->setIfExists('locked_amount', $data ?? [], null);
        $this->setIfExists('block_height', $data ?? [], null);
        $this->setIfExists('block_hash', $data ?? [], null);
        $this->setIfExists('creation_timestamp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vault_id
     *
     * @return string|null
     */
    public function getVaultId()
    {
        return $this->container['vault_id'];
    }

    /**
     * Sets vault_id
     *
     * @param string|null $vault_id ID of the vault account. You can [get the vault account by this ID](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid) to retrieve vault properties such as its name, auto fueling, hidden on UI or customer reference ID.
     *
     * @return self
     */
    public function setVaultId($vault_id)
    {
        if (is_null($vault_id)) {
            throw new \InvalidArgumentException('non-nullable vault_id cannot be null');
        }
        $this->container['vault_id'] = $vault_id;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string|null
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string|null $asset_id ID of the asset. You can get more information about this asset by using the [supported assets API](https://developers.fireblocks.com/reference/get_supported-assets)
     *
     * @return self
     */
    public function setAssetId($asset_id)
    {
        if (is_null($asset_id)) {
            throw new \InvalidArgumentException('non-nullable asset_id cannot be null');
        }
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets available
     *
     * @return string|null
     */
    public function getAvailable()
    {
        return $this->container['available'];
    }

    /**
     * Sets available
     *
     * @param string|null $available Available balance, available to use in a transaction.
     *
     * @return self
     */
    public function setAvailable($available)
    {
        if (is_null($available)) {
            throw new \InvalidArgumentException('non-nullable available cannot be null');
        }
        $this->container['available'] = $available;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string|null $total Total balance at the asset wallet, as seen at the blockchain explorers. This includes balance available, and any kind of unavailable balance such as locked, frozen, or others.
     *
     * @return self
     */
    public function setTotal($total)
    {
        if (is_null($total)) {
            throw new \InvalidArgumentException('non-nullable total cannot be null');
        }
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return string|null
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param string|null $pending Pending balance.
     *
     * @return self
     */
    public function setPending($pending)
    {
        if (is_null($pending)) {
            throw new \InvalidArgumentException('non-nullable pending cannot be null');
        }
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets staked
     *
     * @return string|null
     */
    public function getStaked()
    {
        return $this->container['staked'];
    }

    /**
     * Sets staked
     *
     * @param string|null $staked Staked balance.
     *
     * @return self
     */
    public function setStaked($staked)
    {
        if (is_null($staked)) {
            throw new \InvalidArgumentException('non-nullable staked cannot be null');
        }
        $this->container['staked'] = $staked;

        return $this;
    }

    /**
     * Gets frozen
     *
     * @return string|null
     */
    public function getFrozen()
    {
        return $this->container['frozen'];
    }

    /**
     * Sets frozen
     *
     * @param string|null $frozen Funds frozen due to the anti-money laundering policy at this workspace.
     *
     * @return self
     */
    public function setFrozen($frozen)
    {
        if (is_null($frozen)) {
            throw new \InvalidArgumentException('non-nullable frozen cannot be null');
        }
        $this->container['frozen'] = $frozen;

        return $this;
    }

    /**
     * Gets locked_amount
     *
     * @return string|null
     */
    public function getLockedAmount()
    {
        return $this->container['locked_amount'];
    }

    /**
     * Sets locked_amount
     *
     * @param string|null $locked_amount Locked balance.
     *
     * @return self
     */
    public function setLockedAmount($locked_amount)
    {
        if (is_null($locked_amount)) {
            throw new \InvalidArgumentException('non-nullable locked_amount cannot be null');
        }
        $this->container['locked_amount'] = $locked_amount;

        return $this;
    }

    /**
     * Gets block_height
     *
     * @return string|null
     */
    public function getBlockHeight()
    {
        return $this->container['block_height'];
    }

    /**
     * Sets block_height
     *
     * @param string|null $block_height The height (number) of the block of the balance. Can by empty.
     *
     * @return self
     */
    public function setBlockHeight($block_height)
    {
        if (is_null($block_height)) {
            throw new \InvalidArgumentException('non-nullable block_height cannot be null');
        }
        $this->container['block_height'] = $block_height;

        return $this;
    }

    /**
     * Gets block_hash
     *
     * @return string|null
     */
    public function getBlockHash()
    {
        return $this->container['block_hash'];
    }

    /**
     * Sets block_hash
     *
     * @param string|null $block_hash The hash of the block of the balance. Can by empty.
     *
     * @return self
     */
    public function setBlockHash($block_hash)
    {
        if (is_null($block_hash)) {
            throw new \InvalidArgumentException('non-nullable block_hash cannot be null');
        }
        $this->container['block_hash'] = $block_hash;

        return $this;
    }

    /**
     * Gets creation_timestamp
     *
     * @return string|null
     */
    public function getCreationTimestamp()
    {
        return $this->container['creation_timestamp'];
    }

    /**
     * Sets creation_timestamp
     *
     * @param string|null $creation_timestamp Unix timestamp of the time the asset wallet was created.
     *
     * @return self
     */
    public function setCreationTimestamp($creation_timestamp)
    {
        if (is_null($creation_timestamp)) {
            throw new \InvalidArgumentException('non-nullable creation_timestamp cannot be null');
        }
        $this->container['creation_timestamp'] = $creation_timestamp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


