<?php
/**
 * XBSettlementFlowExecutionModel
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * XBSettlementFlowExecutionModel Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class XBSettlementFlowExecutionModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'XBSettlementFlowExecutionModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'flow_id' => 'string',
        'config_id' => 'string',
        'input_amount' => '\DeveloperayoFireblocksLaravel\Model\XBSettlementAsset',
        'output_amount' => '\DeveloperayoFireblocksLaravel\Model\XBSettlementAsset',
        'total_fee' => '\DeveloperayoFireblocksLaravel\Model\XBSettlementAsset',
        'initiated_at' => 'float',
        'initiated_by' => 'string',
        'state' => '\DeveloperayoFireblocksLaravel\Model\XBSettlementFlowExecutionStatus',
        'steps' => '\DeveloperayoFireblocksLaravel\Model\XBSettlementFlowStepsExecutionRecord',
        'selected_conversion_slippage' => '\DeveloperayoFireblocksLaravel\Model\XBSettlementFlowExecutionModelSelectedConversionSlippage'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'flow_id' => null,
        'config_id' => 'uuid',
        'input_amount' => null,
        'output_amount' => null,
        'total_fee' => null,
        'initiated_at' => null,
        'initiated_by' => null,
        'state' => null,
        'steps' => null,
        'selected_conversion_slippage' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'flow_id' => false,
        'config_id' => false,
        'input_amount' => false,
        'output_amount' => false,
        'total_fee' => false,
        'initiated_at' => false,
        'initiated_by' => false,
        'state' => false,
        'steps' => false,
        'selected_conversion_slippage' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'flow_id' => 'flowId',
        'config_id' => 'configId',
        'input_amount' => 'inputAmount',
        'output_amount' => 'outputAmount',
        'total_fee' => 'totalFee',
        'initiated_at' => 'initiatedAt',
        'initiated_by' => 'initiatedBy',
        'state' => 'state',
        'steps' => 'steps',
        'selected_conversion_slippage' => 'selectedConversionSlippage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'flow_id' => 'setFlowId',
        'config_id' => 'setConfigId',
        'input_amount' => 'setInputAmount',
        'output_amount' => 'setOutputAmount',
        'total_fee' => 'setTotalFee',
        'initiated_at' => 'setInitiatedAt',
        'initiated_by' => 'setInitiatedBy',
        'state' => 'setState',
        'steps' => 'setSteps',
        'selected_conversion_slippage' => 'setSelectedConversionSlippage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'flow_id' => 'getFlowId',
        'config_id' => 'getConfigId',
        'input_amount' => 'getInputAmount',
        'output_amount' => 'getOutputAmount',
        'total_fee' => 'getTotalFee',
        'initiated_at' => 'getInitiatedAt',
        'initiated_by' => 'getInitiatedBy',
        'state' => 'getState',
        'steps' => 'getSteps',
        'selected_conversion_slippage' => 'getSelectedConversionSlippage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('flow_id', $data ?? [], null);
        $this->setIfExists('config_id', $data ?? [], null);
        $this->setIfExists('input_amount', $data ?? [], null);
        $this->setIfExists('output_amount', $data ?? [], null);
        $this->setIfExists('total_fee', $data ?? [], null);
        $this->setIfExists('initiated_at', $data ?? [], null);
        $this->setIfExists('initiated_by', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('steps', $data ?? [], null);
        $this->setIfExists('selected_conversion_slippage', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['flow_id'] === null) {
            $invalidProperties[] = "'flow_id' can't be null";
        }
        if ($this->container['config_id'] === null) {
            $invalidProperties[] = "'config_id' can't be null";
        }
        if ($this->container['input_amount'] === null) {
            $invalidProperties[] = "'input_amount' can't be null";
        }
        if ($this->container['output_amount'] === null) {
            $invalidProperties[] = "'output_amount' can't be null";
        }
        if ($this->container['total_fee'] === null) {
            $invalidProperties[] = "'total_fee' can't be null";
        }
        if ($this->container['initiated_at'] === null) {
            $invalidProperties[] = "'initiated_at' can't be null";
        }
        if ($this->container['initiated_by'] === null) {
            $invalidProperties[] = "'initiated_by' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        if ($this->container['steps'] === null) {
            $invalidProperties[] = "'steps' can't be null";
        }
        if ($this->container['selected_conversion_slippage'] === null) {
            $invalidProperties[] = "'selected_conversion_slippage' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets flow_id
     *
     * @return string
     */
    public function getFlowId()
    {
        return $this->container['flow_id'];
    }

    /**
     * Sets flow_id
     *
     * @param string $flow_id The unique id for the cross-border flow.
     *
     * @return self
     */
    public function setFlowId($flow_id)
    {
        if (is_null($flow_id)) {
            throw new \InvalidArgumentException('non-nullable flow_id cannot be null');
        }
        $this->container['flow_id'] = $flow_id;

        return $this;
    }

    /**
     * Gets config_id
     *
     * @return string
     */
    public function getConfigId()
    {
        return $this->container['config_id'];
    }

    /**
     * Sets config_id
     *
     * @param string $config_id Cross Bodrder configuraion unique id
     *
     * @return self
     */
    public function setConfigId($config_id)
    {
        if (is_null($config_id)) {
            throw new \InvalidArgumentException('non-nullable config_id cannot be null');
        }
        $this->container['config_id'] = $config_id;

        return $this;
    }

    /**
     * Gets input_amount
     *
     * @return \DeveloperayoFireblocksLaravel\Model\XBSettlementAsset
     */
    public function getInputAmount()
    {
        return $this->container['input_amount'];
    }

    /**
     * Sets input_amount
     *
     * @param \DeveloperayoFireblocksLaravel\Model\XBSettlementAsset $input_amount input_amount
     *
     * @return self
     */
    public function setInputAmount($input_amount)
    {
        if (is_null($input_amount)) {
            throw new \InvalidArgumentException('non-nullable input_amount cannot be null');
        }
        $this->container['input_amount'] = $input_amount;

        return $this;
    }

    /**
     * Gets output_amount
     *
     * @return \DeveloperayoFireblocksLaravel\Model\XBSettlementAsset
     */
    public function getOutputAmount()
    {
        return $this->container['output_amount'];
    }

    /**
     * Sets output_amount
     *
     * @param \DeveloperayoFireblocksLaravel\Model\XBSettlementAsset $output_amount output_amount
     *
     * @return self
     */
    public function setOutputAmount($output_amount)
    {
        if (is_null($output_amount)) {
            throw new \InvalidArgumentException('non-nullable output_amount cannot be null');
        }
        $this->container['output_amount'] = $output_amount;

        return $this;
    }

    /**
     * Gets total_fee
     *
     * @return \DeveloperayoFireblocksLaravel\Model\XBSettlementAsset
     */
    public function getTotalFee()
    {
        return $this->container['total_fee'];
    }

    /**
     * Sets total_fee
     *
     * @param \DeveloperayoFireblocksLaravel\Model\XBSettlementAsset $total_fee total_fee
     *
     * @return self
     */
    public function setTotalFee($total_fee)
    {
        if (is_null($total_fee)) {
            throw new \InvalidArgumentException('non-nullable total_fee cannot be null');
        }
        $this->container['total_fee'] = $total_fee;

        return $this;
    }

    /**
     * Gets initiated_at
     *
     * @return float
     */
    public function getInitiatedAt()
    {
        return $this->container['initiated_at'];
    }

    /**
     * Sets initiated_at
     *
     * @param float $initiated_at The time the cross-border flow executed in epoch format.
     *
     * @return self
     */
    public function setInitiatedAt($initiated_at)
    {
        if (is_null($initiated_at)) {
            throw new \InvalidArgumentException('non-nullable initiated_at cannot be null');
        }
        $this->container['initiated_at'] = $initiated_at;

        return $this;
    }

    /**
     * Gets initiated_by
     *
     * @return string
     */
    public function getInitiatedBy()
    {
        return $this->container['initiated_by'];
    }

    /**
     * Sets initiated_by
     *
     * @param string $initiated_by The id of the user which launched the flow
     *
     * @return self
     */
    public function setInitiatedBy($initiated_by)
    {
        if (is_null($initiated_by)) {
            throw new \InvalidArgumentException('non-nullable initiated_by cannot be null');
        }
        $this->container['initiated_by'] = $initiated_by;

        return $this;
    }

    /**
     * Gets state
     *
     * @return \DeveloperayoFireblocksLaravel\Model\XBSettlementFlowExecutionStatus
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param \DeveloperayoFireblocksLaravel\Model\XBSettlementFlowExecutionStatus $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets steps
     *
     * @return \DeveloperayoFireblocksLaravel\Model\XBSettlementFlowStepsExecutionRecord
     */
    public function getSteps()
    {
        return $this->container['steps'];
    }

    /**
     * Sets steps
     *
     * @param \DeveloperayoFireblocksLaravel\Model\XBSettlementFlowStepsExecutionRecord $steps steps
     *
     * @return self
     */
    public function setSteps($steps)
    {
        if (is_null($steps)) {
            throw new \InvalidArgumentException('non-nullable steps cannot be null');
        }
        $this->container['steps'] = $steps;

        return $this;
    }

    /**
     * Gets selected_conversion_slippage
     *
     * @return \DeveloperayoFireblocksLaravel\Model\XBSettlementFlowExecutionModelSelectedConversionSlippage
     */
    public function getSelectedConversionSlippage()
    {
        return $this->container['selected_conversion_slippage'];
    }

    /**
     * Sets selected_conversion_slippage
     *
     * @param \DeveloperayoFireblocksLaravel\Model\XBSettlementFlowExecutionModelSelectedConversionSlippage $selected_conversion_slippage selected_conversion_slippage
     *
     * @return self
     */
    public function setSelectedConversionSlippage($selected_conversion_slippage)
    {
        if (is_null($selected_conversion_slippage)) {
            throw new \InvalidArgumentException('non-nullable selected_conversion_slippage cannot be null');
        }
        $this->container['selected_conversion_slippage'] = $selected_conversion_slippage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


