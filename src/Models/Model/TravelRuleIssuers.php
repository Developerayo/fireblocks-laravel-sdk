<?php
/**
 * TravelRuleIssuers
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace DeveloperayoFireblocksLaravel\Model;

use \ArrayAccess;
use \DeveloperayoFireblocksLaravel\ObjectSerializer;

/**
 * TravelRuleIssuers Class Doc Comment
 *
 * @category Class
 * @package  DeveloperayoFireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TravelRuleIssuers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TravelRuleIssuers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'year_founded' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'is_regulated' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'regulatory_authorities' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'name' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'logo' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'website' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'legal_name' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'legal_structure' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'incorporation_country' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'business_number' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'address_line1' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'city' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'country' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer',
        'description' => '\DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'year_founded' => null,
        'is_regulated' => null,
        'regulatory_authorities' => null,
        'name' => null,
        'logo' => null,
        'website' => null,
        'legal_name' => null,
        'legal_structure' => null,
        'incorporation_country' => null,
        'business_number' => null,
        'address_line1' => null,
        'city' => null,
        'country' => null,
        'description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'year_founded' => false,
        'is_regulated' => false,
        'regulatory_authorities' => false,
        'name' => false,
        'logo' => false,
        'website' => false,
        'legal_name' => false,
        'legal_structure' => false,
        'incorporation_country' => false,
        'business_number' => false,
        'address_line1' => false,
        'city' => false,
        'country' => false,
        'description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'year_founded' => 'yearFounded',
        'is_regulated' => 'isRegulated',
        'regulatory_authorities' => 'regulatoryAuthorities',
        'name' => 'name',
        'logo' => 'logo',
        'website' => 'website',
        'legal_name' => 'legalName',
        'legal_structure' => 'legalStructure',
        'incorporation_country' => 'incorporationCountry',
        'business_number' => 'businessNumber',
        'address_line1' => 'addressLine1',
        'city' => 'city',
        'country' => 'country',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'year_founded' => 'setYearFounded',
        'is_regulated' => 'setIsRegulated',
        'regulatory_authorities' => 'setRegulatoryAuthorities',
        'name' => 'setName',
        'logo' => 'setLogo',
        'website' => 'setWebsite',
        'legal_name' => 'setLegalName',
        'legal_structure' => 'setLegalStructure',
        'incorporation_country' => 'setIncorporationCountry',
        'business_number' => 'setBusinessNumber',
        'address_line1' => 'setAddressLine1',
        'city' => 'setCity',
        'country' => 'setCountry',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'year_founded' => 'getYearFounded',
        'is_regulated' => 'getIsRegulated',
        'regulatory_authorities' => 'getRegulatoryAuthorities',
        'name' => 'getName',
        'logo' => 'getLogo',
        'website' => 'getWebsite',
        'legal_name' => 'getLegalName',
        'legal_structure' => 'getLegalStructure',
        'incorporation_country' => 'getIncorporationCountry',
        'business_number' => 'getBusinessNumber',
        'address_line1' => 'getAddressLine1',
        'city' => 'getCity',
        'country' => 'getCountry',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('year_founded', $data ?? [], null);
        $this->setIfExists('is_regulated', $data ?? [], null);
        $this->setIfExists('regulatory_authorities', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('legal_name', $data ?? [], null);
        $this->setIfExists('legal_structure', $data ?? [], null);
        $this->setIfExists('incorporation_country', $data ?? [], null);
        $this->setIfExists('business_number', $data ?? [], null);
        $this->setIfExists('address_line1', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['year_founded'] === null) {
            $invalidProperties[] = "'year_founded' can't be null";
        }
        if ($this->container['is_regulated'] === null) {
            $invalidProperties[] = "'is_regulated' can't be null";
        }
        if ($this->container['regulatory_authorities'] === null) {
            $invalidProperties[] = "'regulatory_authorities' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['logo'] === null) {
            $invalidProperties[] = "'logo' can't be null";
        }
        if ($this->container['website'] === null) {
            $invalidProperties[] = "'website' can't be null";
        }
        if ($this->container['legal_name'] === null) {
            $invalidProperties[] = "'legal_name' can't be null";
        }
        if ($this->container['legal_structure'] === null) {
            $invalidProperties[] = "'legal_structure' can't be null";
        }
        if ($this->container['incorporation_country'] === null) {
            $invalidProperties[] = "'incorporation_country' can't be null";
        }
        if ($this->container['business_number'] === null) {
            $invalidProperties[] = "'business_number' can't be null";
        }
        if ($this->container['address_line1'] === null) {
            $invalidProperties[] = "'address_line1' can't be null";
        }
        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets year_founded
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getYearFounded()
    {
        return $this->container['year_founded'];
    }

    /**
     * Sets year_founded
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $year_founded year_founded
     *
     * @return self
     */
    public function setYearFounded($year_founded)
    {
        if (is_null($year_founded)) {
            throw new \InvalidArgumentException('non-nullable year_founded cannot be null');
        }
        $this->container['year_founded'] = $year_founded;

        return $this;
    }

    /**
     * Gets is_regulated
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getIsRegulated()
    {
        return $this->container['is_regulated'];
    }

    /**
     * Sets is_regulated
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $is_regulated is_regulated
     *
     * @return self
     */
    public function setIsRegulated($is_regulated)
    {
        if (is_null($is_regulated)) {
            throw new \InvalidArgumentException('non-nullable is_regulated cannot be null');
        }
        $this->container['is_regulated'] = $is_regulated;

        return $this;
    }

    /**
     * Gets regulatory_authorities
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getRegulatoryAuthorities()
    {
        return $this->container['regulatory_authorities'];
    }

    /**
     * Sets regulatory_authorities
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $regulatory_authorities regulatory_authorities
     *
     * @return self
     */
    public function setRegulatoryAuthorities($regulatory_authorities)
    {
        if (is_null($regulatory_authorities)) {
            throw new \InvalidArgumentException('non-nullable regulatory_authorities cannot be null');
        }
        $this->container['regulatory_authorities'] = $regulatory_authorities;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            throw new \InvalidArgumentException('non-nullable logo cannot be null');
        }
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets website
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            throw new \InvalidArgumentException('non-nullable website cannot be null');
        }
        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets legal_name
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getLegalName()
    {
        return $this->container['legal_name'];
    }

    /**
     * Sets legal_name
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $legal_name legal_name
     *
     * @return self
     */
    public function setLegalName($legal_name)
    {
        if (is_null($legal_name)) {
            throw new \InvalidArgumentException('non-nullable legal_name cannot be null');
        }
        $this->container['legal_name'] = $legal_name;

        return $this;
    }

    /**
     * Gets legal_structure
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getLegalStructure()
    {
        return $this->container['legal_structure'];
    }

    /**
     * Sets legal_structure
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $legal_structure legal_structure
     *
     * @return self
     */
    public function setLegalStructure($legal_structure)
    {
        if (is_null($legal_structure)) {
            throw new \InvalidArgumentException('non-nullable legal_structure cannot be null');
        }
        $this->container['legal_structure'] = $legal_structure;

        return $this;
    }

    /**
     * Gets incorporation_country
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getIncorporationCountry()
    {
        return $this->container['incorporation_country'];
    }

    /**
     * Sets incorporation_country
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $incorporation_country incorporation_country
     *
     * @return self
     */
    public function setIncorporationCountry($incorporation_country)
    {
        if (is_null($incorporation_country)) {
            throw new \InvalidArgumentException('non-nullable incorporation_country cannot be null');
        }
        $this->container['incorporation_country'] = $incorporation_country;

        return $this;
    }

    /**
     * Gets business_number
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getBusinessNumber()
    {
        return $this->container['business_number'];
    }

    /**
     * Sets business_number
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $business_number business_number
     *
     * @return self
     */
    public function setBusinessNumber($business_number)
    {
        if (is_null($business_number)) {
            throw new \InvalidArgumentException('non-nullable business_number cannot be null');
        }
        $this->container['business_number'] = $business_number;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $address_line1 address_line1
     *
     * @return self
     */
    public function setAddressLine1($address_line1)
    {
        if (is_null($address_line1)) {
            throw new \InvalidArgumentException('non-nullable address_line1 cannot be null');
        }
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets city
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $city city
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \DeveloperayoFireblocksLaravel\Model\TravelRuleIssuer $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


