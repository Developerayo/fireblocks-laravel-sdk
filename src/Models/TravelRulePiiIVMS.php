<?php
/**
 * TravelRulePiiIVMS
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * TravelRulePiiIVMS Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TravelRulePiiIVMS implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TravelRulePiiIVMS';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fullName' => 'string',
        'dateOfBirth' => 'string',
        'placeOfBirth' => 'string',
        'address' => 'string',
        'identificationNumber' => 'string',
        'nationality' => 'string',
        'countryOfResidence' => 'string',
        'taxIdentificationNumber' => 'string',
        'customerNumber' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fullName' => null,
        'dateOfBirth' => null,
        'placeOfBirth' => null,
        'address' => null,
        'identificationNumber' => null,
        'nationality' => null,
        'countryOfResidence' => null,
        'taxIdentificationNumber' => null,
        'customerNumber' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fullName' => false,
        'dateOfBirth' => false,
        'placeOfBirth' => false,
        'address' => false,
        'identificationNumber' => false,
        'nationality' => false,
        'countryOfResidence' => false,
        'taxIdentificationNumber' => false,
        'customerNumber' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fullName' => 'fullName',
        'dateOfBirth' => 'dateOfBirth',
        'placeOfBirth' => 'placeOfBirth',
        'address' => 'address',
        'identificationNumber' => 'identificationNumber',
        'nationality' => 'nationality',
        'countryOfResidence' => 'countryOfResidence',
        'taxIdentificationNumber' => 'taxIdentificationNumber',
        'customerNumber' => 'customerNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fullName' => 'setFullName',
        'dateOfBirth' => 'setDateOfBirth',
        'placeOfBirth' => 'setPlaceOfBirth',
        'address' => 'setAddress',
        'identificationNumber' => 'setIdentificationNumber',
        'nationality' => 'setNationality',
        'countryOfResidence' => 'setCountryOfResidence',
        'taxIdentificationNumber' => 'setTaxIdentificationNumber',
        'customerNumber' => 'setCustomerNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fullName' => 'getFullName',
        'dateOfBirth' => 'getDateOfBirth',
        'placeOfBirth' => 'getPlaceOfBirth',
        'address' => 'getAddress',
        'identificationNumber' => 'getIdentificationNumber',
        'nationality' => 'getNationality',
        'countryOfResidence' => 'getCountryOfResidence',
        'taxIdentificationNumber' => 'getTaxIdentificationNumber',
        'customerNumber' => 'getCustomerNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('fullName', $data ?? [], null);
        $this->setIfExists('dateOfBirth', $data ?? [], null);
        $this->setIfExists('placeOfBirth', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('identificationNumber', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('countryOfResidence', $data ?? [], null);
        $this->setIfExists('taxIdentificationNumber', $data ?? [], null);
        $this->setIfExists('customerNumber', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['fullName'] === null) {
            $invalidProperties[] = "'fullName' can't be null";
        }
        if ($this->container['dateOfBirth'] === null) {
            $invalidProperties[] = "'dateOfBirth' can't be null";
        }
        if ($this->container['placeOfBirth'] === null) {
            $invalidProperties[] = "'placeOfBirth' can't be null";
        }
        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['identificationNumber'] === null) {
            $invalidProperties[] = "'identificationNumber' can't be null";
        }
        if ($this->container['nationality'] === null) {
            $invalidProperties[] = "'nationality' can't be null";
        }
        if ($this->container['countryOfResidence'] === null) {
            $invalidProperties[] = "'countryOfResidence' can't be null";
        }
        if ($this->container['taxIdentificationNumber'] === null) {
            $invalidProperties[] = "'taxIdentificationNumber' can't be null";
        }
        if ($this->container['customerNumber'] === null) {
            $invalidProperties[] = "'customerNumber' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fullName
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['fullName'];
    }

    /**
     * Sets fullName
     *
     * @param string $fullName fullName
     *
     * @return self
     */
    public function setFullName($fullName)
    {
        if (is_null($fullName)) {
            throw new \InvalidArgumentException('non-nullable fullName cannot be null');
        }
        $this->container['fullName'] = $fullName;

        return $this;
    }

    /**
     * Gets dateOfBirth
     *
     * @return string
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     *
     * @param string $dateOfBirth dateOfBirth
     *
     * @return self
     */
    public function setDateOfBirth($dateOfBirth)
    {
        if (is_null($dateOfBirth)) {
            throw new \InvalidArgumentException('non-nullable dateOfBirth cannot be null');
        }
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets placeOfBirth
     *
     * @return string
     */
    public function getPlaceOfBirth()
    {
        return $this->container['placeOfBirth'];
    }

    /**
     * Sets placeOfBirth
     *
     * @param string $placeOfBirth placeOfBirth
     *
     * @return self
     */
    public function setPlaceOfBirth($placeOfBirth)
    {
        if (is_null($placeOfBirth)) {
            throw new \InvalidArgumentException('non-nullable placeOfBirth cannot be null');
        }
        $this->container['placeOfBirth'] = $placeOfBirth;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets identificationNumber
     *
     * @return string
     */
    public function getIdentificationNumber()
    {
        return $this->container['identificationNumber'];
    }

    /**
     * Sets identificationNumber
     *
     * @param string $identificationNumber identificationNumber
     *
     * @return self
     */
    public function setIdentificationNumber($identificationNumber)
    {
        if (is_null($identificationNumber)) {
            throw new \InvalidArgumentException('non-nullable identificationNumber cannot be null');
        }
        $this->container['identificationNumber'] = $identificationNumber;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string $nationality nationality
     *
     * @return self
     */
    public function setNationality($nationality)
    {
        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets countryOfResidence
     *
     * @return string
     */
    public function getCountryOfResidence()
    {
        return $this->container['countryOfResidence'];
    }

    /**
     * Sets countryOfResidence
     *
     * @param string $countryOfResidence countryOfResidence
     *
     * @return self
     */
    public function setCountryOfResidence($countryOfResidence)
    {
        if (is_null($countryOfResidence)) {
            throw new \InvalidArgumentException('non-nullable countryOfResidence cannot be null');
        }
        $this->container['countryOfResidence'] = $countryOfResidence;

        return $this;
    }

    /**
     * Gets taxIdentificationNumber
     *
     * @return string
     */
    public function getTaxIdentificationNumber()
    {
        return $this->container['taxIdentificationNumber'];
    }

    /**
     * Sets taxIdentificationNumber
     *
     * @param string $taxIdentificationNumber taxIdentificationNumber
     *
     * @return self
     */
    public function setTaxIdentificationNumber($taxIdentificationNumber)
    {
        if (is_null($taxIdentificationNumber)) {
            throw new \InvalidArgumentException('non-nullable taxIdentificationNumber cannot be null');
        }
        $this->container['taxIdentificationNumber'] = $taxIdentificationNumber;

        return $this;
    }

    /**
     * Gets customerNumber
     *
     * @return string
     */
    public function getCustomerNumber()
    {
        return $this->container['customerNumber'];
    }

    /**
     * Sets customerNumber
     *
     * @param string $customerNumber customerNumber
     *
     * @return self
     */
    public function setCustomerNumber($customerNumber)
    {
        if (is_null($customerNumber)) {
            throw new \InvalidArgumentException('non-nullable customerNumber cannot be null');
        }
        $this->container['customerNumber'] = $customerNumber;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


