<?php
/**
 * GetTransactionOperation
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * GetTransactionOperation Class Doc Comment
 *
 * @category Class
 * @description * &#x60;TRANSFER&#x60; - Transfers funds from one account to another. UTXO blockchains allow multi-input and multi-output transfers. All other blockchains allow transfers with one source address and one destination address. * &#x60;MINT&#x60; - Mints new tokens. Supported for Stellar, Ripple and EVM-based blockchains. * &#x60;BURN&#x60; - Burns tokens. Supported for Stellar, Ripple and EVM-based blockchains. * &#x60;CONTRACT_CALL&#x60; - Calls a smart contract method for web3 operations on any EVM blockchain. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions. * &#x60;TYPED_MESSAGE&#x60; - An off-chain message in either Ethereum Personal Message or EIP712 format. Use it to sign specific readable messages that are not actual transactions. [Learn more about typed messages](https://developers.fireblocks.com/docs/typed-message-signing). * &#x60;RAW&#x60; - An off-chain message with no predefined format. Use it to sign any message with your private key, including protocols such as blockchains and custom transaction types that are not natively supported by Fireblocks. [Learn more about raw signing transactions.](https://developers.fireblocks.com/docs/raw-message-signing) * &#x60;ENABLE_ASSET&#x60; - Algorand, DigitalBits, Solana, and Stellar require an on-chain transaction to create an asset wallet and enable the deposit address. This transaction is automatically created when adding assets on these blockchains at a vault account. * &#x60;STAKE&#x60; - Assign assets to a staking pool managed by a staking validator. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations. * &#x60;UNSTAKE&#x60; - Remove assets from a staking pool managed by a staking validator. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations. * &#x60;WITHDRAW&#x60; - Transfer assets from a dedicated staking vault account to another address. Supported for Stellar and EVM-based blockchains. This transaction is automatically created when performing staking operations.      **Note:** Fireblocks will rename this type from &#x60;WITHDRAW&#x60; to a different type name soon. There will be a 7-day notice regarding the new type name.  * &#x60;SUPPLY_TO_COMPOUND&#x60; - Deprecated since April 1st, 2023. Older transactions may have this as their operation, in case users in the workspace have used the direct integration between Fireblocks and the Compound DeFI protocol. * &#x60;REDEEM_FROM_COMPOUND&#x60; - Deprecated since April 1st, 2023. Older transactions may have this as their operation, in case users in the workspace have used the direct integration between Fireblocks and the Compound DeFI protocol.
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class GetTransactionOperation
{
    /**
     * Possible values of this enum
     */
    public const TRANSFER = 'TRANSFER';

    public const BURN = 'BURN';

    public const CONTRACT_CALL = 'CONTRACT_CALL';

    public const MINT = 'MINT';

    public const RAW = 'RAW';

    public const TYPED_MESSAGE = 'TYPED_MESSAGE';

    public const ENABLE_ASSET = 'ENABLE_ASSET';

    public const STAKE = 'STAKE';

    public const UNSTAKE = 'UNSTAKE';

    public const WITHDRAW = 'WITHDRAW';

    public const REDEEM_FROM_COMPOUND = 'REDEEM_FROM_COMPOUND';

    public const SUPPLY_TO_COMPOUND = 'SUPPLY_TO_COMPOUND';

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::TRANSFER,
            self::BURN,
            self::CONTRACT_CALL,
            self::MINT,
            self::RAW,
            self::TYPED_MESSAGE,
            self::ENABLE_ASSET,
            self::STAKE,
            self::UNSTAKE,
            self::WITHDRAW,
            self::REDEEM_FROM_COMPOUND,
            self::SUPPLY_TO_COMPOUND
        ];
    }
}


