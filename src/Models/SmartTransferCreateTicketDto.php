<?php
/**
 * SmartTransferCreateTicketDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * SmartTransferCreateTicketDto Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SmartTransferCreateTicketDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SmartTransferCreateTicketDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'createdByNetworkId' => 'string',
        'type' => 'string',
        'expiresIn' => 'float',
        'terms' => '\Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketTermDto[]',
        'externalRefId' => 'string',
        'note' => 'string',
        'submit' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'createdByNetworkId' => null,
        'type' => null,
        'expiresIn' => null,
        'terms' => null,
        'externalRefId' => null,
        'note' => null,
        'submit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'createdByNetworkId' => false,
        'type' => false,
        'expiresIn' => false,
        'terms' => false,
        'externalRefId' => false,
        'note' => false,
        'submit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'createdByNetworkId' => 'createdByNetworkId',
        'type' => 'type',
        'expiresIn' => 'expiresIn',
        'terms' => 'terms',
        'externalRefId' => 'externalRefId',
        'note' => 'note',
        'submit' => 'submit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'createdByNetworkId' => 'setCreatedByNetworkId',
        'type' => 'setType',
        'expiresIn' => 'setExpiresIn',
        'terms' => 'setTerms',
        'externalRefId' => 'setExternalRefId',
        'note' => 'setNote',
        'submit' => 'setSubmit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'createdByNetworkId' => 'getCreatedByNetworkId',
        'type' => 'getType',
        'expiresIn' => 'getExpiresIn',
        'terms' => 'getTerms',
        'externalRefId' => 'getExternalRefId',
        'note' => 'getNote',
        'submit' => 'getSubmit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_ASYNC = 'ASYNC';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ASYNC,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('createdByNetworkId', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('expiresIn', $data ?? [], null);
        $this->setIfExists('terms', $data ?? [], null);
        $this->setIfExists('externalRefId', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('submit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['createdByNetworkId'] === null) {
            $invalidProperties[] = "'createdByNetworkId' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['expiresIn']) && ($this->container['expiresIn'] > 48)) {
            $invalidProperties[] = "invalid value for 'expiresIn', must be smaller than or equal to 48.";
        }

        if (!is_null($this->container['expiresIn']) && ($this->container['expiresIn'] < 1)) {
            $invalidProperties[] = "invalid value for 'expiresIn', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['externalRefId']) && (mb_strlen($this->container['externalRefId']) > 64)) {
            $invalidProperties[] = "invalid value for 'externalRefId', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) > 1024)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be smaller than or equal to 1024.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets createdByNetworkId
     *
     * @return string
     */
    public function getCreatedByNetworkId()
    {
        return $this->container['createdByNetworkId'];
    }

    /**
     * Sets createdByNetworkId
     *
     * @param string $createdByNetworkId createdByNetworkId
     *
     * @return self
     */
    public function setCreatedByNetworkId($createdByNetworkId)
    {
        if (is_null($createdByNetworkId)) {
            throw new \InvalidArgumentException('non-nullable createdByNetworkId cannot be null');
        }
        $this->container['createdByNetworkId'] = $createdByNetworkId;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets expiresIn
     *
     * @return float|null
     */
    public function getExpiresIn()
    {
        return $this->container['expiresIn'];
    }

    /**
     * Sets expiresIn
     *
     * @param float|null $expiresIn Number of hours after which an OPEN ticket will expire if no term is funded.
     *
     * @return self
     */
    public function setExpiresIn($expiresIn)
    {
        if (is_null($expiresIn)) {
            throw new \InvalidArgumentException('non-nullable expiresIn cannot be null');
        }

        if (($expiresIn > 48)) {
            throw new \InvalidArgumentException('invalid value for $expiresIn when calling SmartTransferCreateTicketDto., must be smaller than or equal to 48.');
        }
        if (($expiresIn < 1)) {
            throw new \InvalidArgumentException('invalid value for $expiresIn when calling SmartTransferCreateTicketDto., must be bigger than or equal to 1.');
        }

        $this->container['expiresIn'] = $expiresIn;

        return $this;
    }

    /**
     * Gets terms
     *
     * @return \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketTermDto[]|null
     */
    public function getTerms()
    {
        return $this->container['terms'];
    }

    /**
     * Sets terms
     *
     * @param \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketTermDto[]|null $terms terms
     *
     * @return self
     */
    public function setTerms($terms)
    {
        if (is_null($terms)) {
            throw new \InvalidArgumentException('non-nullable terms cannot be null');
        }
        $this->container['terms'] = $terms;

        return $this;
    }

    /**
     * Gets externalRefId
     *
     * @return string|null
     */
    public function getExternalRefId()
    {
        return $this->container['externalRefId'];
    }

    /**
     * Sets externalRefId
     *
     * @param string|null $externalRefId externalRefId
     *
     * @return self
     */
    public function setExternalRefId($externalRefId)
    {
        if (is_null($externalRefId)) {
            throw new \InvalidArgumentException('non-nullable externalRefId cannot be null');
        }
        if ((mb_strlen($externalRefId) > 64)) {
            throw new \InvalidArgumentException('invalid length for $externalRefId when calling SmartTransferCreateTicketDto., must be smaller than or equal to 64.');
        }

        $this->container['externalRefId'] = $externalRefId;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        if ((mb_strlen($note) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $note when calling SmartTransferCreateTicketDto., must be smaller than or equal to 1024.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets submit
     *
     * @return bool|null
     */
    public function getSubmit()
    {
        return $this->container['submit'];
    }

    /**
     * Sets submit
     *
     * @param bool|null $submit submit
     *
     * @return self
     */
    public function setSubmit($submit)
    {
        if (is_null($submit)) {
            throw new \InvalidArgumentException('non-nullable submit cannot be null');
        }
        $this->container['submit'] = $submit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


