<?php
/**
 * TravelRuleValidateFullTransactionRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * TravelRuleValidateFullTransactionRequest Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TravelRuleValidateFullTransactionRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TravelRuleValidateFullTransactionRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transactionAsset' => 'string',
        'transactionAmount' => 'string',
        'originatorDid' => 'string',
        'beneficiaryDid' => 'string',
        'originatorVASPdid' => 'string',
        'beneficiaryVASPdid' => 'string',
        'beneficiaryVASPname' => 'string',
        'transactionBlockchainInfo' => '\Developerayo\FireblocksLaravel\Models\TravelRuleTransactionBlockchainInfo',
        'originator' => '\Developerayo\FireblocksLaravel\Models\TravelRulePiiIVMS',
        'beneficiary' => '\Developerayo\FireblocksLaravel\Models\TravelRulePiiIVMS',
        'encrypted' => 'string',
        'protocol' => 'string',
        'notificationEmail' => 'string',
        'skipBeneficiaryDataValidation' => 'bool',
        'travelRuleBehavior' => 'bool',
        'originatorProof' => '\Developerayo\FireblocksLaravel\Models\TravelRuleOwnershipProof',
        'beneficiaryProof' => '\Developerayo\FireblocksLaravel\Models\TravelRuleOwnershipProof',
        'pii' => '\Developerayo\FireblocksLaravel\Models\TravelRulePiiIVMS'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transactionAsset' => null,
        'transactionAmount' => null,
        'originatorDid' => null,
        'beneficiaryDid' => null,
        'originatorVASPdid' => null,
        'beneficiaryVASPdid' => null,
        'beneficiaryVASPname' => null,
        'transactionBlockchainInfo' => null,
        'originator' => null,
        'beneficiary' => null,
        'encrypted' => null,
        'protocol' => null,
        'notificationEmail' => null,
        'skipBeneficiaryDataValidation' => null,
        'travelRuleBehavior' => null,
        'originatorProof' => null,
        'beneficiaryProof' => null,
        'pii' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transactionAsset' => false,
        'transactionAmount' => false,
        'originatorDid' => false,
        'beneficiaryDid' => false,
        'originatorVASPdid' => false,
        'beneficiaryVASPdid' => false,
        'beneficiaryVASPname' => false,
        'transactionBlockchainInfo' => false,
        'originator' => false,
        'beneficiary' => false,
        'encrypted' => false,
        'protocol' => false,
        'notificationEmail' => false,
        'skipBeneficiaryDataValidation' => false,
        'travelRuleBehavior' => false,
        'originatorProof' => false,
        'beneficiaryProof' => false,
        'pii' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transactionAsset' => 'transactionAsset',
        'transactionAmount' => 'transactionAmount',
        'originatorDid' => 'originatorDid',
        'beneficiaryDid' => 'beneficiaryDid',
        'originatorVASPdid' => 'originatorVASPdid',
        'beneficiaryVASPdid' => 'beneficiaryVASPdid',
        'beneficiaryVASPname' => 'beneficiaryVASPname',
        'transactionBlockchainInfo' => 'transactionBlockchainInfo',
        'originator' => 'originator',
        'beneficiary' => 'beneficiary',
        'encrypted' => 'encrypted',
        'protocol' => 'protocol',
        'notificationEmail' => 'notificationEmail',
        'skipBeneficiaryDataValidation' => 'skipBeneficiaryDataValidation',
        'travelRuleBehavior' => 'travelRuleBehavior',
        'originatorProof' => 'originatorProof',
        'beneficiaryProof' => 'beneficiaryProof',
        'pii' => 'pii'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transactionAsset' => 'setTransactionAsset',
        'transactionAmount' => 'setTransactionAmount',
        'originatorDid' => 'setOriginatorDid',
        'beneficiaryDid' => 'setBeneficiaryDid',
        'originatorVASPdid' => 'setOriginatorVASPdid',
        'beneficiaryVASPdid' => 'setBeneficiaryVASPdid',
        'beneficiaryVASPname' => 'setBeneficiaryVASPname',
        'transactionBlockchainInfo' => 'setTransactionBlockchainInfo',
        'originator' => 'setOriginator',
        'beneficiary' => 'setBeneficiary',
        'encrypted' => 'setEncrypted',
        'protocol' => 'setProtocol',
        'notificationEmail' => 'setNotificationEmail',
        'skipBeneficiaryDataValidation' => 'setSkipBeneficiaryDataValidation',
        'travelRuleBehavior' => 'setTravelRuleBehavior',
        'originatorProof' => 'setOriginatorProof',
        'beneficiaryProof' => 'setBeneficiaryProof',
        'pii' => 'setPii'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transactionAsset' => 'getTransactionAsset',
        'transactionAmount' => 'getTransactionAmount',
        'originatorDid' => 'getOriginatorDid',
        'beneficiaryDid' => 'getBeneficiaryDid',
        'originatorVASPdid' => 'getOriginatorVASPdid',
        'beneficiaryVASPdid' => 'getBeneficiaryVASPdid',
        'beneficiaryVASPname' => 'getBeneficiaryVASPname',
        'transactionBlockchainInfo' => 'getTransactionBlockchainInfo',
        'originator' => 'getOriginator',
        'beneficiary' => 'getBeneficiary',
        'encrypted' => 'getEncrypted',
        'protocol' => 'getProtocol',
        'notificationEmail' => 'getNotificationEmail',
        'skipBeneficiaryDataValidation' => 'getSkipBeneficiaryDataValidation',
        'travelRuleBehavior' => 'getTravelRuleBehavior',
        'originatorProof' => 'getOriginatorProof',
        'beneficiaryProof' => 'getBeneficiaryProof',
        'pii' => 'getPii'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('transactionAsset', $data ?? [], null);
        $this->setIfExists('transactionAmount', $data ?? [], null);
        $this->setIfExists('originatorDid', $data ?? [], null);
        $this->setIfExists('beneficiaryDid', $data ?? [], null);
        $this->setIfExists('originatorVASPdid', $data ?? [], null);
        $this->setIfExists('beneficiaryVASPdid', $data ?? [], null);
        $this->setIfExists('beneficiaryVASPname', $data ?? [], null);
        $this->setIfExists('transactionBlockchainInfo', $data ?? [], null);
        $this->setIfExists('originator', $data ?? [], null);
        $this->setIfExists('beneficiary', $data ?? [], null);
        $this->setIfExists('encrypted', $data ?? [], null);
        $this->setIfExists('protocol', $data ?? [], null);
        $this->setIfExists('notificationEmail', $data ?? [], null);
        $this->setIfExists('skipBeneficiaryDataValidation', $data ?? [], null);
        $this->setIfExists('travelRuleBehavior', $data ?? [], null);
        $this->setIfExists('originatorProof', $data ?? [], null);
        $this->setIfExists('beneficiaryProof', $data ?? [], null);
        $this->setIfExists('pii', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transactionAsset'] === null) {
            $invalidProperties[] = "'transactionAsset' can't be null";
        }
        if ($this->container['transactionAmount'] === null) {
            $invalidProperties[] = "'transactionAmount' can't be null";
        }
        if ($this->container['originatorDid'] === null) {
            $invalidProperties[] = "'originatorDid' can't be null";
        }
        if ($this->container['beneficiaryDid'] === null) {
            $invalidProperties[] = "'beneficiaryDid' can't be null";
        }
        if ($this->container['originatorVASPdid'] === null) {
            $invalidProperties[] = "'originatorVASPdid' can't be null";
        }
        if ($this->container['beneficiaryVASPdid'] === null) {
            $invalidProperties[] = "'beneficiaryVASPdid' can't be null";
        }
        if ($this->container['beneficiaryVASPname'] === null) {
            $invalidProperties[] = "'beneficiaryVASPname' can't be null";
        }
        if ($this->container['transactionBlockchainInfo'] === null) {
            $invalidProperties[] = "'transactionBlockchainInfo' can't be null";
        }
        if ($this->container['originator'] === null) {
            $invalidProperties[] = "'originator' can't be null";
        }
        if ($this->container['beneficiary'] === null) {
            $invalidProperties[] = "'beneficiary' can't be null";
        }
        if ($this->container['encrypted'] === null) {
            $invalidProperties[] = "'encrypted' can't be null";
        }
        if ($this->container['protocol'] === null) {
            $invalidProperties[] = "'protocol' can't be null";
        }
        if ($this->container['notificationEmail'] === null) {
            $invalidProperties[] = "'notificationEmail' can't be null";
        }
        if ($this->container['skipBeneficiaryDataValidation'] === null) {
            $invalidProperties[] = "'skipBeneficiaryDataValidation' can't be null";
        }
        if ($this->container['travelRuleBehavior'] === null) {
            $invalidProperties[] = "'travelRuleBehavior' can't be null";
        }
        if ($this->container['originatorProof'] === null) {
            $invalidProperties[] = "'originatorProof' can't be null";
        }
        if ($this->container['beneficiaryProof'] === null) {
            $invalidProperties[] = "'beneficiaryProof' can't be null";
        }
        if ($this->container['pii'] === null) {
            $invalidProperties[] = "'pii' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transactionAsset
     *
     * @return string
     */
    public function getTransactionAsset()
    {
        return $this->container['transactionAsset'];
    }

    /**
     * Sets transactionAsset
     *
     * @param string $transactionAsset The asset involved in the transaction
     *
     * @return self
     */
    public function setTransactionAsset($transactionAsset)
    {
        if (is_null($transactionAsset)) {
            throw new \InvalidArgumentException('non-nullable transactionAsset cannot be null');
        }
        $this->container['transactionAsset'] = $transactionAsset;

        return $this;
    }

    /**
     * Gets transactionAmount
     *
     * @return string
     */
    public function getTransactionAmount()
    {
        return $this->container['transactionAmount'];
    }

    /**
     * Sets transactionAmount
     *
     * @param string $transactionAmount The amount of the transaction
     *
     * @return self
     */
    public function setTransactionAmount($transactionAmount)
    {
        if (is_null($transactionAmount)) {
            throw new \InvalidArgumentException('non-nullable transactionAmount cannot be null');
        }
        $this->container['transactionAmount'] = $transactionAmount;

        return $this;
    }

    /**
     * Gets originatorDid
     *
     * @return string
     */
    public function getOriginatorDid()
    {
        return $this->container['originatorDid'];
    }

    /**
     * Sets originatorDid
     *
     * @param string $originatorDid The DID of the transaction originator
     *
     * @return self
     */
    public function setOriginatorDid($originatorDid)
    {
        if (is_null($originatorDid)) {
            throw new \InvalidArgumentException('non-nullable originatorDid cannot be null');
        }
        $this->container['originatorDid'] = $originatorDid;

        return $this;
    }

    /**
     * Gets beneficiaryDid
     *
     * @return string
     */
    public function getBeneficiaryDid()
    {
        return $this->container['beneficiaryDid'];
    }

    /**
     * Sets beneficiaryDid
     *
     * @param string $beneficiaryDid The DID of the transaction beneficiary
     *
     * @return self
     */
    public function setBeneficiaryDid($beneficiaryDid)
    {
        if (is_null($beneficiaryDid)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryDid cannot be null');
        }
        $this->container['beneficiaryDid'] = $beneficiaryDid;

        return $this;
    }

    /**
     * Gets originatorVASPdid
     *
     * @return string
     */
    public function getOriginatorVASPdid()
    {
        return $this->container['originatorVASPdid'];
    }

    /**
     * Sets originatorVASPdid
     *
     * @param string $originatorVASPdid The VASP ID of the transaction originator
     *
     * @return self
     */
    public function setOriginatorVASPdid($originatorVASPdid)
    {
        if (is_null($originatorVASPdid)) {
            throw new \InvalidArgumentException('non-nullable originatorVASPdid cannot be null');
        }
        $this->container['originatorVASPdid'] = $originatorVASPdid;

        return $this;
    }

    /**
     * Gets beneficiaryVASPdid
     *
     * @return string
     */
    public function getBeneficiaryVASPdid()
    {
        return $this->container['beneficiaryVASPdid'];
    }

    /**
     * Sets beneficiaryVASPdid
     *
     * @param string $beneficiaryVASPdid The VASP ID of the transaction beneficiary
     *
     * @return self
     */
    public function setBeneficiaryVASPdid($beneficiaryVASPdid)
    {
        if (is_null($beneficiaryVASPdid)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryVASPdid cannot be null');
        }
        $this->container['beneficiaryVASPdid'] = $beneficiaryVASPdid;

        return $this;
    }

    /**
     * Gets beneficiaryVASPname
     *
     * @return string
     */
    public function getBeneficiaryVASPname()
    {
        return $this->container['beneficiaryVASPname'];
    }

    /**
     * Sets beneficiaryVASPname
     *
     * @param string $beneficiaryVASPname The name of the VASP acting as the beneficiary
     *
     * @return self
     */
    public function setBeneficiaryVASPname($beneficiaryVASPname)
    {
        if (is_null($beneficiaryVASPname)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryVASPname cannot be null');
        }
        $this->container['beneficiaryVASPname'] = $beneficiaryVASPname;

        return $this;
    }

    /**
     * Gets transactionBlockchainInfo
     *
     * @return \Developerayo\FireblocksLaravel\Models\TravelRuleTransactionBlockchainInfo
     */
    public function getTransactionBlockchainInfo()
    {
        return $this->container['transactionBlockchainInfo'];
    }

    /**
     * Sets transactionBlockchainInfo
     *
     * @param \Developerayo\FireblocksLaravel\Models\TravelRuleTransactionBlockchainInfo $transactionBlockchainInfo Information about the blockchain transaction
     *
     * @return self
     */
    public function setTransactionBlockchainInfo($transactionBlockchainInfo)
    {
        if (is_null($transactionBlockchainInfo)) {
            throw new \InvalidArgumentException('non-nullable transactionBlockchainInfo cannot be null');
        }
        $this->container['transactionBlockchainInfo'] = $transactionBlockchainInfo;

        return $this;
    }

    /**
     * Gets originator
     *
     * @return \Developerayo\FireblocksLaravel\Models\TravelRulePiiIVMS
     */
    public function getOriginator()
    {
        return $this->container['originator'];
    }

    /**
     * Sets originator
     *
     * @param \Developerayo\FireblocksLaravel\Models\TravelRulePiiIVMS $originator Information about the originator of the transaction
     *
     * @return self
     */
    public function setOriginator($originator)
    {
        if (is_null($originator)) {
            throw new \InvalidArgumentException('non-nullable originator cannot be null');
        }
        $this->container['originator'] = $originator;

        return $this;
    }

    /**
     * Gets beneficiary
     *
     * @return \Developerayo\FireblocksLaravel\Models\TravelRulePiiIVMS
     */
    public function getBeneficiary()
    {
        return $this->container['beneficiary'];
    }

    /**
     * Sets beneficiary
     *
     * @param \Developerayo\FireblocksLaravel\Models\TravelRulePiiIVMS $beneficiary Information about the beneficiary of the transaction
     *
     * @return self
     */
    public function setBeneficiary($beneficiary)
    {
        if (is_null($beneficiary)) {
            throw new \InvalidArgumentException('non-nullable beneficiary cannot be null');
        }
        $this->container['beneficiary'] = $beneficiary;

        return $this;
    }

    /**
     * Gets encrypted
     *
     * @return string
     */
    public function getEncrypted()
    {
        return $this->container['encrypted'];
    }

    /**
     * Sets encrypted
     *
     * @param string $encrypted Encrypted data related to the transaction
     *
     * @return self
     */
    public function setEncrypted($encrypted)
    {
        if (is_null($encrypted)) {
            throw new \InvalidArgumentException('non-nullable encrypted cannot be null');
        }
        $this->container['encrypted'] = $encrypted;

        return $this;
    }

    /**
     * Gets protocol
     *
     * @return string
     */
    public function getProtocol()
    {
        return $this->container['protocol'];
    }

    /**
     * Sets protocol
     *
     * @param string $protocol The protocol used to perform the travel rule
     *
     * @return self
     */
    public function setProtocol($protocol)
    {
        if (is_null($protocol)) {
            throw new \InvalidArgumentException('non-nullable protocol cannot be null');
        }
        $this->container['protocol'] = $protocol;

        return $this;
    }

    /**
     * Gets notificationEmail
     *
     * @return string
     */
    public function getNotificationEmail()
    {
        return $this->container['notificationEmail'];
    }

    /**
     * Sets notificationEmail
     *
     * @param string $notificationEmail The email address where a notification should be sent upon completion of the travel rule
     *
     * @return self
     */
    public function setNotificationEmail($notificationEmail)
    {
        if (is_null($notificationEmail)) {
            throw new \InvalidArgumentException('non-nullable notificationEmail cannot be null');
        }
        $this->container['notificationEmail'] = $notificationEmail;

        return $this;
    }

    /**
     * Gets skipBeneficiaryDataValidation
     *
     * @return bool
     */
    public function getSkipBeneficiaryDataValidation()
    {
        return $this->container['skipBeneficiaryDataValidation'];
    }

    /**
     * Sets skipBeneficiaryDataValidation
     *
     * @param bool $skipBeneficiaryDataValidation Whether to skip validation of beneficiary data
     *
     * @return self
     */
    public function setSkipBeneficiaryDataValidation($skipBeneficiaryDataValidation)
    {
        if (is_null($skipBeneficiaryDataValidation)) {
            throw new \InvalidArgumentException('non-nullable skipBeneficiaryDataValidation cannot be null');
        }
        $this->container['skipBeneficiaryDataValidation'] = $skipBeneficiaryDataValidation;

        return $this;
    }

    /**
     * Gets travelRuleBehavior
     *
     * @return bool
     */
    public function getTravelRuleBehavior()
    {
        return $this->container['travelRuleBehavior'];
    }

    /**
     * Sets travelRuleBehavior
     *
     * @param bool $travelRuleBehavior Whether to check if the transaction is a TRAVEL_RULE in the beneficiary VASP's jurisdiction
     *
     * @return self
     */
    public function setTravelRuleBehavior($travelRuleBehavior)
    {
        if (is_null($travelRuleBehavior)) {
            throw new \InvalidArgumentException('non-nullable travelRuleBehavior cannot be null');
        }
        $this->container['travelRuleBehavior'] = $travelRuleBehavior;

        return $this;
    }

    /**
     * Gets originatorProof
     *
     * @return \Developerayo\FireblocksLaravel\Models\TravelRuleOwnershipProof
     */
    public function getOriginatorProof()
    {
        return $this->container['originatorProof'];
    }

    /**
     * Sets originatorProof
     *
     * @param \Developerayo\FireblocksLaravel\Models\TravelRuleOwnershipProof $originatorProof Ownership proof related to the originator of the transaction
     *
     * @return self
     */
    public function setOriginatorProof($originatorProof)
    {
        if (is_null($originatorProof)) {
            throw new \InvalidArgumentException('non-nullable originatorProof cannot be null');
        }
        $this->container['originatorProof'] = $originatorProof;

        return $this;
    }

    /**
     * Gets beneficiaryProof
     *
     * @return \Developerayo\FireblocksLaravel\Models\TravelRuleOwnershipProof
     */
    public function getBeneficiaryProof()
    {
        return $this->container['beneficiaryProof'];
    }

    /**
     * Sets beneficiaryProof
     *
     * @param \Developerayo\FireblocksLaravel\Models\TravelRuleOwnershipProof $beneficiaryProof Ownership proof related to the beneficiary of the transaction
     *
     * @return self
     */
    public function setBeneficiaryProof($beneficiaryProof)
    {
        if (is_null($beneficiaryProof)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryProof cannot be null');
        }
        $this->container['beneficiaryProof'] = $beneficiaryProof;

        return $this;
    }

    /**
     * Gets pii
     *
     * @return \Developerayo\FireblocksLaravel\Models\TravelRulePiiIVMS
     */
    public function getPii()
    {
        return $this->container['pii'];
    }

    /**
     * Sets pii
     *
     * @param \Developerayo\FireblocksLaravel\Models\TravelRulePiiIVMS $pii Personal identifiable information related to the transaction
     *
     * @return self
     */
    public function setPii($pii)
    {
        if (is_null($pii)) {
            throw new \InvalidArgumentException('non-nullable pii cannot be null');
        }
        $this->container['pii'] = $pii;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


