<?php
/**
 * SessionDTO
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * SessionDTO Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SessionDTO implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SessionDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'userId' => 'string',
        'sessionMetadata' => '\Developerayo\FireblocksLaravel\Models\SessionMetadata',
        'vaultAccountId' => 'float',
        'feeLevel' => 'string',
        'chainIds' => 'string[]',
        'connectionType' => 'string',
        'connectionMethod' => 'string',
        'creationDate' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'userId' => null,
        'sessionMetadata' => null,
        'vaultAccountId' => null,
        'feeLevel' => null,
        'chainIds' => null,
        'connectionType' => null,
        'connectionMethod' => null,
        'creationDate' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'userId' => false,
        'sessionMetadata' => false,
        'vaultAccountId' => false,
        'feeLevel' => false,
        'chainIds' => false,
        'connectionType' => false,
        'connectionMethod' => false,
        'creationDate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'userId' => 'userId',
        'sessionMetadata' => 'sessionMetadata',
        'vaultAccountId' => 'vaultAccountId',
        'feeLevel' => 'feeLevel',
        'chainIds' => 'chainIds',
        'connectionType' => 'connectionType',
        'connectionMethod' => 'connectionMethod',
        'creationDate' => 'creationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'userId' => 'setUserId',
        'sessionMetadata' => 'setSessionMetadata',
        'vaultAccountId' => 'setVaultAccountId',
        'feeLevel' => 'setFeeLevel',
        'chainIds' => 'setChainIds',
        'connectionType' => 'setConnectionType',
        'connectionMethod' => 'setConnectionMethod',
        'creationDate' => 'setCreationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'userId' => 'getUserId',
        'sessionMetadata' => 'getSessionMetadata',
        'vaultAccountId' => 'getVaultAccountId',
        'feeLevel' => 'getFeeLevel',
        'chainIds' => 'getChainIds',
        'connectionType' => 'getConnectionType',
        'connectionMethod' => 'getConnectionMethod',
        'creationDate' => 'getCreationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const FEE_LEVEL_MEDIUM = 'MEDIUM';
    public const FEE_LEVEL_HIGH = 'HIGH';
    public const CONNECTION_TYPE_WALLET_CONNECT = 'WalletConnect';
    public const CONNECTION_METHOD_DESKTOP = 'DESKTOP';
    public const CONNECTION_METHOD_MOBILE = 'MOBILE';
    public const CONNECTION_METHOD_API = 'API';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeeLevelAllowableValues()
    {
        return [
            self::FEE_LEVEL_MEDIUM,
            self::FEE_LEVEL_HIGH,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConnectionTypeAllowableValues()
    {
        return [
            self::CONNECTION_TYPE_WALLET_CONNECT,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getConnectionMethodAllowableValues()
    {
        return [
            self::CONNECTION_METHOD_DESKTOP,
            self::CONNECTION_METHOD_MOBILE,
            self::CONNECTION_METHOD_API,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('userId', $data ?? [], null);
        $this->setIfExists('sessionMetadata', $data ?? [], null);
        $this->setIfExists('vaultAccountId', $data ?? [], null);
        $this->setIfExists('feeLevel', $data ?? [], null);
        $this->setIfExists('chainIds', $data ?? [], null);
        $this->setIfExists('connectionType', $data ?? [], null);
        $this->setIfExists('connectionMethod', $data ?? [], null);
        $this->setIfExists('creationDate', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['userId'] === null) {
            $invalidProperties[] = "'userId' can't be null";
        }
        if ($this->container['sessionMetadata'] === null) {
            $invalidProperties[] = "'sessionMetadata' can't be null";
        }
        if ($this->container['vaultAccountId'] === null) {
            $invalidProperties[] = "'vaultAccountId' can't be null";
        }
        if ($this->container['feeLevel'] === null) {
            $invalidProperties[] = "'feeLevel' can't be null";
        }
        $allowedValues = $this->getFeeLevelAllowableValues();
        if (!is_null($this->container['feeLevel']) && !in_array($this->container['feeLevel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'feeLevel', must be one of '%s'",
                $this->container['feeLevel'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['chainIds'] === null) {
            $invalidProperties[] = "'chainIds' can't be null";
        }
        if ($this->container['connectionType'] === null) {
            $invalidProperties[] = "'connectionType' can't be null";
        }
        $allowedValues = $this->getConnectionTypeAllowableValues();
        if (!is_null($this->container['connectionType']) && !in_array($this->container['connectionType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'connectionType', must be one of '%s'",
                $this->container['connectionType'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['connectionMethod'] === null) {
            $invalidProperties[] = "'connectionMethod' can't be null";
        }
        $allowedValues = $this->getConnectionMethodAllowableValues();
        if (!is_null($this->container['connectionMethod']) && !in_array($this->container['connectionMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'connectionMethod', must be one of '%s'",
                $this->container['connectionMethod'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['creationDate'] === null) {
            $invalidProperties[] = "'creationDate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id of the connection
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets userId
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['userId'];
    }

    /**
     * Sets userId
     *
     * @param string $userId Id of the user that created the connection
     *
     * @return self
     */
    public function setUserId($userId)
    {
        if (is_null($userId)) {
            throw new \InvalidArgumentException('non-nullable userId cannot be null');
        }
        $this->container['userId'] = $userId;

        return $this;
    }

    /**
     * Gets sessionMetadata
     *
     * @return \Developerayo\FireblocksLaravel\Models\SessionMetadata
     */
    public function getSessionMetadata()
    {
        return $this->container['sessionMetadata'];
    }

    /**
     * Sets sessionMetadata
     *
     * @param \Developerayo\FireblocksLaravel\Models\SessionMetadata $sessionMetadata Metadata of the connection (provided by the dApp)
     *
     * @return self
     */
    public function setSessionMetadata($sessionMetadata)
    {
        if (is_null($sessionMetadata)) {
            throw new \InvalidArgumentException('non-nullable sessionMetadata cannot be null');
        }
        $this->container['sessionMetadata'] = $sessionMetadata;

        return $this;
    }

    /**
     * Gets vaultAccountId
     *
     * @return float
     */
    public function getVaultAccountId()
    {
        return $this->container['vaultAccountId'];
    }

    /**
     * Sets vaultAccountId
     *
     * @param float $vaultAccountId The vault to connect
     *
     * @return self
     */
    public function setVaultAccountId($vaultAccountId)
    {
        if (is_null($vaultAccountId)) {
            throw new \InvalidArgumentException('non-nullable vaultAccountId cannot be null');
        }
        $this->container['vaultAccountId'] = $vaultAccountId;

        return $this;
    }

    /**
     * Gets feeLevel
     *
     * @return string
     */
    public function getFeeLevel()
    {
        return $this->container['feeLevel'];
    }

    /**
     * Sets feeLevel
     *
     * @param string $feeLevel The default fee level
     *
     * @return self
     */
    public function setFeeLevel($feeLevel)
    {
        if (is_null($feeLevel)) {
            throw new \InvalidArgumentException('non-nullable feeLevel cannot be null');
        }
        $allowedValues = $this->getFeeLevelAllowableValues();
        if (!in_array($feeLevel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'feeLevel', must be one of '%s'",
                    $feeLevel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feeLevel'] = $feeLevel;

        return $this;
    }

    /**
     * Gets chainIds
     *
     * @return string[]
     */
    public function getChainIds()
    {
        return $this->container['chainIds'];
    }

    /**
     * Sets chainIds
     *
     * @param string[] $chainIds The chains approved for the connection
     *
     * @return self
     */
    public function setChainIds($chainIds)
    {
        if (is_null($chainIds)) {
            throw new \InvalidArgumentException('non-nullable chainIds cannot be null');
        }
        $this->container['chainIds'] = $chainIds;

        return $this;
    }

    /**
     * Gets connectionType
     *
     * @return string
     */
    public function getConnectionType()
    {
        return $this->container['connectionType'];
    }

    /**
     * Sets connectionType
     *
     * @param string $connectionType The connection's type
     *
     * @return self
     */
    public function setConnectionType($connectionType)
    {
        if (is_null($connectionType)) {
            throw new \InvalidArgumentException('non-nullable connectionType cannot be null');
        }
        $allowedValues = $this->getConnectionTypeAllowableValues();
        if (!in_array($connectionType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'connectionType', must be one of '%s'",
                    $connectionType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['connectionType'] = $connectionType;

        return $this;
    }

    /**
     * Gets connectionMethod
     *
     * @return string
     */
    public function getConnectionMethod()
    {
        return $this->container['connectionMethod'];
    }

    /**
     * Sets connectionMethod
     *
     * @param string $connectionMethod The method through which the connection was established
     *
     * @return self
     */
    public function setConnectionMethod($connectionMethod)
    {
        if (is_null($connectionMethod)) {
            throw new \InvalidArgumentException('non-nullable connectionMethod cannot be null');
        }
        $allowedValues = $this->getConnectionMethodAllowableValues();
        if (!in_array($connectionMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'connectionMethod', must be one of '%s'",
                    $connectionMethod,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['connectionMethod'] = $connectionMethod;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param \DateTime $creationDate Timestamp of the session's creation
     *
     * @return self
     */
    public function setCreationDate($creationDate)
    {
        if (is_null($creationDate)) {
            throw new \InvalidArgumentException('non-nullable creationDate cannot be null');
        }
        $this->container['creationDate'] = $creationDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


