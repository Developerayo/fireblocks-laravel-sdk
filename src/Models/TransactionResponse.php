<?php
/**
 * TransactionResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * TransactionResponse Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'externalTxId' => 'string',
        'status' => 'string',
        'subStatus' => 'string',
        'txHash' => 'string',
        'operation' => '\Developerayo\FireblocksLaravel\Models\GetTransactionOperation',
        'note' => 'string',
        'assetId' => 'string',
        'source' => '\Developerayo\FireblocksLaravel\Models\SourceTransferPeerPathResponse',
        'sourceAddress' => 'string',
        'tag' => 'string',
        'destination' => '\Developerayo\FireblocksLaravel\Models\DestinationTransferPeerPathResponse',
        'destinations' => '\Developerayo\FireblocksLaravel\Models\TransactionResponseDestination[]',
        'destinationAddress' => 'string',
        'destinationAddressDescription' => 'string',
        'destinationTag' => 'string',
        'contractCallDecodedData' => '\Developerayo\FireblocksLaravel\Models\TransactionResponseContractCallDecodedData',
        'amountInfo' => '\Developerayo\FireblocksLaravel\Models\AmountInfo',
        'treatAsGrossAmount' => 'bool',
        'feeInfo' => '\Developerayo\FireblocksLaravel\Models\FeeInfo',
        'feeCurrency' => 'string',
        'networkRecords' => '\Developerayo\FireblocksLaravel\Models\NetworkRecord[]',
        'createdAt' => 'float',
        'lastUpdated' => 'float',
        'createdBy' => 'string',
        'signedBy' => 'string[]',
        'rejectedBy' => 'string',
        'authorizationInfo' => '\Developerayo\FireblocksLaravel\Models\AuthorizationInfo',
        'exchangeTxId' => 'string',
        'customerRefId' => 'string',
        'amlScreeningResult' => '\Developerayo\FireblocksLaravel\Models\AmlScreeningResult',
        'extraParameters' => '\Developerayo\FireblocksLaravel\Models\ExtraParameters',
        'signedMessages' => '\Developerayo\FireblocksLaravel\Models\SignedMessage[]',
        'numOfConfirmations' => 'float',
        'blockInfo' => '\Developerayo\FireblocksLaravel\Models\BlockInfo',
        'index' => 'float',
        'rewardInfo' => '\Developerayo\FireblocksLaravel\Models\RewardInfo',
        'systemMessages' => '\Developerayo\FireblocksLaravel\Models\SystemMessageInfo',
        'addressType' => 'string',
        'requestedAmount' => 'float',
        'amount' => 'float',
        'netAmount' => 'float',
        'amountUSD' => 'float',
        'serviceFee' => 'float',
        'fee' => 'float',
        'networkFee' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'externalTxId' => null,
        'status' => null,
        'subStatus' => null,
        'txHash' => null,
        'operation' => null,
        'note' => null,
        'assetId' => null,
        'source' => null,
        'sourceAddress' => null,
        'tag' => null,
        'destination' => null,
        'destinations' => null,
        'destinationAddress' => null,
        'destinationAddressDescription' => null,
        'destinationTag' => null,
        'contractCallDecodedData' => null,
        'amountInfo' => null,
        'treatAsGrossAmount' => null,
        'feeInfo' => null,
        'feeCurrency' => null,
        'networkRecords' => null,
        'createdAt' => null,
        'lastUpdated' => null,
        'createdBy' => null,
        'signedBy' => null,
        'rejectedBy' => null,
        'authorizationInfo' => null,
        'exchangeTxId' => null,
        'customerRefId' => null,
        'amlScreeningResult' => null,
        'extraParameters' => null,
        'signedMessages' => null,
        'numOfConfirmations' => null,
        'blockInfo' => null,
        'index' => null,
        'rewardInfo' => null,
        'systemMessages' => null,
        'addressType' => null,
        'requestedAmount' => null,
        'amount' => null,
        'netAmount' => null,
        'amountUSD' => null,
        'serviceFee' => null,
        'fee' => null,
        'networkFee' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'externalTxId' => false,
        'status' => false,
        'subStatus' => false,
        'txHash' => false,
        'operation' => false,
        'note' => false,
        'assetId' => false,
        'source' => false,
        'sourceAddress' => false,
        'tag' => false,
        'destination' => false,
        'destinations' => false,
        'destinationAddress' => false,
        'destinationAddressDescription' => false,
        'destinationTag' => false,
        'contractCallDecodedData' => false,
        'amountInfo' => false,
        'treatAsGrossAmount' => false,
        'feeInfo' => false,
        'feeCurrency' => false,
        'networkRecords' => false,
        'createdAt' => false,
        'lastUpdated' => false,
        'createdBy' => false,
        'signedBy' => false,
        'rejectedBy' => false,
        'authorizationInfo' => false,
        'exchangeTxId' => false,
        'customerRefId' => false,
        'amlScreeningResult' => false,
        'extraParameters' => false,
        'signedMessages' => false,
        'numOfConfirmations' => false,
        'blockInfo' => false,
        'index' => false,
        'rewardInfo' => false,
        'systemMessages' => false,
        'addressType' => false,
        'requestedAmount' => false,
        'amount' => false,
        'netAmount' => false,
        'amountUSD' => true,
        'serviceFee' => false,
        'fee' => false,
        'networkFee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'externalTxId' => 'externalTxId',
        'status' => 'status',
        'subStatus' => 'subStatus',
        'txHash' => 'txHash',
        'operation' => 'operation',
        'note' => 'note',
        'assetId' => 'assetId',
        'source' => 'source',
        'sourceAddress' => 'sourceAddress',
        'tag' => 'tag',
        'destination' => 'destination',
        'destinations' => 'destinations',
        'destinationAddress' => 'destinationAddress',
        'destinationAddressDescription' => 'destinationAddressDescription',
        'destinationTag' => 'destinationTag',
        'contractCallDecodedData' => 'contractCallDecodedData',
        'amountInfo' => 'amountInfo',
        'treatAsGrossAmount' => 'treatAsGrossAmount',
        'feeInfo' => 'feeInfo',
        'feeCurrency' => 'feeCurrency',
        'networkRecords' => 'networkRecords',
        'createdAt' => 'createdAt',
        'lastUpdated' => 'lastUpdated',
        'createdBy' => 'createdBy',
        'signedBy' => 'signedBy',
        'rejectedBy' => 'rejectedBy',
        'authorizationInfo' => 'authorizationInfo',
        'exchangeTxId' => 'exchangeTxId',
        'customerRefId' => 'customerRefId',
        'amlScreeningResult' => 'amlScreeningResult',
        'extraParameters' => 'extraParameters',
        'signedMessages' => 'signedMessages',
        'numOfConfirmations' => 'numOfConfirmations',
        'blockInfo' => 'blockInfo',
        'index' => 'index',
        'rewardInfo' => 'rewardInfo',
        'systemMessages' => 'systemMessages',
        'addressType' => 'addressType',
        'requestedAmount' => 'requestedAmount',
        'amount' => 'amount',
        'netAmount' => 'netAmount',
        'amountUSD' => 'amountUSD',
        'serviceFee' => 'serviceFee',
        'fee' => 'fee',
        'networkFee' => 'networkFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'externalTxId' => 'setExternalTxId',
        'status' => 'setStatus',
        'subStatus' => 'setSubStatus',
        'txHash' => 'setTxHash',
        'operation' => 'setOperation',
        'note' => 'setNote',
        'assetId' => 'setAssetId',
        'source' => 'setSource',
        'sourceAddress' => 'setSourceAddress',
        'tag' => 'setTag',
        'destination' => 'setDestination',
        'destinations' => 'setDestinations',
        'destinationAddress' => 'setDestinationAddress',
        'destinationAddressDescription' => 'setDestinationAddressDescription',
        'destinationTag' => 'setDestinationTag',
        'contractCallDecodedData' => 'setContractCallDecodedData',
        'amountInfo' => 'setAmountInfo',
        'treatAsGrossAmount' => 'setTreatAsGrossAmount',
        'feeInfo' => 'setFeeInfo',
        'feeCurrency' => 'setFeeCurrency',
        'networkRecords' => 'setNetworkRecords',
        'createdAt' => 'setCreatedAt',
        'lastUpdated' => 'setLastUpdated',
        'createdBy' => 'setCreatedBy',
        'signedBy' => 'setSignedBy',
        'rejectedBy' => 'setRejectedBy',
        'authorizationInfo' => 'setAuthorizationInfo',
        'exchangeTxId' => 'setExchangeTxId',
        'customerRefId' => 'setCustomerRefId',
        'amlScreeningResult' => 'setAmlScreeningResult',
        'extraParameters' => 'setExtraParameters',
        'signedMessages' => 'setSignedMessages',
        'numOfConfirmations' => 'setNumOfConfirmations',
        'blockInfo' => 'setBlockInfo',
        'index' => 'setIndex',
        'rewardInfo' => 'setRewardInfo',
        'systemMessages' => 'setSystemMessages',
        'addressType' => 'setAddressType',
        'requestedAmount' => 'setRequestedAmount',
        'amount' => 'setAmount',
        'netAmount' => 'setNetAmount',
        'amountUSD' => 'setAmountUSD',
        'serviceFee' => 'setServiceFee',
        'fee' => 'setFee',
        'networkFee' => 'setNetworkFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'externalTxId' => 'getExternalTxId',
        'status' => 'getStatus',
        'subStatus' => 'getSubStatus',
        'txHash' => 'getTxHash',
        'operation' => 'getOperation',
        'note' => 'getNote',
        'assetId' => 'getAssetId',
        'source' => 'getSource',
        'sourceAddress' => 'getSourceAddress',
        'tag' => 'getTag',
        'destination' => 'getDestination',
        'destinations' => 'getDestinations',
        'destinationAddress' => 'getDestinationAddress',
        'destinationAddressDescription' => 'getDestinationAddressDescription',
        'destinationTag' => 'getDestinationTag',
        'contractCallDecodedData' => 'getContractCallDecodedData',
        'amountInfo' => 'getAmountInfo',
        'treatAsGrossAmount' => 'getTreatAsGrossAmount',
        'feeInfo' => 'getFeeInfo',
        'feeCurrency' => 'getFeeCurrency',
        'networkRecords' => 'getNetworkRecords',
        'createdAt' => 'getCreatedAt',
        'lastUpdated' => 'getLastUpdated',
        'createdBy' => 'getCreatedBy',
        'signedBy' => 'getSignedBy',
        'rejectedBy' => 'getRejectedBy',
        'authorizationInfo' => 'getAuthorizationInfo',
        'exchangeTxId' => 'getExchangeTxId',
        'customerRefId' => 'getCustomerRefId',
        'amlScreeningResult' => 'getAmlScreeningResult',
        'extraParameters' => 'getExtraParameters',
        'signedMessages' => 'getSignedMessages',
        'numOfConfirmations' => 'getNumOfConfirmations',
        'blockInfo' => 'getBlockInfo',
        'index' => 'getIndex',
        'rewardInfo' => 'getRewardInfo',
        'systemMessages' => 'getSystemMessages',
        'addressType' => 'getAddressType',
        'requestedAmount' => 'getRequestedAmount',
        'amount' => 'getAmount',
        'netAmount' => 'getNetAmount',
        'amountUSD' => 'getAmountUSD',
        'serviceFee' => 'getServiceFee',
        'fee' => 'getFee',
        'networkFee' => 'getNetworkFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ADDRESS_TYPE_WHITELISTED = 'WHITELISTED';
    public const ADDRESS_TYPE_ONE_TIME = 'ONE_TIME';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAddressTypeAllowableValues()
    {
        return [
            self::ADDRESS_TYPE_WHITELISTED,
            self::ADDRESS_TYPE_ONE_TIME,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('externalTxId', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('subStatus', $data ?? [], null);
        $this->setIfExists('txHash', $data ?? [], null);
        $this->setIfExists('operation', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('assetId', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('sourceAddress', $data ?? [], null);
        $this->setIfExists('tag', $data ?? [], null);
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('destinations', $data ?? [], null);
        $this->setIfExists('destinationAddress', $data ?? [], null);
        $this->setIfExists('destinationAddressDescription', $data ?? [], null);
        $this->setIfExists('destinationTag', $data ?? [], null);
        $this->setIfExists('contractCallDecodedData', $data ?? [], null);
        $this->setIfExists('amountInfo', $data ?? [], null);
        $this->setIfExists('treatAsGrossAmount', $data ?? [], null);
        $this->setIfExists('feeInfo', $data ?? [], null);
        $this->setIfExists('feeCurrency', $data ?? [], null);
        $this->setIfExists('networkRecords', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('lastUpdated', $data ?? [], null);
        $this->setIfExists('createdBy', $data ?? [], null);
        $this->setIfExists('signedBy', $data ?? [], null);
        $this->setIfExists('rejectedBy', $data ?? [], null);
        $this->setIfExists('authorizationInfo', $data ?? [], null);
        $this->setIfExists('exchangeTxId', $data ?? [], null);
        $this->setIfExists('customerRefId', $data ?? [], null);
        $this->setIfExists('amlScreeningResult', $data ?? [], null);
        $this->setIfExists('extraParameters', $data ?? [], null);
        $this->setIfExists('signedMessages', $data ?? [], null);
        $this->setIfExists('numOfConfirmations', $data ?? [], null);
        $this->setIfExists('blockInfo', $data ?? [], null);
        $this->setIfExists('index', $data ?? [], null);
        $this->setIfExists('rewardInfo', $data ?? [], null);
        $this->setIfExists('systemMessages', $data ?? [], null);
        $this->setIfExists('addressType', $data ?? [], null);
        $this->setIfExists('requestedAmount', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('netAmount', $data ?? [], null);
        $this->setIfExists('amountUSD', $data ?? [], null);
        $this->setIfExists('serviceFee', $data ?? [], null);
        $this->setIfExists('fee', $data ?? [], null);
        $this->setIfExists('networkFee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!is_null($this->container['addressType']) && !in_array($this->container['addressType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'addressType', must be one of '%s'",
                $this->container['addressType'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id ID of the transaction.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets externalTxId
     *
     * @return string|null
     */
    public function getExternalTxId()
    {
        return $this->container['externalTxId'];
    }

    /**
     * Sets externalTxId
     *
     * @param string|null $externalTxId Unique transaction ID provided by the user. Fireblocks highly recommends setting an `externalTxId` for every transaction created, to avoid submitting the same transaction twice.
     *
     * @return self
     */
    public function setExternalTxId($externalTxId)
    {
        if (is_null($externalTxId)) {
            throw new \InvalidArgumentException('non-nullable externalTxId cannot be null');
        }
        $this->container['externalTxId'] = $externalTxId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The primary status of the transaction. For details, see [Primary transaction statuses](https://developers.fireblocks.com/reference/primary-transaction-statuses).
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subStatus
     *
     * @return string|null
     */
    public function getSubStatus()
    {
        return $this->container['subStatus'];
    }

    /**
     * Sets subStatus
     *
     * @param string|null $subStatus See [Transaction substatuses](https://developers.fireblocks.com/reference/transaction-substatuses) for the list of transaction sub statuses.
     *
     * @return self
     */
    public function setSubStatus($subStatus)
    {
        if (is_null($subStatus)) {
            throw new \InvalidArgumentException('non-nullable subStatus cannot be null');
        }
        $this->container['subStatus'] = $subStatus;

        return $this;
    }

    /**
     * Gets txHash
     *
     * @return string|null
     */
    public function getTxHash()
    {
        return $this->container['txHash'];
    }

    /**
     * Sets txHash
     *
     * @param string|null $txHash The hash of the transaction on the blockchain.  * This parameter exists if at least one of the following conditions is met:       1. The transaction’s source type is `UNKNOWN`, `WHITELISTED_ADDRESS`, `NETWORK_CONNECTION`, `ONE_TIME_ADDRESS`, `FIAT_ACCOUNT` or `GAS_STATION`.       2. The transaction’s source type is `VAULT` and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these statuses prior to changing to `FAILED` or `REJECTED`. In some instances, transactions in status `BROADCASTING` will include the txHash as well.       3. The transaction’s source type is `EXCHANGE_ACCOUNT` and the transaction’s destination type is `VAULT`, and the status is either: `CONFIRMING`, `COMPLETED`, or was in any of these status prior to changing to `FAILED`.     * In addition, the following conditions must be met:      1. The asset is a crypto asset (not fiat).      2. The transaction operation is not RAW or `TYPED_MESSAGE`.
     *
     * @return self
     */
    public function setTxHash($txHash)
    {
        if (is_null($txHash)) {
            throw new \InvalidArgumentException('non-nullable txHash cannot be null');
        }
        $this->container['txHash'] = $txHash;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return \Developerayo\FireblocksLaravel\Models\GetTransactionOperation|null
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param \Developerayo\FireblocksLaravel\Models\GetTransactionOperation|null $operation operation
     *
     * @return self
     */
    public function setOperation($operation)
    {
        if (is_null($operation)) {
            throw new \InvalidArgumentException('non-nullable operation cannot be null');
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note Custom note, not sent to the blockchain, that describes the transaction at your Fireblocks workspace.
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            throw new \InvalidArgumentException('non-nullable note cannot be null');
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets assetId
     *
     * @return string|null
     */
    public function getAssetId()
    {
        return $this->container['assetId'];
    }

    /**
     * Sets assetId
     *
     * @param string|null $assetId The ID of the asset to transfer, for `TRANSFER`, `MINT`, `BURN`, `ENABLE_ASSET`,`STAKE` ,`UNSTAKE` or `WITHDRAW` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)
     *
     * @return self
     */
    public function setAssetId($assetId)
    {
        if (is_null($assetId)) {
            throw new \InvalidArgumentException('non-nullable assetId cannot be null');
        }
        $this->container['assetId'] = $assetId;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \Developerayo\FireblocksLaravel\Models\SourceTransferPeerPathResponse|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \Developerayo\FireblocksLaravel\Models\SourceTransferPeerPathResponse|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets sourceAddress
     *
     * @return string|null
     */
    public function getSourceAddress()
    {
        return $this->container['sourceAddress'];
    }

    /**
     * Sets sourceAddress
     *
     * @param string|null $sourceAddress For account based assets only, the source address of the transaction. **Note:** If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the source address. In any other case, this parameter will be empty.
     *
     * @return self
     */
    public function setSourceAddress($sourceAddress)
    {
        if (is_null($sourceAddress)) {
            throw new \InvalidArgumentException('non-nullable sourceAddress cannot be null');
        }
        $this->container['sourceAddress'] = $sourceAddress;

        return $this;
    }

    /**
     * Gets tag
     *
     * @return string|null
     */
    public function getTag()
    {
        return $this->container['tag'];
    }

    /**
     * Sets tag
     *
     * @param string|null $tag Source address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group).
     *
     * @return self
     */
    public function setTag($tag)
    {
        if (is_null($tag)) {
            throw new \InvalidArgumentException('non-nullable tag cannot be null');
        }
        $this->container['tag'] = $tag;

        return $this;
    }

    /**
     * Gets destination
     *
     * @return \Developerayo\FireblocksLaravel\Models\DestinationTransferPeerPathResponse|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \Developerayo\FireblocksLaravel\Models\DestinationTransferPeerPathResponse|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets destinations
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionResponseDestination[]|null
     */
    public function getDestinations()
    {
        return $this->container['destinations'];
    }

    /**
     * Sets destinations
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionResponseDestination[]|null $destinations The transaction’s destinations. **Note:** In case the transaction is sent to a single destination, the `destination` parameter is used instead of this.
     *
     * @return self
     */
    public function setDestinations($destinations)
    {
        if (is_null($destinations)) {
            throw new \InvalidArgumentException('non-nullable destinations cannot be null');
        }
        $this->container['destinations'] = $destinations;

        return $this;
    }

    /**
     * Gets destinationAddress
     *
     * @return string|null
     */
    public function getDestinationAddress()
    {
        return $this->container['destinationAddress'];
    }

    /**
     * Sets destinationAddress
     *
     * @param string|null $destinationAddress Address where the asset were transferred. Notes:   - For [Multi destination transactions](https://support.fireblocks.io/hc/en-us/articles/360018447980-Multi-destination-transactions), this parameter will be empty. In this case, you should refer to the destinations field.   - If the status is `CONFIRMING`, `COMPLETED`, or has been `CONFIRMING`; then moved forward to `FAILED` or `REJECTED`, then this parameter will contain the destination address. In any other case, this parameter will be empty.
     *
     * @return self
     */
    public function setDestinationAddress($destinationAddress)
    {
        if (is_null($destinationAddress)) {
            throw new \InvalidArgumentException('non-nullable destinationAddress cannot be null');
        }
        $this->container['destinationAddress'] = $destinationAddress;

        return $this;
    }

    /**
     * Gets destinationAddressDescription
     *
     * @return string|null
     */
    public function getDestinationAddressDescription()
    {
        return $this->container['destinationAddressDescription'];
    }

    /**
     * Sets destinationAddressDescription
     *
     * @param string|null $destinationAddressDescription Description of the address.
     *
     * @return self
     */
    public function setDestinationAddressDescription($destinationAddressDescription)
    {
        if (is_null($destinationAddressDescription)) {
            throw new \InvalidArgumentException('non-nullable destinationAddressDescription cannot be null');
        }
        $this->container['destinationAddressDescription'] = $destinationAddressDescription;

        return $this;
    }

    /**
     * Gets destinationTag
     *
     * @return string|null
     */
    public function getDestinationTag()
    {
        return $this->container['destinationTag'];
    }

    /**
     * Sets destinationTag
     *
     * @param string|null $destinationTag Destination address tag for XRP, used as memo for EOS/XLM, or Bank Transfer Description for the fiat provider BLINC (by BCB Group).
     *
     * @return self
     */
    public function setDestinationTag($destinationTag)
    {
        if (is_null($destinationTag)) {
            throw new \InvalidArgumentException('non-nullable destinationTag cannot be null');
        }
        $this->container['destinationTag'] = $destinationTag;

        return $this;
    }

    /**
     * Gets contractCallDecodedData
     *
     * @return \Developerayo\FireblocksLaravel\Models\TransactionResponseContractCallDecodedData|null
     */
    public function getContractCallDecodedData()
    {
        return $this->container['contractCallDecodedData'];
    }

    /**
     * Sets contractCallDecodedData
     *
     * @param \Developerayo\FireblocksLaravel\Models\TransactionResponseContractCallDecodedData|null $contractCallDecodedData contractCallDecodedData
     *
     * @return self
     */
    public function setContractCallDecodedData($contractCallDecodedData)
    {
        if (is_null($contractCallDecodedData)) {
            throw new \InvalidArgumentException('non-nullable contractCallDecodedData cannot be null');
        }
        $this->container['contractCallDecodedData'] = $contractCallDecodedData;

        return $this;
    }

    /**
     * Gets amountInfo
     *
     * @return \Developerayo\FireblocksLaravel\Models\AmountInfo|null
     */
    public function getAmountInfo()
    {
        return $this->container['amountInfo'];
    }

    /**
     * Sets amountInfo
     *
     * @param \Developerayo\FireblocksLaravel\Models\AmountInfo|null $amountInfo amountInfo
     *
     * @return self
     */
    public function setAmountInfo($amountInfo)
    {
        if (is_null($amountInfo)) {
            throw new \InvalidArgumentException('non-nullable amountInfo cannot be null');
        }
        $this->container['amountInfo'] = $amountInfo;

        return $this;
    }

    /**
     * Gets treatAsGrossAmount
     *
     * @return bool|null
     */
    public function getTreatAsGrossAmount()
    {
        return $this->container['treatAsGrossAmount'];
    }

    /**
     * Sets treatAsGrossAmount
     *
     * @param bool|null $treatAsGrossAmount For transactions initiated via this Fireblocks workspace, when set to `true`, the fee is deducted from the requested amount.  **Note**: This parameter can only be considered if a transaction's asset is a base asset, such as ETH or MATIC. If the asset can't be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account.
     *
     * @return self
     */
    public function setTreatAsGrossAmount($treatAsGrossAmount)
    {
        if (is_null($treatAsGrossAmount)) {
            throw new \InvalidArgumentException('non-nullable treatAsGrossAmount cannot be null');
        }
        $this->container['treatAsGrossAmount'] = $treatAsGrossAmount;

        return $this;
    }

    /**
     * Gets feeInfo
     *
     * @return \Developerayo\FireblocksLaravel\Models\FeeInfo|null
     */
    public function getFeeInfo()
    {
        return $this->container['feeInfo'];
    }

    /**
     * Sets feeInfo
     *
     * @param \Developerayo\FireblocksLaravel\Models\FeeInfo|null $feeInfo feeInfo
     *
     * @return self
     */
    public function setFeeInfo($feeInfo)
    {
        if (is_null($feeInfo)) {
            throw new \InvalidArgumentException('non-nullable feeInfo cannot be null');
        }
        $this->container['feeInfo'] = $feeInfo;

        return $this;
    }

    /**
     * Gets feeCurrency
     *
     * @return string|null
     */
    public function getFeeCurrency()
    {
        return $this->container['feeCurrency'];
    }

    /**
     * Sets feeCurrency
     *
     * @param string|null $feeCurrency The asset which was withdrawn to pay the transaction fee, for example ETH for EVM-based blockchains, BTC for Tether Omni.
     *
     * @return self
     */
    public function setFeeCurrency($feeCurrency)
    {
        if (is_null($feeCurrency)) {
            throw new \InvalidArgumentException('non-nullable feeCurrency cannot be null');
        }
        $this->container['feeCurrency'] = $feeCurrency;

        return $this;
    }

    /**
     * Gets networkRecords
     *
     * @return \Developerayo\FireblocksLaravel\Models\NetworkRecord[]|null
     */
    public function getNetworkRecords()
    {
        return $this->container['networkRecords'];
    }

    /**
     * Sets networkRecords
     *
     * @param \Developerayo\FireblocksLaravel\Models\NetworkRecord[]|null $networkRecords In case a single transaction resulted with multiple transfers, for example a result of a contract call, then this parameter specifies each transfer that took place on the blockchain. In case of a single transfer transaction, this parameter is empty.
     *
     * @return self
     */
    public function setNetworkRecords($networkRecords)
    {
        if (is_null($networkRecords)) {
            throw new \InvalidArgumentException('non-nullable networkRecords cannot be null');
        }
        $this->container['networkRecords'] = $networkRecords;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return float|null
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param float|null $createdAt The transaction’s creation date and time, in unix timestamp.
     *
     * @return self
     */
    public function setCreatedAt($createdAt)
    {
        if (is_null($createdAt)) {
            throw new \InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets lastUpdated
     *
     * @return float|null
     */
    public function getLastUpdated()
    {
        return $this->container['lastUpdated'];
    }

    /**
     * Sets lastUpdated
     *
     * @param float|null $lastUpdated The transaction’s last update date and time, in unix timestamp.
     *
     * @return self
     */
    public function setLastUpdated($lastUpdated)
    {
        if (is_null($lastUpdated)) {
            throw new \InvalidArgumentException('non-nullable lastUpdated cannot be null');
        }
        $this->container['lastUpdated'] = $lastUpdated;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string|null $createdBy User ID of the initiator of the transaction.
     *
     * @return self
     */
    public function setCreatedBy($createdBy)
    {
        if (is_null($createdBy)) {
            throw new \InvalidArgumentException('non-nullable createdBy cannot be null');
        }
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets signedBy
     *
     * @return string[]|null
     */
    public function getSignedBy()
    {
        return $this->container['signedBy'];
    }

    /**
     * Sets signedBy
     *
     * @param string[]|null $signedBy User ID’s of the signers of the transaction.
     *
     * @return self
     */
    public function setSignedBy($signedBy)
    {
        if (is_null($signedBy)) {
            throw new \InvalidArgumentException('non-nullable signedBy cannot be null');
        }
        $this->container['signedBy'] = $signedBy;

        return $this;
    }

    /**
     * Gets rejectedBy
     *
     * @return string|null
     */
    public function getRejectedBy()
    {
        return $this->container['rejectedBy'];
    }

    /**
     * Sets rejectedBy
     *
     * @param string|null $rejectedBy User ID of the user that rejected the transaction (in case it was rejected).
     *
     * @return self
     */
    public function setRejectedBy($rejectedBy)
    {
        if (is_null($rejectedBy)) {
            throw new \InvalidArgumentException('non-nullable rejectedBy cannot be null');
        }
        $this->container['rejectedBy'] = $rejectedBy;

        return $this;
    }

    /**
     * Gets authorizationInfo
     *
     * @return \Developerayo\FireblocksLaravel\Models\AuthorizationInfo|null
     */
    public function getAuthorizationInfo()
    {
        return $this->container['authorizationInfo'];
    }

    /**
     * Sets authorizationInfo
     *
     * @param \Developerayo\FireblocksLaravel\Models\AuthorizationInfo|null $authorizationInfo authorizationInfo
     *
     * @return self
     */
    public function setAuthorizationInfo($authorizationInfo)
    {
        if (is_null($authorizationInfo)) {
            throw new \InvalidArgumentException('non-nullable authorizationInfo cannot be null');
        }
        $this->container['authorizationInfo'] = $authorizationInfo;

        return $this;
    }

    /**
     * Gets exchangeTxId
     *
     * @return string|null
     */
    public function getExchangeTxId()
    {
        return $this->container['exchangeTxId'];
    }

    /**
     * Sets exchangeTxId
     *
     * @param string|null $exchangeTxId If the transaction originated from an exchange, this is the ID of this transaction at the exchange.
     *
     * @return self
     */
    public function setExchangeTxId($exchangeTxId)
    {
        if (is_null($exchangeTxId)) {
            throw new \InvalidArgumentException('non-nullable exchangeTxId cannot be null');
        }
        $this->container['exchangeTxId'] = $exchangeTxId;

        return $this;
    }

    /**
     * Gets customerRefId
     *
     * @return string|null
     */
    public function getCustomerRefId()
    {
        return $this->container['customerRefId'];
    }

    /**
     * Sets customerRefId
     *
     * @param string|null $customerRefId The ID for AML providers to associate the owner of funds with transactions.
     *
     * @return self
     */
    public function setCustomerRefId($customerRefId)
    {
        if (is_null($customerRefId)) {
            throw new \InvalidArgumentException('non-nullable customerRefId cannot be null');
        }
        $this->container['customerRefId'] = $customerRefId;

        return $this;
    }

    /**
     * Gets amlScreeningResult
     *
     * @return \Developerayo\FireblocksLaravel\Models\AmlScreeningResult|null
     */
    public function getAmlScreeningResult()
    {
        return $this->container['amlScreeningResult'];
    }

    /**
     * Sets amlScreeningResult
     *
     * @param \Developerayo\FireblocksLaravel\Models\AmlScreeningResult|null $amlScreeningResult amlScreeningResult
     *
     * @return self
     */
    public function setAmlScreeningResult($amlScreeningResult)
    {
        if (is_null($amlScreeningResult)) {
            throw new \InvalidArgumentException('non-nullable amlScreeningResult cannot be null');
        }
        $this->container['amlScreeningResult'] = $amlScreeningResult;

        return $this;
    }

    /**
     * Gets extraParameters
     *
     * @return \Developerayo\FireblocksLaravel\Models\ExtraParameters|null
     */
    public function getExtraParameters()
    {
        return $this->container['extraParameters'];
    }

    /**
     * Sets extraParameters
     *
     * @param \Developerayo\FireblocksLaravel\Models\ExtraParameters|null $extraParameters extraParameters
     *
     * @return self
     */
    public function setExtraParameters($extraParameters)
    {
        if (is_null($extraParameters)) {
            throw new \InvalidArgumentException('non-nullable extraParameters cannot be null');
        }
        $this->container['extraParameters'] = $extraParameters;

        return $this;
    }

    /**
     * Gets signedMessages
     *
     * @return \Developerayo\FireblocksLaravel\Models\SignedMessage[]|null
     */
    public function getSignedMessages()
    {
        return $this->container['signedMessages'];
    }

    /**
     * Sets signedMessages
     *
     * @param \Developerayo\FireblocksLaravel\Models\SignedMessage[]|null $signedMessages signedMessages
     *
     * @return self
     */
    public function setSignedMessages($signedMessages)
    {
        if (is_null($signedMessages)) {
            throw new \InvalidArgumentException('non-nullable signedMessages cannot be null');
        }
        $this->container['signedMessages'] = $signedMessages;

        return $this;
    }

    /**
     * Gets numOfConfirmations
     *
     * @return float|null
     */
    public function getNumOfConfirmations()
    {
        return $this->container['numOfConfirmations'];
    }

    /**
     * Sets numOfConfirmations
     *
     * @param float|null $numOfConfirmations The number of confirmations of the transaction. The number will increase until the transaction will be considered completed according to the confirmation policy.
     *
     * @return self
     */
    public function setNumOfConfirmations($numOfConfirmations)
    {
        if (is_null($numOfConfirmations)) {
            throw new \InvalidArgumentException('non-nullable numOfConfirmations cannot be null');
        }
        $this->container['numOfConfirmations'] = $numOfConfirmations;

        return $this;
    }

    /**
     * Gets blockInfo
     *
     * @return \Developerayo\FireblocksLaravel\Models\BlockInfo|null
     */
    public function getBlockInfo()
    {
        return $this->container['blockInfo'];
    }

    /**
     * Sets blockInfo
     *
     * @param \Developerayo\FireblocksLaravel\Models\BlockInfo|null $blockInfo blockInfo
     *
     * @return self
     */
    public function setBlockInfo($blockInfo)
    {
        if (is_null($blockInfo)) {
            throw new \InvalidArgumentException('non-nullable blockInfo cannot be null');
        }
        $this->container['blockInfo'] = $blockInfo;

        return $this;
    }

    /**
     * Gets index
     *
     * @return float|null
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param float|null $index For UTXO based assets this is the vOut, for Ethereum based, this is the index of the event of the contract call.  **Note:** This field is not returned if a transaction uses the `destinations` object with more than one value.
     *
     * @return self
     */
    public function setIndex($index)
    {
        if (is_null($index)) {
            throw new \InvalidArgumentException('non-nullable index cannot be null');
        }
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets rewardInfo
     *
     * @return \Developerayo\FireblocksLaravel\Models\RewardInfo|null
     */
    public function getRewardInfo()
    {
        return $this->container['rewardInfo'];
    }

    /**
     * Sets rewardInfo
     *
     * @param \Developerayo\FireblocksLaravel\Models\RewardInfo|null $rewardInfo rewardInfo
     *
     * @return self
     */
    public function setRewardInfo($rewardInfo)
    {
        if (is_null($rewardInfo)) {
            throw new \InvalidArgumentException('non-nullable rewardInfo cannot be null');
        }
        $this->container['rewardInfo'] = $rewardInfo;

        return $this;
    }

    /**
     * Gets systemMessages
     *
     * @return \Developerayo\FireblocksLaravel\Models\SystemMessageInfo|null
     */
    public function getSystemMessages()
    {
        return $this->container['systemMessages'];
    }

    /**
     * Sets systemMessages
     *
     * @param \Developerayo\FireblocksLaravel\Models\SystemMessageInfo|null $systemMessages systemMessages
     *
     * @return self
     */
    public function setSystemMessages($systemMessages)
    {
        if (is_null($systemMessages)) {
            throw new \InvalidArgumentException('non-nullable systemMessages cannot be null');
        }
        $this->container['systemMessages'] = $systemMessages;

        return $this;
    }

    /**
     * Gets addressType
     *
     * @return string|null
     */
    public function getAddressType()
    {
        return $this->container['addressType'];
    }

    /**
     * Sets addressType
     *
     * @param string|null $addressType addressType
     *
     * @return self
     */
    public function setAddressType($addressType)
    {
        if (is_null($addressType)) {
            throw new \InvalidArgumentException('non-nullable addressType cannot be null');
        }
        $allowedValues = $this->getAddressTypeAllowableValues();
        if (!in_array($addressType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'addressType', must be one of '%s'",
                    $addressType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['addressType'] = $addressType;

        return $this;
    }

    /**
     * Gets requestedAmount
     *
     * @return float|null
     * @deprecated
     */
    public function getRequestedAmount()
    {
        return $this->container['requestedAmount'];
    }

    /**
     * Sets requestedAmount
     *
     * @param float|null $requestedAmount The amount requested by the user. Deprecated - please use the `amountInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setRequestedAmount($requestedAmount)
    {
        if (is_null($requestedAmount)) {
            throw new \InvalidArgumentException('non-nullable requestedAmount cannot be null');
        }
        $this->container['requestedAmount'] = $requestedAmount;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     * @deprecated
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount If the transfer is a withdrawal from an exchange, the actual amount that was requested to be transferred. Otherwise, the requested amount. Deprecated - please use the `amountInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets netAmount
     *
     * @return float|null
     * @deprecated
     */
    public function getNetAmount()
    {
        return $this->container['netAmount'];
    }

    /**
     * Sets netAmount
     *
     * @param float|null $netAmount The net amount of the transaction, after fee deduction. Deprecated - please use the `amountInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setNetAmount($netAmount)
    {
        if (is_null($netAmount)) {
            throw new \InvalidArgumentException('non-nullable netAmount cannot be null');
        }
        $this->container['netAmount'] = $netAmount;

        return $this;
    }

    /**
     * Gets amountUSD
     *
     * @return float|null
     * @deprecated
     */
    public function getAmountUSD()
    {
        return $this->container['amountUSD'];
    }

    /**
     * Sets amountUSD
     *
     * @param float|null $amountUSD The USD value of the requested amount. Deprecated - please use the `amountInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setAmountUSD($amountUSD)
    {
        if (is_null($amountUSD)) {
            array_push($this->openAPINullablesSetToNull, 'amountUSD');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amountUSD', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amountUSD'] = $amountUSD;

        return $this;
    }

    /**
     * Gets serviceFee
     *
     * @return float|null
     * @deprecated
     */
    public function getServiceFee()
    {
        return $this->container['serviceFee'];
    }

    /**
     * Sets serviceFee
     *
     * @param float|null $serviceFee The total fee deducted by the exchange from the actual requested amount (`serviceFee` = `amount` - `netAmount`). Deprecated - please use the `feeInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setServiceFee($serviceFee)
    {
        if (is_null($serviceFee)) {
            throw new \InvalidArgumentException('non-nullable serviceFee cannot be null');
        }
        $this->container['serviceFee'] = $serviceFee;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float|null
     * @deprecated
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float|null $fee Deprecated - please use the `feeInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setFee($fee)
    {
        if (is_null($fee)) {
            throw new \InvalidArgumentException('non-nullable fee cannot be null');
        }
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets networkFee
     *
     * @return float|null
     * @deprecated
     */
    public function getNetworkFee()
    {
        return $this->container['networkFee'];
    }

    /**
     * Sets networkFee
     *
     * @param float|null $networkFee The fee paid to the network. Deprecated - please use the `feeInfo` field for accuracy.
     *
     * @return self
     * @deprecated
     */
    public function setNetworkFee($networkFee)
    {
        if (is_null($networkFee)) {
            throw new \InvalidArgumentException('non-nullable networkFee cannot be null');
        }
        $this->container['networkFee'] = $networkFee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


