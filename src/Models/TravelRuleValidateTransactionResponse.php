<?php
/**
 * TravelRuleValidateTransactionResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * TravelRuleValidateTransactionResponse Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TravelRuleValidateTransactionResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TravelRuleValidateTransactionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'isValid' => 'bool',
        'type' => 'string',
        'beneficiaryAddressType' => 'string',
        'addressSource' => 'string',
        'beneficiaryVASPdid' => 'string',
        'beneficiaryVASPname' => 'string',
        'warnings' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'isValid' => null,
        'type' => null,
        'beneficiaryAddressType' => null,
        'addressSource' => null,
        'beneficiaryVASPdid' => null,
        'beneficiaryVASPname' => null,
        'warnings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'isValid' => false,
        'type' => false,
        'beneficiaryAddressType' => false,
        'addressSource' => false,
        'beneficiaryVASPdid' => false,
        'beneficiaryVASPname' => false,
        'warnings' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'isValid' => 'isValid',
        'type' => 'type',
        'beneficiaryAddressType' => 'beneficiaryAddressType',
        'addressSource' => 'addressSource',
        'beneficiaryVASPdid' => 'beneficiaryVASPdid',
        'beneficiaryVASPname' => 'beneficiaryVASPname',
        'warnings' => 'warnings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'isValid' => 'setIsValid',
        'type' => 'setType',
        'beneficiaryAddressType' => 'setBeneficiaryAddressType',
        'addressSource' => 'setAddressSource',
        'beneficiaryVASPdid' => 'setBeneficiaryVASPdid',
        'beneficiaryVASPname' => 'setBeneficiaryVASPname',
        'warnings' => 'setWarnings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'isValid' => 'getIsValid',
        'type' => 'getType',
        'beneficiaryAddressType' => 'getBeneficiaryAddressType',
        'addressSource' => 'getAddressSource',
        'beneficiaryVASPdid' => 'getBeneficiaryVASPdid',
        'beneficiaryVASPname' => 'getBeneficiaryVASPname',
        'warnings' => 'getWarnings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('isValid', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('beneficiaryAddressType', $data ?? [], null);
        $this->setIfExists('addressSource', $data ?? [], null);
        $this->setIfExists('beneficiaryVASPdid', $data ?? [], null);
        $this->setIfExists('beneficiaryVASPname', $data ?? [], null);
        $this->setIfExists('warnings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['isValid'] === null) {
            $invalidProperties[] = "'isValid' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['beneficiaryAddressType'] === null) {
            $invalidProperties[] = "'beneficiaryAddressType' can't be null";
        }
        if ($this->container['addressSource'] === null) {
            $invalidProperties[] = "'addressSource' can't be null";
        }
        if ($this->container['beneficiaryVASPdid'] === null) {
            $invalidProperties[] = "'beneficiaryVASPdid' can't be null";
        }
        if ($this->container['beneficiaryVASPname'] === null) {
            $invalidProperties[] = "'beneficiaryVASPname' can't be null";
        }
        if ($this->container['warnings'] === null) {
            $invalidProperties[] = "'warnings' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets isValid
     *
     * @return bool
     */
    public function getIsValid()
    {
        return $this->container['isValid'];
    }

    /**
     * Sets isValid
     *
     * @param bool $isValid \"isValid\" will tell you if you have collected all the information needed for the travel rule data transfer. Once this field = \"true\", you can move on to the next step which is to transfer the front-end information to your back-end and perform Travel Rule Transaction create
     *
     * @return self
     */
    public function setIsValid($isValid)
    {
        if (is_null($isValid)) {
            throw new \InvalidArgumentException('non-nullable isValid cannot be null');
        }
        $this->container['isValid'] = $isValid;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type \"type\" will tell you if the virtual asset value converted to FIAT value of the withdrawal request is above (=TRAVELRULE) or below (=BELOW_THRESHOLD) the threshold in your jurisdiction. If it is to an unhosted wallet which does not require travel rule information to be sent and only collected, it will say NON_CUSTODIAL.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets beneficiaryAddressType
     *
     * @return string
     */
    public function getBeneficiaryAddressType()
    {
        return $this->container['beneficiaryAddressType'];
    }

    /**
     * Sets beneficiaryAddressType
     *
     * @param string $beneficiaryAddressType \"beneficiaryAddressType\" will tell you if your blockchain analytics provider or internal address book has been able to identify the wallet address.
     *
     * @return self
     */
    public function setBeneficiaryAddressType($beneficiaryAddressType)
    {
        if (is_null($beneficiaryAddressType)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryAddressType cannot be null');
        }
        $this->container['beneficiaryAddressType'] = $beneficiaryAddressType;

        return $this;
    }

    /**
     * Gets addressSource
     *
     * @return string
     */
    public function getAddressSource()
    {
        return $this->container['addressSource'];
    }

    /**
     * Sets addressSource
     *
     * @param string $addressSource \"addressSource\" will tell you if the address was found in your internal address book or identified by the blockchain analytics provider.
     *
     * @return self
     */
    public function setAddressSource($addressSource)
    {
        if (is_null($addressSource)) {
            throw new \InvalidArgumentException('non-nullable addressSource cannot be null');
        }
        $this->container['addressSource'] = $addressSource;

        return $this;
    }

    /**
     * Gets beneficiaryVASPdid
     *
     * @return string
     */
    public function getBeneficiaryVASPdid()
    {
        return $this->container['beneficiaryVASPdid'];
    }

    /**
     * Sets beneficiaryVASPdid
     *
     * @param string $beneficiaryVASPdid The VASP DID of the beneficiary VASP
     *
     * @return self
     */
    public function setBeneficiaryVASPdid($beneficiaryVASPdid)
    {
        if (is_null($beneficiaryVASPdid)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryVASPdid cannot be null');
        }
        $this->container['beneficiaryVASPdid'] = $beneficiaryVASPdid;

        return $this;
    }

    /**
     * Gets beneficiaryVASPname
     *
     * @return string
     */
    public function getBeneficiaryVASPname()
    {
        return $this->container['beneficiaryVASPname'];
    }

    /**
     * Sets beneficiaryVASPname
     *
     * @param string $beneficiaryVASPname \"beneficiaryVASPname\" will tell you the name of the VASP that has been identified as the owner of the wallet address. This name is used in a subsequent call to get its DID.
     *
     * @return self
     */
    public function setBeneficiaryVASPname($beneficiaryVASPname)
    {
        if (is_null($beneficiaryVASPname)) {
            throw new \InvalidArgumentException('non-nullable beneficiaryVASPname cannot be null');
        }
        $this->container['beneficiaryVASPname'] = $beneficiaryVASPname;

        return $this;
    }

    /**
     * Gets warnings
     *
     * @return string[]
     */
    public function getWarnings()
    {
        return $this->container['warnings'];
    }

    /**
     * Sets warnings
     *
     * @param string[] $warnings \"errors/warnings\" will tell you what information about the beneficiary you need to collect from the sender.
     *
     * @return self
     */
    public function setWarnings($warnings)
    {
        if (is_null($warnings)) {
            throw new \InvalidArgumentException('non-nullable warnings cannot be null');
        }
        $this->container['warnings'] = $warnings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


