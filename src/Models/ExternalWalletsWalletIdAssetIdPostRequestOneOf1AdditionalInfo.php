<?php
/**
 * ExternalWalletsWalletIdAssetIdPostRequestOneOf1AdditionalInfo
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * ExternalWalletsWalletIdAssetIdPostRequestOneOf1AdditionalInfo Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExternalWalletsWalletIdAssetIdPostRequestOneOf1AdditionalInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_external_wallets__walletId___assetId__post_request_oneOf_1_additionalInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accountHolderGivenName' => 'string',
        'accountHolderSurname' => 'string',
        'accountHolderCity' => 'string',
        'accountHolderCountry' => 'string',
        'accountHolderAddress1' => 'string',
        'accountHolderAddress2' => 'string',
        'accountHolderDistrict' => 'string',
        'accountHolderPostalCode' => 'string',
        'iban' => 'string',
        'ibanCity' => 'string',
        'ibanCountry' => 'string',
        'abaRoutingNumber' => 'string',
        'abaAccountNumber' => 'string',
        'abaCountry' => 'string',
        'speiClabe' => 'string',
        'speiName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accountHolderGivenName' => null,
        'accountHolderSurname' => null,
        'accountHolderCity' => null,
        'accountHolderCountry' => null,
        'accountHolderAddress1' => null,
        'accountHolderAddress2' => null,
        'accountHolderDistrict' => null,
        'accountHolderPostalCode' => null,
        'iban' => null,
        'ibanCity' => null,
        'ibanCountry' => null,
        'abaRoutingNumber' => null,
        'abaAccountNumber' => null,
        'abaCountry' => null,
        'speiClabe' => null,
        'speiName' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accountHolderGivenName' => false,
        'accountHolderSurname' => false,
        'accountHolderCity' => false,
        'accountHolderCountry' => false,
        'accountHolderAddress1' => false,
        'accountHolderAddress2' => false,
        'accountHolderDistrict' => false,
        'accountHolderPostalCode' => false,
        'iban' => false,
        'ibanCity' => false,
        'ibanCountry' => false,
        'abaRoutingNumber' => false,
        'abaAccountNumber' => false,
        'abaCountry' => false,
        'speiClabe' => false,
        'speiName' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accountHolderGivenName' => 'accountHolderGivenName',
        'accountHolderSurname' => 'accountHolderSurname',
        'accountHolderCity' => 'accountHolderCity',
        'accountHolderCountry' => 'accountHolderCountry',
        'accountHolderAddress1' => 'accountHolderAddress1',
        'accountHolderAddress2' => 'accountHolderAddress2',
        'accountHolderDistrict' => 'accountHolderDistrict',
        'accountHolderPostalCode' => 'accountHolderPostalCode',
        'iban' => 'iban',
        'ibanCity' => 'ibanCity',
        'ibanCountry' => 'ibanCountry',
        'abaRoutingNumber' => 'abaRoutingNumber',
        'abaAccountNumber' => 'abaAccountNumber',
        'abaCountry' => 'abaCountry',
        'speiClabe' => 'speiClabe',
        'speiName' => 'speiName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accountHolderGivenName' => 'setAccountHolderGivenName',
        'accountHolderSurname' => 'setAccountHolderSurname',
        'accountHolderCity' => 'setAccountHolderCity',
        'accountHolderCountry' => 'setAccountHolderCountry',
        'accountHolderAddress1' => 'setAccountHolderAddress1',
        'accountHolderAddress2' => 'setAccountHolderAddress2',
        'accountHolderDistrict' => 'setAccountHolderDistrict',
        'accountHolderPostalCode' => 'setAccountHolderPostalCode',
        'iban' => 'setIban',
        'ibanCity' => 'setIbanCity',
        'ibanCountry' => 'setIbanCountry',
        'abaRoutingNumber' => 'setAbaRoutingNumber',
        'abaAccountNumber' => 'setAbaAccountNumber',
        'abaCountry' => 'setAbaCountry',
        'speiClabe' => 'setSpeiClabe',
        'speiName' => 'setSpeiName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accountHolderGivenName' => 'getAccountHolderGivenName',
        'accountHolderSurname' => 'getAccountHolderSurname',
        'accountHolderCity' => 'getAccountHolderCity',
        'accountHolderCountry' => 'getAccountHolderCountry',
        'accountHolderAddress1' => 'getAccountHolderAddress1',
        'accountHolderAddress2' => 'getAccountHolderAddress2',
        'accountHolderDistrict' => 'getAccountHolderDistrict',
        'accountHolderPostalCode' => 'getAccountHolderPostalCode',
        'iban' => 'getIban',
        'ibanCity' => 'getIbanCity',
        'ibanCountry' => 'getIbanCountry',
        'abaRoutingNumber' => 'getAbaRoutingNumber',
        'abaAccountNumber' => 'getAbaAccountNumber',
        'abaCountry' => 'getAbaCountry',
        'speiClabe' => 'getSpeiClabe',
        'speiName' => 'getSpeiName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('accountHolderGivenName', $data ?? [], null);
        $this->setIfExists('accountHolderSurname', $data ?? [], null);
        $this->setIfExists('accountHolderCity', $data ?? [], null);
        $this->setIfExists('accountHolderCountry', $data ?? [], null);
        $this->setIfExists('accountHolderAddress1', $data ?? [], null);
        $this->setIfExists('accountHolderAddress2', $data ?? [], null);
        $this->setIfExists('accountHolderDistrict', $data ?? [], null);
        $this->setIfExists('accountHolderPostalCode', $data ?? [], null);
        $this->setIfExists('iban', $data ?? [], null);
        $this->setIfExists('ibanCity', $data ?? [], null);
        $this->setIfExists('ibanCountry', $data ?? [], null);
        $this->setIfExists('abaRoutingNumber', $data ?? [], null);
        $this->setIfExists('abaAccountNumber', $data ?? [], null);
        $this->setIfExists('abaCountry', $data ?? [], null);
        $this->setIfExists('speiClabe', $data ?? [], null);
        $this->setIfExists('speiName', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['accountHolderGivenName'] === null) {
            $invalidProperties[] = "'accountHolderGivenName' can't be null";
        }
        if ($this->container['accountHolderCity'] === null) {
            $invalidProperties[] = "'accountHolderCity' can't be null";
        }
        if ($this->container['accountHolderCountry'] === null) {
            $invalidProperties[] = "'accountHolderCountry' can't be null";
        }
        if ($this->container['accountHolderAddress1'] === null) {
            $invalidProperties[] = "'accountHolderAddress1' can't be null";
        }
        if ($this->container['accountHolderPostalCode'] === null) {
            $invalidProperties[] = "'accountHolderPostalCode' can't be null";
        }
        if ($this->container['iban'] === null) {
            $invalidProperties[] = "'iban' can't be null";
        }
        if ($this->container['ibanCity'] === null) {
            $invalidProperties[] = "'ibanCity' can't be null";
        }
        if ($this->container['ibanCountry'] === null) {
            $invalidProperties[] = "'ibanCountry' can't be null";
        }
        if ($this->container['abaRoutingNumber'] === null) {
            $invalidProperties[] = "'abaRoutingNumber' can't be null";
        }
        if ($this->container['abaAccountNumber'] === null) {
            $invalidProperties[] = "'abaAccountNumber' can't be null";
        }
        if ($this->container['abaCountry'] === null) {
            $invalidProperties[] = "'abaCountry' can't be null";
        }
        if ($this->container['speiClabe'] === null) {
            $invalidProperties[] = "'speiClabe' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accountHolderGivenName
     *
     * @return string
     */
    public function getAccountHolderGivenName()
    {
        return $this->container['accountHolderGivenName'];
    }

    /**
     * Sets accountHolderGivenName
     *
     * @param string $accountHolderGivenName accountHolderGivenName
     *
     * @return self
     */
    public function setAccountHolderGivenName($accountHolderGivenName)
    {
        if (is_null($accountHolderGivenName)) {
            throw new \InvalidArgumentException('non-nullable accountHolderGivenName cannot be null');
        }
        $this->container['accountHolderGivenName'] = $accountHolderGivenName;

        return $this;
    }

    /**
     * Gets accountHolderSurname
     *
     * @return string|null
     */
    public function getAccountHolderSurname()
    {
        return $this->container['accountHolderSurname'];
    }

    /**
     * Sets accountHolderSurname
     *
     * @param string|null $accountHolderSurname accountHolderSurname
     *
     * @return self
     */
    public function setAccountHolderSurname($accountHolderSurname)
    {
        if (is_null($accountHolderSurname)) {
            throw new \InvalidArgumentException('non-nullable accountHolderSurname cannot be null');
        }
        $this->container['accountHolderSurname'] = $accountHolderSurname;

        return $this;
    }

    /**
     * Gets accountHolderCity
     *
     * @return string
     */
    public function getAccountHolderCity()
    {
        return $this->container['accountHolderCity'];
    }

    /**
     * Sets accountHolderCity
     *
     * @param string $accountHolderCity accountHolderCity
     *
     * @return self
     */
    public function setAccountHolderCity($accountHolderCity)
    {
        if (is_null($accountHolderCity)) {
            throw new \InvalidArgumentException('non-nullable accountHolderCity cannot be null');
        }
        $this->container['accountHolderCity'] = $accountHolderCity;

        return $this;
    }

    /**
     * Gets accountHolderCountry
     *
     * @return string
     */
    public function getAccountHolderCountry()
    {
        return $this->container['accountHolderCountry'];
    }

    /**
     * Sets accountHolderCountry
     *
     * @param string $accountHolderCountry accountHolderCountry
     *
     * @return self
     */
    public function setAccountHolderCountry($accountHolderCountry)
    {
        if (is_null($accountHolderCountry)) {
            throw new \InvalidArgumentException('non-nullable accountHolderCountry cannot be null');
        }
        $this->container['accountHolderCountry'] = $accountHolderCountry;

        return $this;
    }

    /**
     * Gets accountHolderAddress1
     *
     * @return string
     */
    public function getAccountHolderAddress1()
    {
        return $this->container['accountHolderAddress1'];
    }

    /**
     * Sets accountHolderAddress1
     *
     * @param string $accountHolderAddress1 accountHolderAddress1
     *
     * @return self
     */
    public function setAccountHolderAddress1($accountHolderAddress1)
    {
        if (is_null($accountHolderAddress1)) {
            throw new \InvalidArgumentException('non-nullable accountHolderAddress1 cannot be null');
        }
        $this->container['accountHolderAddress1'] = $accountHolderAddress1;

        return $this;
    }

    /**
     * Gets accountHolderAddress2
     *
     * @return string|null
     */
    public function getAccountHolderAddress2()
    {
        return $this->container['accountHolderAddress2'];
    }

    /**
     * Sets accountHolderAddress2
     *
     * @param string|null $accountHolderAddress2 accountHolderAddress2
     *
     * @return self
     */
    public function setAccountHolderAddress2($accountHolderAddress2)
    {
        if (is_null($accountHolderAddress2)) {
            throw new \InvalidArgumentException('non-nullable accountHolderAddress2 cannot be null');
        }
        $this->container['accountHolderAddress2'] = $accountHolderAddress2;

        return $this;
    }

    /**
     * Gets accountHolderDistrict
     *
     * @return string|null
     */
    public function getAccountHolderDistrict()
    {
        return $this->container['accountHolderDistrict'];
    }

    /**
     * Sets accountHolderDistrict
     *
     * @param string|null $accountHolderDistrict accountHolderDistrict
     *
     * @return self
     */
    public function setAccountHolderDistrict($accountHolderDistrict)
    {
        if (is_null($accountHolderDistrict)) {
            throw new \InvalidArgumentException('non-nullable accountHolderDistrict cannot be null');
        }
        $this->container['accountHolderDistrict'] = $accountHolderDistrict;

        return $this;
    }

    /**
     * Gets accountHolderPostalCode
     *
     * @return string
     */
    public function getAccountHolderPostalCode()
    {
        return $this->container['accountHolderPostalCode'];
    }

    /**
     * Sets accountHolderPostalCode
     *
     * @param string $accountHolderPostalCode accountHolderPostalCode
     *
     * @return self
     */
    public function setAccountHolderPostalCode($accountHolderPostalCode)
    {
        if (is_null($accountHolderPostalCode)) {
            throw new \InvalidArgumentException('non-nullable accountHolderPostalCode cannot be null');
        }
        $this->container['accountHolderPostalCode'] = $accountHolderPostalCode;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban iban
     *
     * @return self
     */
    public function setIban($iban)
    {
        if (is_null($iban)) {
            throw new \InvalidArgumentException('non-nullable iban cannot be null');
        }
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets ibanCity
     *
     * @return string
     */
    public function getIbanCity()
    {
        return $this->container['ibanCity'];
    }

    /**
     * Sets ibanCity
     *
     * @param string $ibanCity ibanCity
     *
     * @return self
     */
    public function setIbanCity($ibanCity)
    {
        if (is_null($ibanCity)) {
            throw new \InvalidArgumentException('non-nullable ibanCity cannot be null');
        }
        $this->container['ibanCity'] = $ibanCity;

        return $this;
    }

    /**
     * Gets ibanCountry
     *
     * @return string
     */
    public function getIbanCountry()
    {
        return $this->container['ibanCountry'];
    }

    /**
     * Sets ibanCountry
     *
     * @param string $ibanCountry ibanCountry
     *
     * @return self
     */
    public function setIbanCountry($ibanCountry)
    {
        if (is_null($ibanCountry)) {
            throw new \InvalidArgumentException('non-nullable ibanCountry cannot be null');
        }
        $this->container['ibanCountry'] = $ibanCountry;

        return $this;
    }

    /**
     * Gets abaRoutingNumber
     *
     * @return string
     */
    public function getAbaRoutingNumber()
    {
        return $this->container['abaRoutingNumber'];
    }

    /**
     * Sets abaRoutingNumber
     *
     * @param string $abaRoutingNumber abaRoutingNumber
     *
     * @return self
     */
    public function setAbaRoutingNumber($abaRoutingNumber)
    {
        if (is_null($abaRoutingNumber)) {
            throw new \InvalidArgumentException('non-nullable abaRoutingNumber cannot be null');
        }
        $this->container['abaRoutingNumber'] = $abaRoutingNumber;

        return $this;
    }

    /**
     * Gets abaAccountNumber
     *
     * @return string
     */
    public function getAbaAccountNumber()
    {
        return $this->container['abaAccountNumber'];
    }

    /**
     * Sets abaAccountNumber
     *
     * @param string $abaAccountNumber abaAccountNumber
     *
     * @return self
     */
    public function setAbaAccountNumber($abaAccountNumber)
    {
        if (is_null($abaAccountNumber)) {
            throw new \InvalidArgumentException('non-nullable abaAccountNumber cannot be null');
        }
        $this->container['abaAccountNumber'] = $abaAccountNumber;

        return $this;
    }

    /**
     * Gets abaCountry
     *
     * @return string
     */
    public function getAbaCountry()
    {
        return $this->container['abaCountry'];
    }

    /**
     * Sets abaCountry
     *
     * @param string $abaCountry abaCountry
     *
     * @return self
     */
    public function setAbaCountry($abaCountry)
    {
        if (is_null($abaCountry)) {
            throw new \InvalidArgumentException('non-nullable abaCountry cannot be null');
        }
        $this->container['abaCountry'] = $abaCountry;

        return $this;
    }

    /**
     * Gets speiClabe
     *
     * @return string
     */
    public function getSpeiClabe()
    {
        return $this->container['speiClabe'];
    }

    /**
     * Sets speiClabe
     *
     * @param string $speiClabe speiClabe
     *
     * @return self
     */
    public function setSpeiClabe($speiClabe)
    {
        if (is_null($speiClabe)) {
            throw new \InvalidArgumentException('non-nullable speiClabe cannot be null');
        }
        $this->container['speiClabe'] = $speiClabe;

        return $this;
    }

    /**
     * Gets speiName
     *
     * @return string|null
     */
    public function getSpeiName()
    {
        return $this->container['speiName'];
    }

    /**
     * Sets speiName
     *
     * @param string|null $speiName speiName
     *
     * @return self
     */
    public function setSpeiName($speiName)
    {
        if (is_null($speiName)) {
            throw new \InvalidArgumentException('non-nullable speiName cannot be null');
        }
        $this->container['speiName'] = $speiName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


