<?php
/**
 * TransactionFee
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * TransactionFee Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionFee implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionFee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'feePerByte' => 'string',
        'gasPrice' => 'string',
        'gasLimit' => 'string',
        'networkFee' => 'string',
        'baseFee' => 'string',
        'priorityFee' => 'string',
        'maxFeePerGasDelta' => 'string',
        'l1Fee' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'feePerByte' => null,
        'gasPrice' => null,
        'gasLimit' => null,
        'networkFee' => null,
        'baseFee' => null,
        'priorityFee' => null,
        'maxFeePerGasDelta' => null,
        'l1Fee' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'feePerByte' => false,
        'gasPrice' => false,
        'gasLimit' => false,
        'networkFee' => false,
        'baseFee' => false,
        'priorityFee' => false,
        'maxFeePerGasDelta' => false,
        'l1Fee' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feePerByte' => 'feePerByte',
        'gasPrice' => 'gasPrice',
        'gasLimit' => 'gasLimit',
        'networkFee' => 'networkFee',
        'baseFee' => 'baseFee',
        'priorityFee' => 'priorityFee',
        'maxFeePerGasDelta' => 'maxFeePerGasDelta',
        'l1Fee' => 'l1Fee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feePerByte' => 'setFeePerByte',
        'gasPrice' => 'setGasPrice',
        'gasLimit' => 'setGasLimit',
        'networkFee' => 'setNetworkFee',
        'baseFee' => 'setBaseFee',
        'priorityFee' => 'setPriorityFee',
        'maxFeePerGasDelta' => 'setMaxFeePerGasDelta',
        'l1Fee' => 'setL1Fee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feePerByte' => 'getFeePerByte',
        'gasPrice' => 'getGasPrice',
        'gasLimit' => 'getGasLimit',
        'networkFee' => 'getNetworkFee',
        'baseFee' => 'getBaseFee',
        'priorityFee' => 'getPriorityFee',
        'maxFeePerGasDelta' => 'getMaxFeePerGasDelta',
        'l1Fee' => 'getL1Fee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('feePerByte', $data ?? [], null);
        $this->setIfExists('gasPrice', $data ?? [], null);
        $this->setIfExists('gasLimit', $data ?? [], null);
        $this->setIfExists('networkFee', $data ?? [], null);
        $this->setIfExists('baseFee', $data ?? [], null);
        $this->setIfExists('priorityFee', $data ?? [], null);
        $this->setIfExists('maxFeePerGasDelta', $data ?? [], null);
        $this->setIfExists('l1Fee', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feePerByte
     *
     * @return string|null
     */
    public function getFeePerByte()
    {
        return $this->container['feePerByte'];
    }

    /**
     * Sets feePerByte
     *
     * @param string|null $feePerByte feePerByte
     *
     * @return self
     */
    public function setFeePerByte($feePerByte)
    {
        if (is_null($feePerByte)) {
            throw new \InvalidArgumentException('non-nullable feePerByte cannot be null');
        }
        $this->container['feePerByte'] = $feePerByte;

        return $this;
    }

    /**
     * Gets gasPrice
     *
     * @return string|null
     */
    public function getGasPrice()
    {
        return $this->container['gasPrice'];
    }

    /**
     * Sets gasPrice
     *
     * @param string|null $gasPrice gasPrice
     *
     * @return self
     */
    public function setGasPrice($gasPrice)
    {
        if (is_null($gasPrice)) {
            throw new \InvalidArgumentException('non-nullable gasPrice cannot be null');
        }
        $this->container['gasPrice'] = $gasPrice;

        return $this;
    }

    /**
     * Gets gasLimit
     *
     * @return string|null
     */
    public function getGasLimit()
    {
        return $this->container['gasLimit'];
    }

    /**
     * Sets gasLimit
     *
     * @param string|null $gasLimit gasLimit
     *
     * @return self
     */
    public function setGasLimit($gasLimit)
    {
        if (is_null($gasLimit)) {
            throw new \InvalidArgumentException('non-nullable gasLimit cannot be null');
        }
        $this->container['gasLimit'] = $gasLimit;

        return $this;
    }

    /**
     * Gets networkFee
     *
     * @return string|null
     */
    public function getNetworkFee()
    {
        return $this->container['networkFee'];
    }

    /**
     * Sets networkFee
     *
     * @param string|null $networkFee networkFee
     *
     * @return self
     */
    public function setNetworkFee($networkFee)
    {
        if (is_null($networkFee)) {
            throw new \InvalidArgumentException('non-nullable networkFee cannot be null');
        }
        $this->container['networkFee'] = $networkFee;

        return $this;
    }

    /**
     * Gets baseFee
     *
     * @return string|null
     */
    public function getBaseFee()
    {
        return $this->container['baseFee'];
    }

    /**
     * Sets baseFee
     *
     * @param string|null $baseFee (optional) Base Fee according to EIP-1559 (ETH assets)
     *
     * @return self
     */
    public function setBaseFee($baseFee)
    {
        if (is_null($baseFee)) {
            throw new \InvalidArgumentException('non-nullable baseFee cannot be null');
        }
        $this->container['baseFee'] = $baseFee;

        return $this;
    }

    /**
     * Gets priorityFee
     *
     * @return string|null
     */
    public function getPriorityFee()
    {
        return $this->container['priorityFee'];
    }

    /**
     * Sets priorityFee
     *
     * @param string|null $priorityFee (optional) Priority Fee according to EIP-1559 (ETH assets)
     *
     * @return self
     */
    public function setPriorityFee($priorityFee)
    {
        if (is_null($priorityFee)) {
            throw new \InvalidArgumentException('non-nullable priorityFee cannot be null');
        }
        $this->container['priorityFee'] = $priorityFee;

        return $this;
    }

    /**
     * Gets maxFeePerGasDelta
     *
     * @return string|null
     */
    public function getMaxFeePerGasDelta()
    {
        return $this->container['maxFeePerGasDelta'];
    }

    /**
     * Sets maxFeePerGasDelta
     *
     * @param string|null $maxFeePerGasDelta (optional) Max Fee Per Gas Delta added only for EIP-1559 (ETH assets)
     *
     * @return self
     */
    public function setMaxFeePerGasDelta($maxFeePerGasDelta)
    {
        if (is_null($maxFeePerGasDelta)) {
            throw new \InvalidArgumentException('non-nullable maxFeePerGasDelta cannot be null');
        }
        $this->container['maxFeePerGasDelta'] = $maxFeePerGasDelta;

        return $this;
    }

    /**
     * Gets l1Fee
     *
     * @return string|null
     */
    public function getL1Fee()
    {
        return $this->container['l1Fee'];
    }

    /**
     * Sets l1Fee
     *
     * @param string|null $l1Fee (optional) Layer 1 fee for Layer 2 chains
     *
     * @return self
     */
    public function setL1Fee($l1Fee)
    {
        if (is_null($l1Fee)) {
            throw new \InvalidArgumentException('non-nullable l1Fee cannot be null');
        }
        $this->container['l1Fee'] = $l1Fee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


