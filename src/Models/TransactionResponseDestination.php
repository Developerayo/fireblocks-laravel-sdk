<?php
/**
 * TransactionResponseDestination
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * TransactionResponseDestination Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionResponseDestination implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionResponseDestination';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'destination' => '\Developerayo\FireblocksLaravel\Models\DestinationTransferPeerPathResponse',
        'destinationAddress' => 'mixed',
        'destinationAddressDescription' => 'mixed',
        'amount' => 'string',
        'amountUSD' => 'string',
        'amlScreeningResult' => '\Developerayo\FireblocksLaravel\Models\AmlScreeningResult',
        'customerRefId' => 'mixed',
        'authorizationInfo' => '\Developerayo\FireblocksLaravel\Models\AuthorizationInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'destination' => null,
        'destinationAddress' => null,
        'destinationAddressDescription' => null,
        'amount' => null,
        'amountUSD' => null,
        'amlScreeningResult' => null,
        'customerRefId' => null,
        'authorizationInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'destination' => false,
        'destinationAddress' => true,
        'destinationAddressDescription' => true,
        'amount' => false,
        'amountUSD' => false,
        'amlScreeningResult' => false,
        'customerRefId' => true,
        'authorizationInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'destination' => 'destination',
        'destinationAddress' => 'destinationAddress',
        'destinationAddressDescription' => 'destinationAddressDescription',
        'amount' => 'amount',
        'amountUSD' => 'amountUSD',
        'amlScreeningResult' => 'amlScreeningResult',
        'customerRefId' => 'customerRefId',
        'authorizationInfo' => 'authorizationInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'destination' => 'setDestination',
        'destinationAddress' => 'setDestinationAddress',
        'destinationAddressDescription' => 'setDestinationAddressDescription',
        'amount' => 'setAmount',
        'amountUSD' => 'setAmountUSD',
        'amlScreeningResult' => 'setAmlScreeningResult',
        'customerRefId' => 'setCustomerRefId',
        'authorizationInfo' => 'setAuthorizationInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'destination' => 'getDestination',
        'destinationAddress' => 'getDestinationAddress',
        'destinationAddressDescription' => 'getDestinationAddressDescription',
        'amount' => 'getAmount',
        'amountUSD' => 'getAmountUSD',
        'amlScreeningResult' => 'getAmlScreeningResult',
        'customerRefId' => 'getCustomerRefId',
        'authorizationInfo' => 'getAuthorizationInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('destination', $data ?? [], null);
        $this->setIfExists('destinationAddress', $data ?? [], null);
        $this->setIfExists('destinationAddressDescription', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('amountUSD', $data ?? [], null);
        $this->setIfExists('amlScreeningResult', $data ?? [], null);
        $this->setIfExists('customerRefId', $data ?? [], null);
        $this->setIfExists('authorizationInfo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets destination
     *
     * @return \Developerayo\FireblocksLaravel\Models\DestinationTransferPeerPathResponse|null
     */
    public function getDestination()
    {
        return $this->container['destination'];
    }

    /**
     * Sets destination
     *
     * @param \Developerayo\FireblocksLaravel\Models\DestinationTransferPeerPathResponse|null $destination destination
     *
     * @return self
     */
    public function setDestination($destination)
    {
        if (is_null($destination)) {
            throw new \InvalidArgumentException('non-nullable destination cannot be null');
        }
        $this->container['destination'] = $destination;

        return $this;
    }

    /**
     * Gets destinationAddress
     *
     * @return mixed|null
     */
    public function getDestinationAddress()
    {
        return $this->container['destinationAddress'];
    }

    /**
     * Sets destinationAddress
     *
     * @param mixed|null $destinationAddress Address where the asset was transferred.
     *
     * @return self
     */
    public function setDestinationAddress($destinationAddress)
    {
        if (is_null($destinationAddress)) {
            array_push($this->openAPINullablesSetToNull, 'destinationAddress');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destinationAddress', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destinationAddress'] = $destinationAddress;

        return $this;
    }

    /**
     * Gets destinationAddressDescription
     *
     * @return mixed|null
     */
    public function getDestinationAddressDescription()
    {
        return $this->container['destinationAddressDescription'];
    }

    /**
     * Sets destinationAddressDescription
     *
     * @param mixed|null $destinationAddressDescription Description of the address.
     *
     * @return self
     */
    public function setDestinationAddressDescription($destinationAddressDescription)
    {
        if (is_null($destinationAddressDescription)) {
            array_push($this->openAPINullablesSetToNull, 'destinationAddressDescription');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destinationAddressDescription', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destinationAddressDescription'] = $destinationAddressDescription;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount The amount to be sent to this destination.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets amountUSD
     *
     * @return string|null
     */
    public function getAmountUSD()
    {
        return $this->container['amountUSD'];
    }

    /**
     * Sets amountUSD
     *
     * @param string|null $amountUSD The USD value of the requested amount.
     *
     * @return self
     */
    public function setAmountUSD($amountUSD)
    {
        if (is_null($amountUSD)) {
            throw new \InvalidArgumentException('non-nullable amountUSD cannot be null');
        }
        $this->container['amountUSD'] = $amountUSD;

        return $this;
    }

    /**
     * Gets amlScreeningResult
     *
     * @return \Developerayo\FireblocksLaravel\Models\AmlScreeningResult|null
     */
    public function getAmlScreeningResult()
    {
        return $this->container['amlScreeningResult'];
    }

    /**
     * Sets amlScreeningResult
     *
     * @param \Developerayo\FireblocksLaravel\Models\AmlScreeningResult|null $amlScreeningResult amlScreeningResult
     *
     * @return self
     */
    public function setAmlScreeningResult($amlScreeningResult)
    {
        if (is_null($amlScreeningResult)) {
            throw new \InvalidArgumentException('non-nullable amlScreeningResult cannot be null');
        }
        $this->container['amlScreeningResult'] = $amlScreeningResult;

        return $this;
    }

    /**
     * Gets customerRefId
     *
     * @return mixed|null
     */
    public function getCustomerRefId()
    {
        return $this->container['customerRefId'];
    }

    /**
     * Sets customerRefId
     *
     * @param mixed|null $customerRefId The ID for AML providers to associate the owner of funds with transactions.
     *
     * @return self
     */
    public function setCustomerRefId($customerRefId)
    {
        if (is_null($customerRefId)) {
            array_push($this->openAPINullablesSetToNull, 'customerRefId');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customerRefId', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customerRefId'] = $customerRefId;

        return $this;
    }

    /**
     * Gets authorizationInfo
     *
     * @return \Developerayo\FireblocksLaravel\Models\AuthorizationInfo|null
     */
    public function getAuthorizationInfo()
    {
        return $this->container['authorizationInfo'];
    }

    /**
     * Sets authorizationInfo
     *
     * @param \Developerayo\FireblocksLaravel\Models\AuthorizationInfo|null $authorizationInfo authorizationInfo
     *
     * @return self
     */
    public function setAuthorizationInfo($authorizationInfo)
    {
        if (is_null($authorizationInfo)) {
            throw new \InvalidArgumentException('non-nullable authorizationInfo cannot be null');
        }
        $this->container['authorizationInfo'] = $authorizationInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


