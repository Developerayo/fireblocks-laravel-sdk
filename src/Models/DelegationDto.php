<?php
/**
 * DelegationDto
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Models;

use \ArrayAccess;
use \Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * DelegationDto Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DelegationDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DelegationDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'vaultAccountId' => 'string',
        'validatorName' => 'string',
        'providerName' => 'string',
        'chainDescriptor' => 'string',
        'amount' => 'string',
        'rewardsAmount' => 'string',
        'dateCreated' => 'string',
        'status' => 'string',
        'relatedTransactions' => '\Developerayo\FireblocksLaravel\Models\RelatedTransactionDto[]',
        'validatorAddress' => 'string',
        'providerId' => 'string',
        'availableActions' => 'string[]',
        'inProgress' => 'bool',
        'inProgressTxId' => 'string',
        'blockchainPositionInfo' => '\Developerayo\FireblocksLaravel\Models\SolanaBlockchainDataDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'vaultAccountId' => null,
        'validatorName' => null,
        'providerName' => null,
        'chainDescriptor' => null,
        'amount' => null,
        'rewardsAmount' => null,
        'dateCreated' => null,
        'status' => null,
        'relatedTransactions' => null,
        'validatorAddress' => null,
        'providerId' => null,
        'availableActions' => null,
        'inProgress' => null,
        'inProgressTxId' => null,
        'blockchainPositionInfo' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'vaultAccountId' => false,
        'validatorName' => false,
        'providerName' => false,
        'chainDescriptor' => false,
        'amount' => false,
        'rewardsAmount' => false,
        'dateCreated' => false,
        'status' => false,
        'relatedTransactions' => false,
        'validatorAddress' => false,
        'providerId' => false,
        'availableActions' => false,
        'inProgress' => false,
        'inProgressTxId' => false,
        'blockchainPositionInfo' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'vaultAccountId' => 'vaultAccountId',
        'validatorName' => 'validatorName',
        'providerName' => 'providerName',
        'chainDescriptor' => 'chainDescriptor',
        'amount' => 'amount',
        'rewardsAmount' => 'rewardsAmount',
        'dateCreated' => 'dateCreated',
        'status' => 'status',
        'relatedTransactions' => 'relatedTransactions',
        'validatorAddress' => 'validatorAddress',
        'providerId' => 'providerId',
        'availableActions' => 'availableActions',
        'inProgress' => 'inProgress',
        'inProgressTxId' => 'inProgressTxId',
        'blockchainPositionInfo' => 'blockchainPositionInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'vaultAccountId' => 'setVaultAccountId',
        'validatorName' => 'setValidatorName',
        'providerName' => 'setProviderName',
        'chainDescriptor' => 'setChainDescriptor',
        'amount' => 'setAmount',
        'rewardsAmount' => 'setRewardsAmount',
        'dateCreated' => 'setDateCreated',
        'status' => 'setStatus',
        'relatedTransactions' => 'setRelatedTransactions',
        'validatorAddress' => 'setValidatorAddress',
        'providerId' => 'setProviderId',
        'availableActions' => 'setAvailableActions',
        'inProgress' => 'setInProgress',
        'inProgressTxId' => 'setInProgressTxId',
        'blockchainPositionInfo' => 'setBlockchainPositionInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'vaultAccountId' => 'getVaultAccountId',
        'validatorName' => 'getValidatorName',
        'providerName' => 'getProviderName',
        'chainDescriptor' => 'getChainDescriptor',
        'amount' => 'getAmount',
        'rewardsAmount' => 'getRewardsAmount',
        'dateCreated' => 'getDateCreated',
        'status' => 'getStatus',
        'relatedTransactions' => 'getRelatedTransactions',
        'validatorAddress' => 'getValidatorAddress',
        'providerId' => 'getProviderId',
        'availableActions' => 'getAvailableActions',
        'inProgress' => 'getInProgress',
        'inProgressTxId' => 'getInProgressTxId',
        'blockchainPositionInfo' => 'getBlockchainPositionInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ERROR = 'error';
    public const STATUS_FAILED = 'failed';
    public const STATUS_CREATING = 'creating';
    public const STATUS_CANCELED = 'canceled';
    public const STATUS_PENDING = 'pending';
    public const STATUS_ACTIVATING = 'activating';
    public const STATUS_ACTIVE = 'active';
    public const STATUS_DEACTIVATING = 'deactivating';
    public const STATUS_DEACTIVATED = 'deactivated';
    public const STATUS_WITHDRAWING = 'withdrawing';
    public const STATUS_WITHDRAWN = 'withdrawn';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ERROR,
            self::STATUS_FAILED,
            self::STATUS_CREATING,
            self::STATUS_CANCELED,
            self::STATUS_PENDING,
            self::STATUS_ACTIVATING,
            self::STATUS_ACTIVE,
            self::STATUS_DEACTIVATING,
            self::STATUS_DEACTIVATED,
            self::STATUS_WITHDRAWING,
            self::STATUS_WITHDRAWN,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('vaultAccountId', $data ?? [], null);
        $this->setIfExists('validatorName', $data ?? [], null);
        $this->setIfExists('providerName', $data ?? [], null);
        $this->setIfExists('chainDescriptor', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('rewardsAmount', $data ?? [], null);
        $this->setIfExists('dateCreated', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('relatedTransactions', $data ?? [], null);
        $this->setIfExists('validatorAddress', $data ?? [], null);
        $this->setIfExists('providerId', $data ?? [], null);
        $this->setIfExists('availableActions', $data ?? [], null);
        $this->setIfExists('inProgress', $data ?? [], null);
        $this->setIfExists('inProgressTxId', $data ?? [], null);
        $this->setIfExists('blockchainPositionInfo', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['vaultAccountId'] === null) {
            $invalidProperties[] = "'vaultAccountId' can't be null";
        }
        if ($this->container['validatorName'] === null) {
            $invalidProperties[] = "'validatorName' can't be null";
        }
        if ($this->container['providerName'] === null) {
            $invalidProperties[] = "'providerName' can't be null";
        }
        if ($this->container['chainDescriptor'] === null) {
            $invalidProperties[] = "'chainDescriptor' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['rewardsAmount'] === null) {
            $invalidProperties[] = "'rewardsAmount' can't be null";
        }
        if ($this->container['dateCreated'] === null) {
            $invalidProperties[] = "'dateCreated' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['relatedTransactions'] === null) {
            $invalidProperties[] = "'relatedTransactions' can't be null";
        }
        if ($this->container['validatorAddress'] === null) {
            $invalidProperties[] = "'validatorAddress' can't be null";
        }
        if ($this->container['providerId'] === null) {
            $invalidProperties[] = "'providerId' can't be null";
        }
        if ($this->container['availableActions'] === null) {
            $invalidProperties[] = "'availableActions' can't be null";
        }
        if ($this->container['inProgress'] === null) {
            $invalidProperties[] = "'inProgress' can't be null";
        }
        if ($this->container['blockchainPositionInfo'] === null) {
            $invalidProperties[] = "'blockchainPositionInfo' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique identifier of the staking position
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vaultAccountId
     *
     * @return string
     */
    public function getVaultAccountId()
    {
        return $this->container['vaultAccountId'];
    }

    /**
     * Sets vaultAccountId
     *
     * @param string $vaultAccountId The source vault account to stake from
     *
     * @return self
     */
    public function setVaultAccountId($vaultAccountId)
    {
        if (is_null($vaultAccountId)) {
            throw new \InvalidArgumentException('non-nullable vaultAccountId cannot be null');
        }
        $this->container['vaultAccountId'] = $vaultAccountId;

        return $this;
    }

    /**
     * Gets validatorName
     *
     * @return string
     */
    public function getValidatorName()
    {
        return $this->container['validatorName'];
    }

    /**
     * Sets validatorName
     *
     * @param string $validatorName The destination validator address name
     *
     * @return self
     */
    public function setValidatorName($validatorName)
    {
        if (is_null($validatorName)) {
            throw new \InvalidArgumentException('non-nullable validatorName cannot be null');
        }
        $this->container['validatorName'] = $validatorName;

        return $this;
    }

    /**
     * Gets providerName
     *
     * @return string
     */
    public function getProviderName()
    {
        return $this->container['providerName'];
    }

    /**
     * Sets providerName
     *
     * @param string $providerName The destination validator provider name
     *
     * @return self
     */
    public function setProviderName($providerName)
    {
        if (is_null($providerName)) {
            throw new \InvalidArgumentException('non-nullable providerName cannot be null');
        }
        $this->container['providerName'] = $providerName;

        return $this;
    }

    /**
     * Gets chainDescriptor
     *
     * @return string
     */
    public function getChainDescriptor()
    {
        return $this->container['chainDescriptor'];
    }

    /**
     * Sets chainDescriptor
     *
     * @param string $chainDescriptor The protocol identifier (e.g. \"ETH\"/ \"SOL\") to use
     *
     * @return self
     */
    public function setChainDescriptor($chainDescriptor)
    {
        if (is_null($chainDescriptor)) {
            throw new \InvalidArgumentException('non-nullable chainDescriptor cannot be null');
        }
        $this->container['chainDescriptor'] = $chainDescriptor;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount Amount of tokens to stake, measured in the staked asset unit.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets rewardsAmount
     *
     * @return string
     */
    public function getRewardsAmount()
    {
        return $this->container['rewardsAmount'];
    }

    /**
     * Sets rewardsAmount
     *
     * @param string $rewardsAmount The amount staked in the position, measured in the staked asset unit.
     *
     * @return self
     */
    public function setRewardsAmount($rewardsAmount)
    {
        if (is_null($rewardsAmount)) {
            throw new \InvalidArgumentException('non-nullable rewardsAmount cannot be null');
        }
        $this->container['rewardsAmount'] = $rewardsAmount;

        return $this;
    }

    /**
     * Gets dateCreated
     *
     * @return string
     */
    public function getDateCreated()
    {
        return $this->container['dateCreated'];
    }

    /**
     * Sets dateCreated
     *
     * @param string $dateCreated When was the request made (ISO Date).
     *
     * @return self
     */
    public function setDateCreated($dateCreated)
    {
        if (is_null($dateCreated)) {
            throw new \InvalidArgumentException('non-nullable dateCreated cannot be null');
        }
        $this->container['dateCreated'] = $dateCreated;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The current status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets relatedTransactions
     *
     * @return \Developerayo\FireblocksLaravel\Models\RelatedTransactionDto[]
     */
    public function getRelatedTransactions()
    {
        return $this->container['relatedTransactions'];
    }

    /**
     * Sets relatedTransactions
     *
     * @param \Developerayo\FireblocksLaravel\Models\RelatedTransactionDto[] $relatedTransactions An array of transaction objects related to this position. Each object includes a 'txId' representing the transaction ID and a 'completed' boolean indicating if the transaction was completed.
     *
     * @return self
     */
    public function setRelatedTransactions($relatedTransactions)
    {
        if (is_null($relatedTransactions)) {
            throw new \InvalidArgumentException('non-nullable relatedTransactions cannot be null');
        }
        $this->container['relatedTransactions'] = $relatedTransactions;

        return $this;
    }

    /**
     * Gets validatorAddress
     *
     * @return string
     */
    public function getValidatorAddress()
    {
        return $this->container['validatorAddress'];
    }

    /**
     * Sets validatorAddress
     *
     * @param string $validatorAddress The destination address of the staking transaction.
     *
     * @return self
     */
    public function setValidatorAddress($validatorAddress)
    {
        if (is_null($validatorAddress)) {
            throw new \InvalidArgumentException('non-nullable validatorAddress cannot be null');
        }
        $this->container['validatorAddress'] = $validatorAddress;

        return $this;
    }

    /**
     * Gets providerId
     *
     * @return string
     */
    public function getProviderId()
    {
        return $this->container['providerId'];
    }

    /**
     * Sets providerId
     *
     * @param string $providerId The unique identifier of the staking provider
     *
     * @return self
     */
    public function setProviderId($providerId)
    {
        if (is_null($providerId)) {
            throw new \InvalidArgumentException('non-nullable providerId cannot be null');
        }
        $this->container['providerId'] = $providerId;

        return $this;
    }

    /**
     * Gets availableActions
     *
     * @return string[]
     */
    public function getAvailableActions()
    {
        return $this->container['availableActions'];
    }

    /**
     * Sets availableActions
     *
     * @param string[] $availableActions An array of available actions that can be performed. for example, actions like \"unstake\" or \"withdraw\".
     *
     * @return self
     */
    public function setAvailableActions($availableActions)
    {
        if (is_null($availableActions)) {
            throw new \InvalidArgumentException('non-nullable availableActions cannot be null');
        }
        $this->container['availableActions'] = $availableActions;

        return $this;
    }

    /**
     * Gets inProgress
     *
     * @return bool
     */
    public function getInProgress()
    {
        return $this->container['inProgress'];
    }

    /**
     * Sets inProgress
     *
     * @param bool $inProgress Indicates whether there is an ongoing action for this position (true if ongoing, false if not).
     *
     * @return self
     */
    public function setInProgress($inProgress)
    {
        if (is_null($inProgress)) {
            throw new \InvalidArgumentException('non-nullable inProgress cannot be null');
        }
        $this->container['inProgress'] = $inProgress;

        return $this;
    }

    /**
     * Gets inProgressTxId
     *
     * @return string|null
     */
    public function getInProgressTxId()
    {
        return $this->container['inProgressTxId'];
    }

    /**
     * Sets inProgressTxId
     *
     * @param string|null $inProgressTxId The transaction ID of the ongoing request
     *
     * @return self
     */
    public function setInProgressTxId($inProgressTxId)
    {
        if (is_null($inProgressTxId)) {
            throw new \InvalidArgumentException('non-nullable inProgressTxId cannot be null');
        }
        $this->container['inProgressTxId'] = $inProgressTxId;

        return $this;
    }

    /**
     * Gets blockchainPositionInfo
     *
     * @return \Developerayo\FireblocksLaravel\Models\SolanaBlockchainDataDto
     */
    public function getBlockchainPositionInfo()
    {
        return $this->container['blockchainPositionInfo'];
    }

    /**
     * Sets blockchainPositionInfo
     *
     * @param \Developerayo\FireblocksLaravel\Models\SolanaBlockchainDataDto $blockchainPositionInfo Additional fields per blockchain - can be empty or missing if not initialized or no additional info exists. The type depends on the chainDescriptor value. For Solana (SOL), stake account address. For Ethereum (ETH), an empty object is returned as no specific data is available.
     *
     * @return self
     */
    public function setBlockchainPositionInfo($blockchainPositionInfo)
    {
        if (is_null($blockchainPositionInfo)) {
            throw new \InvalidArgumentException('non-nullable blockchainPositionInfo cannot be null');
        }
        $this->container['blockchainPositionInfo'] = $blockchainPositionInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


