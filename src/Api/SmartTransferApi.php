<?php
/**
 * SmartTransferApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Developerayo\FireblocksLaravel\ApiException;
use Developerayo\FireblocksLaravel\Configuration;
use Developerayo\FireblocksLaravel\FormDataProcessor;
use Developerayo\FireblocksLaravel\HeaderSelector;
use Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * SmartTransferApi Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SmartTransferApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'cancelTicket' => [
            'application/json',
        ],
        'createTicket' => [
            'application/json',
        ],
        'createTicketTerm' => [
            'application/json',
        ],
        'findTicketById' => [
            'application/json',
        ],
        'findTicketTermById' => [
            'application/json',
        ],
        'fulfillTicket' => [
            'application/json',
        ],
        'fundTicketTerm' => [
            'application/json',
        ],
        'getSmartTransferUserGroups' => [
            'application/json',
        ],
        'manuallyFundTicketTerm' => [
            'application/json',
        ],
        'removeTicketTerm' => [
            'application/json',
        ],
        'searchTickets' => [
            'application/json',
        ],
        'setExternalRefId' => [
            'application/json',
        ],
        'setTicketExpiration' => [
            'application/json',
        ],
        'setUserGroups' => [
            'application/json',
        ],
        'submitTicket' => [
            'application/json',
        ],
        'updateTicketTerm' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelTicket
     *
     * Cancel Ticket
     *
     * @param  string $ticketId ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelTicket'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse
     */
    public function cancelTicket($ticketId, string $contentType = self::contentTypes['cancelTicket'][0])
    {
        list($response) = $this->cancelTicketWithHttpInfo($ticketId, $contentType);
        return $response;
    }

    /**
     * Operation cancelTicketWithHttpInfo
     *
     * Cancel Ticket
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelTicket'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelTicketWithHttpInfo($ticketId, string $contentType = self::contentTypes['cancelTicket'][0])
    {
        $request = $this->cancelTicketRequest($ticketId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation cancelTicketAsync
     *
     * Cancel Ticket
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelTicketAsync($ticketId, string $contentType = self::contentTypes['cancelTicket'][0])
    {
        return $this->cancelTicketAsyncWithHttpInfo($ticketId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelTicketAsyncWithHttpInfo
     *
     * Cancel Ticket
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelTicketAsyncWithHttpInfo($ticketId, string $contentType = self::contentTypes['cancelTicket'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response';
        $request = $this->cancelTicketRequest($ticketId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelTicket'
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelTicketRequest($ticketId, string $contentType = self::contentTypes['cancelTicket'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling cancelTicket'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTicket
     *
     * Create Ticket
     *
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketDto $smartTransferCreateTicketDto smartTransferCreateTicketDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicket'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\CreateTicket201Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse
     */
    public function createTicket($smartTransferCreateTicketDto, string $contentType = self::contentTypes['createTicket'][0])
    {
        list($response) = $this->createTicketWithHttpInfo($smartTransferCreateTicketDto, $contentType);
        return $response;
    }

    /**
     * Operation createTicketWithHttpInfo
     *
     * Create Ticket
     *
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketDto $smartTransferCreateTicketDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicket'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\CreateTicket201Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTicketWithHttpInfo($smartTransferCreateTicketDto, string $contentType = self::contentTypes['createTicket'][0])
    {
        $request = $this->createTicketRequest($smartTransferCreateTicketDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\CreateTicket201Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\CreateTicket201Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\CreateTicket201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createTicketAsync
     *
     * Create Ticket
     *
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketDto $smartTransferCreateTicketDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTicketAsync($smartTransferCreateTicketDto, string $contentType = self::contentTypes['createTicket'][0])
    {
        return $this->createTicketAsyncWithHttpInfo($smartTransferCreateTicketDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTicketAsyncWithHttpInfo
     *
     * Create Ticket
     *
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketDto $smartTransferCreateTicketDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTicketAsyncWithHttpInfo($smartTransferCreateTicketDto, string $contentType = self::contentTypes['createTicket'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\CreateTicket201Response';
        $request = $this->createTicketRequest($smartTransferCreateTicketDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTicket'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketDto $smartTransferCreateTicketDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTicketRequest($smartTransferCreateTicketDto, string $contentType = self::contentTypes['createTicket'][0])
    {

        // verify the required parameter 'smartTransferCreateTicketDto' is set
        if ($smartTransferCreateTicketDto === null || (is_array($smartTransferCreateTicketDto) && count($smartTransferCreateTicketDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smartTransferCreateTicketDto when calling createTicket'
            );
        }


        $resourcePath = '/smart-transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smartTransferCreateTicketDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($smartTransferCreateTicketDto));
            } else {
                $httpBody = $smartTransferCreateTicketDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTicketTerm
     *
     * Search ticket by term ID
     *
     * @param  string $ticketId ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketTermDto $smartTransferCreateTicketTermDto smartTransferCreateTicketTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicketTerm'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\CreateTicketTerm201Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse
     */
    public function createTicketTerm($ticketId, $smartTransferCreateTicketTermDto, string $contentType = self::contentTypes['createTicketTerm'][0])
    {
        list($response) = $this->createTicketTermWithHttpInfo($ticketId, $smartTransferCreateTicketTermDto, $contentType);
        return $response;
    }

    /**
     * Operation createTicketTermWithHttpInfo
     *
     * Search ticket by term ID
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketTermDto $smartTransferCreateTicketTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicketTerm'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\CreateTicketTerm201Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTicketTermWithHttpInfo($ticketId, $smartTransferCreateTicketTermDto, string $contentType = self::contentTypes['createTicketTerm'][0])
    {
        $request = $this->createTicketTermRequest($ticketId, $smartTransferCreateTicketTermDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\CreateTicketTerm201Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\CreateTicketTerm201Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\CreateTicketTerm201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation createTicketTermAsync
     *
     * Search ticket by term ID
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketTermDto $smartTransferCreateTicketTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTicketTermAsync($ticketId, $smartTransferCreateTicketTermDto, string $contentType = self::contentTypes['createTicketTerm'][0])
    {
        return $this->createTicketTermAsyncWithHttpInfo($ticketId, $smartTransferCreateTicketTermDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTicketTermAsyncWithHttpInfo
     *
     * Search ticket by term ID
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketTermDto $smartTransferCreateTicketTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTicketTermAsyncWithHttpInfo($ticketId, $smartTransferCreateTicketTermDto, string $contentType = self::contentTypes['createTicketTerm'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\CreateTicketTerm201Response';
        $request = $this->createTicketTermRequest($ticketId, $smartTransferCreateTicketTermDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTicketTerm'
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferCreateTicketTermDto $smartTransferCreateTicketTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createTicketTermRequest($ticketId, $smartTransferCreateTicketTermDto, string $contentType = self::contentTypes['createTicketTerm'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling createTicketTerm'
            );
        }

        // verify the required parameter 'smartTransferCreateTicketTermDto' is set
        if ($smartTransferCreateTicketTermDto === null || (is_array($smartTransferCreateTicketTermDto) && count($smartTransferCreateTicketTermDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smartTransferCreateTicketTermDto when calling createTicketTerm'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/terms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smartTransferCreateTicketTermDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($smartTransferCreateTicketTermDto));
            } else {
                $httpBody = $smartTransferCreateTicketTermDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findTicketById
     *
     * Search Tickets by ID
     *
     * @param  string $ticketId ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTicketById'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse
     */
    public function findTicketById($ticketId, string $contentType = self::contentTypes['findTicketById'][0])
    {
        list($response) = $this->findTicketByIdWithHttpInfo($ticketId, $contentType);
        return $response;
    }

    /**
     * Operation findTicketByIdWithHttpInfo
     *
     * Search Tickets by ID
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTicketById'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findTicketByIdWithHttpInfo($ticketId, string $contentType = self::contentTypes['findTicketById'][0])
    {
        $request = $this->findTicketByIdRequest($ticketId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findTicketByIdAsync
     *
     * Search Tickets by ID
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTicketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTicketByIdAsync($ticketId, string $contentType = self::contentTypes['findTicketById'][0])
    {
        return $this->findTicketByIdAsyncWithHttpInfo($ticketId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findTicketByIdAsyncWithHttpInfo
     *
     * Search Tickets by ID
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTicketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTicketByIdAsyncWithHttpInfo($ticketId, string $contentType = self::contentTypes['findTicketById'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response';
        $request = $this->findTicketByIdRequest($ticketId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findTicketById'
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTicketById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findTicketByIdRequest($ticketId, string $contentType = self::contentTypes['findTicketById'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling findTicketById'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findTicketTermById
     *
     * Get Smart Transfer Ticket Term
     *
     * @param  string $ticketId ticketId (required)
     * @param  string $termId termId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTicketTermById'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse
     */
    public function findTicketTermById($ticketId, $termId, string $contentType = self::contentTypes['findTicketTermById'][0])
    {
        list($response) = $this->findTicketTermByIdWithHttpInfo($ticketId, $termId, $contentType);
        return $response;
    }

    /**
     * Operation findTicketTermByIdWithHttpInfo
     *
     * Get Smart Transfer Ticket Term
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTicketTermById'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findTicketTermByIdWithHttpInfo($ticketId, $termId, string $contentType = self::contentTypes['findTicketTermById'][0])
    {
        $request = $this->findTicketTermByIdRequest($ticketId, $termId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation findTicketTermByIdAsync
     *
     * Get Smart Transfer Ticket Term
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTicketTermById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTicketTermByIdAsync($ticketId, $termId, string $contentType = self::contentTypes['findTicketTermById'][0])
    {
        return $this->findTicketTermByIdAsyncWithHttpInfo($ticketId, $termId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findTicketTermByIdAsyncWithHttpInfo
     *
     * Get Smart Transfer Ticket Term
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTicketTermById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTicketTermByIdAsyncWithHttpInfo($ticketId, $termId, string $contentType = self::contentTypes['findTicketTermById'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response';
        $request = $this->findTicketTermByIdRequest($ticketId, $termId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findTicketTermById'
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['findTicketTermById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findTicketTermByIdRequest($ticketId, $termId, string $contentType = self::contentTypes['findTicketTermById'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling findTicketTermById'
            );
        }

        // verify the required parameter 'termId' is set
        if ($termId === null || (is_array($termId) && count($termId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termId when calling findTicketTermById'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/terms/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }
        // path params
        if ($termId !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($termId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fulfillTicket
     *
     * Fund ticket manually
     *
     * @param  string $ticketId ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fulfillTicket'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse
     */
    public function fulfillTicket($ticketId, string $contentType = self::contentTypes['fulfillTicket'][0])
    {
        list($response) = $this->fulfillTicketWithHttpInfo($ticketId, $contentType);
        return $response;
    }

    /**
     * Operation fulfillTicketWithHttpInfo
     *
     * Fund ticket manually
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fulfillTicket'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function fulfillTicketWithHttpInfo($ticketId, string $contentType = self::contentTypes['fulfillTicket'][0])
    {
        $request = $this->fulfillTicketRequest($ticketId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation fulfillTicketAsync
     *
     * Fund ticket manually
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fulfillTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fulfillTicketAsync($ticketId, string $contentType = self::contentTypes['fulfillTicket'][0])
    {
        return $this->fulfillTicketAsyncWithHttpInfo($ticketId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fulfillTicketAsyncWithHttpInfo
     *
     * Fund ticket manually
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fulfillTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fulfillTicketAsyncWithHttpInfo($ticketId, string $contentType = self::contentTypes['fulfillTicket'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response';
        $request = $this->fulfillTicketRequest($ticketId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fulfillTicket'
     *
     * @param  string $ticketId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fulfillTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fulfillTicketRequest($ticketId, string $contentType = self::contentTypes['fulfillTicket'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling fulfillTicket'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/fulfill';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fundTicketTerm
     *
     * Define funding source
     *
     * @param  string $ticketId ticketId (required)
     * @param  string $termId termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferFundTermDto $smartTransferFundTermDto smartTransferFundTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fundTicketTerm'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function fundTicketTerm($ticketId, $termId, $smartTransferFundTermDto, string $contentType = self::contentTypes['fundTicketTerm'][0])
    {
        $this->fundTicketTermWithHttpInfo($ticketId, $termId, $smartTransferFundTermDto, $contentType);
    }

    /**
     * Operation fundTicketTermWithHttpInfo
     *
     * Define funding source
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferFundTermDto $smartTransferFundTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fundTicketTerm'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fundTicketTermWithHttpInfo($ticketId, $termId, $smartTransferFundTermDto, string $contentType = self::contentTypes['fundTicketTerm'][0])
    {
        $request = $this->fundTicketTermRequest($ticketId, $termId, $smartTransferFundTermDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\CreateTicketTerm201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation fundTicketTermAsync
     *
     * Define funding source
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferFundTermDto $smartTransferFundTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fundTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fundTicketTermAsync($ticketId, $termId, $smartTransferFundTermDto, string $contentType = self::contentTypes['fundTicketTerm'][0])
    {
        return $this->fundTicketTermAsyncWithHttpInfo($ticketId, $termId, $smartTransferFundTermDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fundTicketTermAsyncWithHttpInfo
     *
     * Define funding source
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferFundTermDto $smartTransferFundTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fundTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fundTicketTermAsyncWithHttpInfo($ticketId, $termId, $smartTransferFundTermDto, string $contentType = self::contentTypes['fundTicketTerm'][0])
    {
        $returnType = '';
        $request = $this->fundTicketTermRequest($ticketId, $termId, $smartTransferFundTermDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fundTicketTerm'
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferFundTermDto $smartTransferFundTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['fundTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function fundTicketTermRequest($ticketId, $termId, $smartTransferFundTermDto, string $contentType = self::contentTypes['fundTicketTerm'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling fundTicketTerm'
            );
        }

        // verify the required parameter 'termId' is set
        if ($termId === null || (is_array($termId) && count($termId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termId when calling fundTicketTerm'
            );
        }

        // verify the required parameter 'smartTransferFundTermDto' is set
        if ($smartTransferFundTermDto === null || (is_array($smartTransferFundTermDto) && count($smartTransferFundTermDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smartTransferFundTermDto when calling fundTicketTerm'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/terms/{termId}/fund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }
        // path params
        if ($termId !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($termId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smartTransferFundTermDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($smartTransferFundTermDto));
            } else {
                $httpBody = $smartTransferFundTermDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSmartTransferUserGroups
     *
     * Get user group
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSmartTransferUserGroups'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\GetSmartTransferUserGroups200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse
     */
    public function getSmartTransferUserGroups(string $contentType = self::contentTypes['getSmartTransferUserGroups'][0])
    {
        list($response) = $this->getSmartTransferUserGroupsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getSmartTransferUserGroupsWithHttpInfo
     *
     * Get user group
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSmartTransferUserGroups'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\GetSmartTransferUserGroups200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSmartTransferUserGroupsWithHttpInfo(string $contentType = self::contentTypes['getSmartTransferUserGroups'][0])
    {
        $request = $this->getSmartTransferUserGroupsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\GetSmartTransferUserGroups200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\GetSmartTransferUserGroups200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\GetSmartTransferUserGroups200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSmartTransferUserGroupsAsync
     *
     * Get user group
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSmartTransferUserGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartTransferUserGroupsAsync(string $contentType = self::contentTypes['getSmartTransferUserGroups'][0])
    {
        return $this->getSmartTransferUserGroupsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSmartTransferUserGroupsAsyncWithHttpInfo
     *
     * Get user group
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSmartTransferUserGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSmartTransferUserGroupsAsyncWithHttpInfo(string $contentType = self::contentTypes['getSmartTransferUserGroups'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\GetSmartTransferUserGroups200Response';
        $request = $this->getSmartTransferUserGroupsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSmartTransferUserGroups'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSmartTransferUserGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSmartTransferUserGroupsRequest(string $contentType = self::contentTypes['getSmartTransferUserGroups'][0])
    {


        $resourcePath = '/smart-transfers/settings/user-groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation manuallyFundTicketTerm
     *
     * Manually add term transaction
     *
     * @param  string $ticketId ticketId (required)
     * @param  string $termId termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferManuallyFundTermDto $smartTransferManuallyFundTermDto smartTransferManuallyFundTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manuallyFundTicketTerm'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function manuallyFundTicketTerm($ticketId, $termId, $smartTransferManuallyFundTermDto, string $contentType = self::contentTypes['manuallyFundTicketTerm'][0])
    {
        $this->manuallyFundTicketTermWithHttpInfo($ticketId, $termId, $smartTransferManuallyFundTermDto, $contentType);
    }

    /**
     * Operation manuallyFundTicketTermWithHttpInfo
     *
     * Manually add term transaction
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferManuallyFundTermDto $smartTransferManuallyFundTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manuallyFundTicketTerm'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function manuallyFundTicketTermWithHttpInfo($ticketId, $termId, $smartTransferManuallyFundTermDto, string $contentType = self::contentTypes['manuallyFundTicketTerm'][0])
    {
        $request = $this->manuallyFundTicketTermRequest($ticketId, $termId, $smartTransferManuallyFundTermDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\CreateTicketTerm201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation manuallyFundTicketTermAsync
     *
     * Manually add term transaction
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferManuallyFundTermDto $smartTransferManuallyFundTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manuallyFundTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function manuallyFundTicketTermAsync($ticketId, $termId, $smartTransferManuallyFundTermDto, string $contentType = self::contentTypes['manuallyFundTicketTerm'][0])
    {
        return $this->manuallyFundTicketTermAsyncWithHttpInfo($ticketId, $termId, $smartTransferManuallyFundTermDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation manuallyFundTicketTermAsyncWithHttpInfo
     *
     * Manually add term transaction
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferManuallyFundTermDto $smartTransferManuallyFundTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manuallyFundTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function manuallyFundTicketTermAsyncWithHttpInfo($ticketId, $termId, $smartTransferManuallyFundTermDto, string $contentType = self::contentTypes['manuallyFundTicketTerm'][0])
    {
        $returnType = '';
        $request = $this->manuallyFundTicketTermRequest($ticketId, $termId, $smartTransferManuallyFundTermDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'manuallyFundTicketTerm'
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferManuallyFundTermDto $smartTransferManuallyFundTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['manuallyFundTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function manuallyFundTicketTermRequest($ticketId, $termId, $smartTransferManuallyFundTermDto, string $contentType = self::contentTypes['manuallyFundTicketTerm'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling manuallyFundTicketTerm'
            );
        }

        // verify the required parameter 'termId' is set
        if ($termId === null || (is_array($termId) && count($termId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termId when calling manuallyFundTicketTerm'
            );
        }

        // verify the required parameter 'smartTransferManuallyFundTermDto' is set
        if ($smartTransferManuallyFundTermDto === null || (is_array($smartTransferManuallyFundTermDto) && count($smartTransferManuallyFundTermDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smartTransferManuallyFundTermDto when calling manuallyFundTicketTerm'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/terms/{termId}/manually-fund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }
        // path params
        if ($termId !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($termId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smartTransferManuallyFundTermDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($smartTransferManuallyFundTermDto));
            } else {
                $httpBody = $smartTransferManuallyFundTermDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeTicketTerm
     *
     * Delete ticket term
     *
     * @param  string $ticketId ticketId (required)
     * @param  string $termId termId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeTicketTerm'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeTicketTerm($ticketId, $termId, string $contentType = self::contentTypes['removeTicketTerm'][0])
    {
        $this->removeTicketTermWithHttpInfo($ticketId, $termId, $contentType);
    }

    /**
     * Operation removeTicketTermWithHttpInfo
     *
     * Delete ticket term
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeTicketTerm'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeTicketTermWithHttpInfo($ticketId, $termId, string $contentType = self::contentTypes['removeTicketTerm'][0])
    {
        $request = $this->removeTicketTermRequest($ticketId, $termId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation removeTicketTermAsync
     *
     * Delete ticket term
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTicketTermAsync($ticketId, $termId, string $contentType = self::contentTypes['removeTicketTerm'][0])
    {
        return $this->removeTicketTermAsyncWithHttpInfo($ticketId, $termId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeTicketTermAsyncWithHttpInfo
     *
     * Delete ticket term
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTicketTermAsyncWithHttpInfo($ticketId, $termId, string $contentType = self::contentTypes['removeTicketTerm'][0])
    {
        $returnType = '';
        $request = $this->removeTicketTermRequest($ticketId, $termId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeTicketTerm'
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['removeTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function removeTicketTermRequest($ticketId, $termId, string $contentType = self::contentTypes['removeTicketTerm'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling removeTicketTerm'
            );
        }

        // verify the required parameter 'termId' is set
        if ($termId === null || (is_array($termId) && count($termId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termId when calling removeTicketTerm'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/terms/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }
        // path params
        if ($termId !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($termId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTickets
     *
     * Find Ticket
     *
     * @param  string|null $q Search string - counterparty name or asset or ticketId. Optional (optional)
     * @param  string[]|null $statuses Ticket statuses for Smart Transfer tickets. Optional (optional)
     * @param  string|null $networkId NetworkId that is used in the ticket . Optional (optional)
     * @param  bool|null $createdByMe Filter created tickets by created by self or by others. Optional (optional)
     * @param  \DateTime|null $expiresAfter Lower bound of search range. Optional (optional)
     * @param  \DateTime|null $expiresBefore Upper bound of search range. Optional (optional)
     * @param  string|null $type Type of transfer. ASYNC executes transfers as they are funded, ATOMIC executes all terms (legs) as one atomic transfer (optional)
     * @param  string|null $externalRefId External ref. ID that workspace can use to identify ticket outside of Fireblocks system. (optional)
     * @param  string|null $after ID of the record after which to fetch $limit records (optional)
     * @param  float|null $limit Number of records to fetch. By default, it is 100 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTickets'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\SearchTickets200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse
     */
    public function searchTickets($q = null, $statuses = null, $networkId = null, $createdByMe = null, $expiresAfter = null, $expiresBefore = null, $type = null, $externalRefId = null, $after = null, $limit = null, string $contentType = self::contentTypes['searchTickets'][0])
    {
        list($response) = $this->searchTicketsWithHttpInfo($q, $statuses, $networkId, $createdByMe, $expiresAfter, $expiresBefore, $type, $externalRefId, $after, $limit, $contentType);
        return $response;
    }

    /**
     * Operation searchTicketsWithHttpInfo
     *
     * Find Ticket
     *
     * @param  string|null $q Search string - counterparty name or asset or ticketId. Optional (optional)
     * @param  string[]|null $statuses Ticket statuses for Smart Transfer tickets. Optional (optional)
     * @param  string|null $networkId NetworkId that is used in the ticket . Optional (optional)
     * @param  bool|null $createdByMe Filter created tickets by created by self or by others. Optional (optional)
     * @param  \DateTime|null $expiresAfter Lower bound of search range. Optional (optional)
     * @param  \DateTime|null $expiresBefore Upper bound of search range. Optional (optional)
     * @param  string|null $type Type of transfer. ASYNC executes transfers as they are funded, ATOMIC executes all terms (legs) as one atomic transfer (optional)
     * @param  string|null $externalRefId External ref. ID that workspace can use to identify ticket outside of Fireblocks system. (optional)
     * @param  string|null $after ID of the record after which to fetch $limit records (optional)
     * @param  float|null $limit Number of records to fetch. By default, it is 100 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTickets'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\SearchTickets200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTicketsWithHttpInfo($q = null, $statuses = null, $networkId = null, $createdByMe = null, $expiresAfter = null, $expiresBefore = null, $type = null, $externalRefId = null, $after = null, $limit = null, string $contentType = self::contentTypes['searchTickets'][0])
    {
        $request = $this->searchTicketsRequest($q, $statuses, $networkId, $createdByMe, $expiresAfter, $expiresBefore, $type, $externalRefId, $after, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SearchTickets200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\SearchTickets200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SearchTickets200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation searchTicketsAsync
     *
     * Find Ticket
     *
     * @param  string|null $q Search string - counterparty name or asset or ticketId. Optional (optional)
     * @param  string[]|null $statuses Ticket statuses for Smart Transfer tickets. Optional (optional)
     * @param  string|null $networkId NetworkId that is used in the ticket . Optional (optional)
     * @param  bool|null $createdByMe Filter created tickets by created by self or by others. Optional (optional)
     * @param  \DateTime|null $expiresAfter Lower bound of search range. Optional (optional)
     * @param  \DateTime|null $expiresBefore Upper bound of search range. Optional (optional)
     * @param  string|null $type Type of transfer. ASYNC executes transfers as they are funded, ATOMIC executes all terms (legs) as one atomic transfer (optional)
     * @param  string|null $externalRefId External ref. ID that workspace can use to identify ticket outside of Fireblocks system. (optional)
     * @param  string|null $after ID of the record after which to fetch $limit records (optional)
     * @param  float|null $limit Number of records to fetch. By default, it is 100 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTickets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTicketsAsync($q = null, $statuses = null, $networkId = null, $createdByMe = null, $expiresAfter = null, $expiresBefore = null, $type = null, $externalRefId = null, $after = null, $limit = null, string $contentType = self::contentTypes['searchTickets'][0])
    {
        return $this->searchTicketsAsyncWithHttpInfo($q, $statuses, $networkId, $createdByMe, $expiresAfter, $expiresBefore, $type, $externalRefId, $after, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTicketsAsyncWithHttpInfo
     *
     * Find Ticket
     *
     * @param  string|null $q Search string - counterparty name or asset or ticketId. Optional (optional)
     * @param  string[]|null $statuses Ticket statuses for Smart Transfer tickets. Optional (optional)
     * @param  string|null $networkId NetworkId that is used in the ticket . Optional (optional)
     * @param  bool|null $createdByMe Filter created tickets by created by self or by others. Optional (optional)
     * @param  \DateTime|null $expiresAfter Lower bound of search range. Optional (optional)
     * @param  \DateTime|null $expiresBefore Upper bound of search range. Optional (optional)
     * @param  string|null $type Type of transfer. ASYNC executes transfers as they are funded, ATOMIC executes all terms (legs) as one atomic transfer (optional)
     * @param  string|null $externalRefId External ref. ID that workspace can use to identify ticket outside of Fireblocks system. (optional)
     * @param  string|null $after ID of the record after which to fetch $limit records (optional)
     * @param  float|null $limit Number of records to fetch. By default, it is 100 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTickets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTicketsAsyncWithHttpInfo($q = null, $statuses = null, $networkId = null, $createdByMe = null, $expiresAfter = null, $expiresBefore = null, $type = null, $externalRefId = null, $after = null, $limit = null, string $contentType = self::contentTypes['searchTickets'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\SearchTickets200Response';
        $request = $this->searchTicketsRequest($q, $statuses, $networkId, $createdByMe, $expiresAfter, $expiresBefore, $type, $externalRefId, $after, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTickets'
     *
     * @param  string|null $q Search string - counterparty name or asset or ticketId. Optional (optional)
     * @param  string[]|null $statuses Ticket statuses for Smart Transfer tickets. Optional (optional)
     * @param  string|null $networkId NetworkId that is used in the ticket . Optional (optional)
     * @param  bool|null $createdByMe Filter created tickets by created by self or by others. Optional (optional)
     * @param  \DateTime|null $expiresAfter Lower bound of search range. Optional (optional)
     * @param  \DateTime|null $expiresBefore Upper bound of search range. Optional (optional)
     * @param  string|null $type Type of transfer. ASYNC executes transfers as they are funded, ATOMIC executes all terms (legs) as one atomic transfer (optional)
     * @param  string|null $externalRefId External ref. ID that workspace can use to identify ticket outside of Fireblocks system. (optional)
     * @param  string|null $after ID of the record after which to fetch $limit records (optional)
     * @param  float|null $limit Number of records to fetch. By default, it is 100 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTickets'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchTicketsRequest($q = null, $statuses = null, $networkId = null, $createdByMe = null, $expiresAfter = null, $expiresBefore = null, $type = null, $externalRefId = null, $after = null, $limit = null, string $contentType = self::contentTypes['searchTickets'][0])
    {

        if ($q !== null && strlen($q) < 1) {
            throw new \InvalidArgumentException('invalid length for "$q" when calling SmartTransferApi.searchTickets, must be bigger than or equal to 1.');
        }
        






        if ($externalRefId !== null && strlen($externalRefId) > 64) {
            throw new \InvalidArgumentException('invalid length for "$externalRefId" when calling SmartTransferApi.searchTickets, must be smaller than or equal to 64.');
        }
        if ($externalRefId !== null && strlen($externalRefId) < 1) {
            throw new \InvalidArgumentException('invalid length for "$externalRefId" when calling SmartTransferApi.searchTickets, must be bigger than or equal to 1.');
        }
        

        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling SmartTransferApi.searchTickets, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/smart-transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $q,
            'q', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $networkId,
            'networkId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $createdByMe,
            'createdByMe', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expiresAfter,
            'expiresAfter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expiresBefore,
            'expiresBefore', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $externalRefId,
            'externalRefId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setExternalRefId
     *
     * Add external reference ID
     *
     * @param  string $ticketId ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetTicketExternalIdDto $smartTransferSetTicketExternalIdDto smartTransferSetTicketExternalIdDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setExternalRefId'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse
     */
    public function setExternalRefId($ticketId, $smartTransferSetTicketExternalIdDto, string $contentType = self::contentTypes['setExternalRefId'][0])
    {
        list($response) = $this->setExternalRefIdWithHttpInfo($ticketId, $smartTransferSetTicketExternalIdDto, $contentType);
        return $response;
    }

    /**
     * Operation setExternalRefIdWithHttpInfo
     *
     * Add external reference ID
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetTicketExternalIdDto $smartTransferSetTicketExternalIdDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setExternalRefId'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setExternalRefIdWithHttpInfo($ticketId, $smartTransferSetTicketExternalIdDto, string $contentType = self::contentTypes['setExternalRefId'][0])
    {
        $request = $this->setExternalRefIdRequest($ticketId, $smartTransferSetTicketExternalIdDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation setExternalRefIdAsync
     *
     * Add external reference ID
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetTicketExternalIdDto $smartTransferSetTicketExternalIdDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setExternalRefId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setExternalRefIdAsync($ticketId, $smartTransferSetTicketExternalIdDto, string $contentType = self::contentTypes['setExternalRefId'][0])
    {
        return $this->setExternalRefIdAsyncWithHttpInfo($ticketId, $smartTransferSetTicketExternalIdDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setExternalRefIdAsyncWithHttpInfo
     *
     * Add external reference ID
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetTicketExternalIdDto $smartTransferSetTicketExternalIdDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setExternalRefId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setExternalRefIdAsyncWithHttpInfo($ticketId, $smartTransferSetTicketExternalIdDto, string $contentType = self::contentTypes['setExternalRefId'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response';
        $request = $this->setExternalRefIdRequest($ticketId, $smartTransferSetTicketExternalIdDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setExternalRefId'
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetTicketExternalIdDto $smartTransferSetTicketExternalIdDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setExternalRefId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setExternalRefIdRequest($ticketId, $smartTransferSetTicketExternalIdDto, string $contentType = self::contentTypes['setExternalRefId'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling setExternalRefId'
            );
        }

        // verify the required parameter 'smartTransferSetTicketExternalIdDto' is set
        if ($smartTransferSetTicketExternalIdDto === null || (is_array($smartTransferSetTicketExternalIdDto) && count($smartTransferSetTicketExternalIdDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smartTransferSetTicketExternalIdDto when calling setExternalRefId'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/external-id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smartTransferSetTicketExternalIdDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($smartTransferSetTicketExternalIdDto));
            } else {
                $httpBody = $smartTransferSetTicketExternalIdDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setTicketExpiration
     *
     * Set expiration
     *
     * @param  string $ticketId ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetTicketExpirationDto $smartTransferSetTicketExpirationDto smartTransferSetTicketExpirationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTicketExpiration'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse
     */
    public function setTicketExpiration($ticketId, $smartTransferSetTicketExpirationDto, string $contentType = self::contentTypes['setTicketExpiration'][0])
    {
        list($response) = $this->setTicketExpirationWithHttpInfo($ticketId, $smartTransferSetTicketExpirationDto, $contentType);
        return $response;
    }

    /**
     * Operation setTicketExpirationWithHttpInfo
     *
     * Set expiration
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetTicketExpirationDto $smartTransferSetTicketExpirationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTicketExpiration'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setTicketExpirationWithHttpInfo($ticketId, $smartTransferSetTicketExpirationDto, string $contentType = self::contentTypes['setTicketExpiration'][0])
    {
        $request = $this->setTicketExpirationRequest($ticketId, $smartTransferSetTicketExpirationDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation setTicketExpirationAsync
     *
     * Set expiration
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetTicketExpirationDto $smartTransferSetTicketExpirationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTicketExpiration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setTicketExpirationAsync($ticketId, $smartTransferSetTicketExpirationDto, string $contentType = self::contentTypes['setTicketExpiration'][0])
    {
        return $this->setTicketExpirationAsyncWithHttpInfo($ticketId, $smartTransferSetTicketExpirationDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setTicketExpirationAsyncWithHttpInfo
     *
     * Set expiration
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetTicketExpirationDto $smartTransferSetTicketExpirationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTicketExpiration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setTicketExpirationAsyncWithHttpInfo($ticketId, $smartTransferSetTicketExpirationDto, string $contentType = self::contentTypes['setTicketExpiration'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response';
        $request = $this->setTicketExpirationRequest($ticketId, $smartTransferSetTicketExpirationDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setTicketExpiration'
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetTicketExpirationDto $smartTransferSetTicketExpirationDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setTicketExpiration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setTicketExpirationRequest($ticketId, $smartTransferSetTicketExpirationDto, string $contentType = self::contentTypes['setTicketExpiration'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling setTicketExpiration'
            );
        }

        // verify the required parameter 'smartTransferSetTicketExpirationDto' is set
        if ($smartTransferSetTicketExpirationDto === null || (is_array($smartTransferSetTicketExpirationDto) && count($smartTransferSetTicketExpirationDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smartTransferSetTicketExpirationDto when calling setTicketExpiration'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/expires-in';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smartTransferSetTicketExpirationDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($smartTransferSetTicketExpirationDto));
            } else {
                $httpBody = $smartTransferSetTicketExpirationDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setUserGroups
     *
     * Set user group
     *
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetUserGroupsDto $smartTransferSetUserGroupsDto smartTransferSetUserGroupsDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserGroups'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\SetUserGroups201Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse
     */
    public function setUserGroups($smartTransferSetUserGroupsDto, string $contentType = self::contentTypes['setUserGroups'][0])
    {
        list($response) = $this->setUserGroupsWithHttpInfo($smartTransferSetUserGroupsDto, $contentType);
        return $response;
    }

    /**
     * Operation setUserGroupsWithHttpInfo
     *
     * Set user group
     *
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetUserGroupsDto $smartTransferSetUserGroupsDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserGroups'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\SetUserGroups201Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setUserGroupsWithHttpInfo($smartTransferSetUserGroupsDto, string $contentType = self::contentTypes['setUserGroups'][0])
    {
        $request = $this->setUserGroupsRequest($smartTransferSetUserGroupsDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SetUserGroups201Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\SetUserGroups201Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SetUserGroups201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation setUserGroupsAsync
     *
     * Set user group
     *
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetUserGroupsDto $smartTransferSetUserGroupsDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserGroupsAsync($smartTransferSetUserGroupsDto, string $contentType = self::contentTypes['setUserGroups'][0])
    {
        return $this->setUserGroupsAsyncWithHttpInfo($smartTransferSetUserGroupsDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setUserGroupsAsyncWithHttpInfo
     *
     * Set user group
     *
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetUserGroupsDto $smartTransferSetUserGroupsDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setUserGroupsAsyncWithHttpInfo($smartTransferSetUserGroupsDto, string $contentType = self::contentTypes['setUserGroups'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\SetUserGroups201Response';
        $request = $this->setUserGroupsRequest($smartTransferSetUserGroupsDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setUserGroups'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSetUserGroupsDto $smartTransferSetUserGroupsDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setUserGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setUserGroupsRequest($smartTransferSetUserGroupsDto, string $contentType = self::contentTypes['setUserGroups'][0])
    {

        // verify the required parameter 'smartTransferSetUserGroupsDto' is set
        if ($smartTransferSetUserGroupsDto === null || (is_array($smartTransferSetUserGroupsDto) && count($smartTransferSetUserGroupsDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smartTransferSetUserGroupsDto when calling setUserGroups'
            );
        }


        $resourcePath = '/smart-transfers/settings/user-groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smartTransferSetUserGroupsDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($smartTransferSetUserGroupsDto));
            } else {
                $httpBody = $smartTransferSetUserGroupsDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitTicket
     *
     * Submit ticket
     *
     * @param  string $ticketId ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSubmitTicketDto $smartTransferSubmitTicketDto smartTransferSubmitTicketDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitTicket'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse
     */
    public function submitTicket($ticketId, $smartTransferSubmitTicketDto, string $contentType = self::contentTypes['submitTicket'][0])
    {
        list($response) = $this->submitTicketWithHttpInfo($ticketId, $smartTransferSubmitTicketDto, $contentType);
        return $response;
    }

    /**
     * Operation submitTicketWithHttpInfo
     *
     * Submit ticket
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSubmitTicketDto $smartTransferSubmitTicketDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitTicket'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\FindTicketById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitTicketWithHttpInfo($ticketId, $smartTransferSubmitTicketDto, string $contentType = self::contentTypes['submitTicket'][0])
    {
        $request = $this->submitTicketRequest($ticketId, $smartTransferSubmitTicketDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferBadRequestResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation submitTicketAsync
     *
     * Submit ticket
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSubmitTicketDto $smartTransferSubmitTicketDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitTicketAsync($ticketId, $smartTransferSubmitTicketDto, string $contentType = self::contentTypes['submitTicket'][0])
    {
        return $this->submitTicketAsyncWithHttpInfo($ticketId, $smartTransferSubmitTicketDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitTicketAsyncWithHttpInfo
     *
     * Submit ticket
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSubmitTicketDto $smartTransferSubmitTicketDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitTicketAsyncWithHttpInfo($ticketId, $smartTransferSubmitTicketDto, string $contentType = self::contentTypes['submitTicket'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\FindTicketById200Response';
        $request = $this->submitTicketRequest($ticketId, $smartTransferSubmitTicketDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitTicket'
     *
     * @param  string $ticketId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferSubmitTicketDto $smartTransferSubmitTicketDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitTicket'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitTicketRequest($ticketId, $smartTransferSubmitTicketDto, string $contentType = self::contentTypes['submitTicket'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling submitTicket'
            );
        }

        // verify the required parameter 'smartTransferSubmitTicketDto' is set
        if ($smartTransferSubmitTicketDto === null || (is_array($smartTransferSubmitTicketDto) && count($smartTransferSubmitTicketDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smartTransferSubmitTicketDto when calling submitTicket'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/submit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smartTransferSubmitTicketDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($smartTransferSubmitTicketDto));
            } else {
                $httpBody = $smartTransferSubmitTicketDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTicketTerm
     *
     * Update ticket term
     *
     * @param  string $ticketId ticketId (required)
     * @param  string $termId termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferUpdateTicketTermDto $smartTransferUpdateTicketTermDto smartTransferUpdateTicketTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTicketTerm'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse
     */
    public function updateTicketTerm($ticketId, $termId, $smartTransferUpdateTicketTermDto, string $contentType = self::contentTypes['updateTicketTerm'][0])
    {
        list($response) = $this->updateTicketTermWithHttpInfo($ticketId, $termId, $smartTransferUpdateTicketTermDto, $contentType);
        return $response;
    }

    /**
     * Operation updateTicketTermWithHttpInfo
     *
     * Update ticket term
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferUpdateTicketTermDto $smartTransferUpdateTicketTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTicketTerm'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response|\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse|\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTicketTermWithHttpInfo($ticketId, $termId, $smartTransferUpdateTicketTermDto, string $contentType = self::contentTypes['updateTicketTerm'][0])
    {
        $request = $this->updateTicketTermRequest($ticketId, $termId, $smartTransferUpdateTicketTermDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response',
                        $request,
                        $response,
                    );
                case 403:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferForbiddenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SmartTransferNotFoundResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTicketTermAsync
     *
     * Update ticket term
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferUpdateTicketTermDto $smartTransferUpdateTicketTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTicketTermAsync($ticketId, $termId, $smartTransferUpdateTicketTermDto, string $contentType = self::contentTypes['updateTicketTerm'][0])
    {
        return $this->updateTicketTermAsyncWithHttpInfo($ticketId, $termId, $smartTransferUpdateTicketTermDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTicketTermAsyncWithHttpInfo
     *
     * Update ticket term
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferUpdateTicketTermDto $smartTransferUpdateTicketTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTicketTermAsyncWithHttpInfo($ticketId, $termId, $smartTransferUpdateTicketTermDto, string $contentType = self::contentTypes['updateTicketTerm'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\FindTicketTermById200Response';
        $request = $this->updateTicketTermRequest($ticketId, $termId, $smartTransferUpdateTicketTermDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTicketTerm'
     *
     * @param  string $ticketId (required)
     * @param  string $termId (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SmartTransferUpdateTicketTermDto $smartTransferUpdateTicketTermDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTicketTerm'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTicketTermRequest($ticketId, $termId, $smartTransferUpdateTicketTermDto, string $contentType = self::contentTypes['updateTicketTerm'][0])
    {

        // verify the required parameter 'ticketId' is set
        if ($ticketId === null || (is_array($ticketId) && count($ticketId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ticketId when calling updateTicketTerm'
            );
        }

        // verify the required parameter 'termId' is set
        if ($termId === null || (is_array($termId) && count($termId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $termId when calling updateTicketTerm'
            );
        }

        // verify the required parameter 'smartTransferUpdateTicketTermDto' is set
        if ($smartTransferUpdateTicketTermDto === null || (is_array($smartTransferUpdateTicketTermDto) && count($smartTransferUpdateTicketTermDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $smartTransferUpdateTicketTermDto when calling updateTicketTerm'
            );
        }


        $resourcePath = '/smart-transfers/{ticketId}/terms/{termId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ticketId !== null) {
            $resourcePath = str_replace(
                '{' . 'ticketId' . '}',
                ObjectSerializer::toPathValue($ticketId),
                $resourcePath
            );
        }
        // path params
        if ($termId !== null) {
            $resourcePath = str_replace(
                '{' . 'termId' . '}',
                ObjectSerializer::toPathValue($termId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($smartTransferUpdateTicketTermDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($smartTransferUpdateTicketTermDto));
            } else {
                $httpBody = $smartTransferUpdateTicketTermDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
