<?php
/**
 * StakingApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Developerayo\FireblocksLaravel\ApiException;
use Developerayo\FireblocksLaravel\Configuration;
use Developerayo\FireblocksLaravel\FormDataProcessor;
use Developerayo\FireblocksLaravel\HeaderSelector;
use Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * StakingApi Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StakingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'approveTermsOfServiceByProviderId' => [
            'application/json',
        ],
        'claimRewards' => [
            'application/json',
        ],
        'getAllDelegations' => [
            'application/json',
        ],
        'getChainInfo' => [
            'application/json',
        ],
        'getChains' => [
            'application/json',
        ],
        'getDelegationById' => [
            'application/json',
        ],
        'getProviders' => [
            'application/json',
        ],
        'getSummary' => [
            'application/json',
        ],
        'getSummaryByVault' => [
            'application/json',
        ],
        'stake' => [
            'application/json',
        ],
        'unstake' => [
            'application/json',
        ],
        'withdraw' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation approveTermsOfServiceByProviderId
     *
     * Approve staking terms of service
     *
     * @param  string $providerId The unique identifier of the staking provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveTermsOfServiceByProviderId'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function approveTermsOfServiceByProviderId($providerId, string $contentType = self::contentTypes['approveTermsOfServiceByProviderId'][0])
    {
        list($response) = $this->approveTermsOfServiceByProviderIdWithHttpInfo($providerId, $contentType);
        return $response;
    }

    /**
     * Operation approveTermsOfServiceByProviderIdWithHttpInfo
     *
     * Approve staking terms of service
     *
     * @param  string $providerId The unique identifier of the staking provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveTermsOfServiceByProviderId'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveTermsOfServiceByProviderIdWithHttpInfo($providerId, string $contentType = self::contentTypes['approveTermsOfServiceByProviderId'][0])
    {
        $request = $this->approveTermsOfServiceByProviderIdRequest($providerId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation approveTermsOfServiceByProviderIdAsync
     *
     * Approve staking terms of service
     *
     * @param  string $providerId The unique identifier of the staking provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveTermsOfServiceByProviderId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveTermsOfServiceByProviderIdAsync($providerId, string $contentType = self::contentTypes['approveTermsOfServiceByProviderId'][0])
    {
        return $this->approveTermsOfServiceByProviderIdAsyncWithHttpInfo($providerId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approveTermsOfServiceByProviderIdAsyncWithHttpInfo
     *
     * Approve staking terms of service
     *
     * @param  string $providerId The unique identifier of the staking provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveTermsOfServiceByProviderId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveTermsOfServiceByProviderIdAsyncWithHttpInfo($providerId, string $contentType = self::contentTypes['approveTermsOfServiceByProviderId'][0])
    {
        $returnType = 'object';
        $request = $this->approveTermsOfServiceByProviderIdRequest($providerId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'approveTermsOfServiceByProviderId'
     *
     * @param  string $providerId The unique identifier of the staking provider (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveTermsOfServiceByProviderId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveTermsOfServiceByProviderIdRequest($providerId, string $contentType = self::contentTypes['approveTermsOfServiceByProviderId'][0])
    {

        // verify the required parameter 'providerId' is set
        if ($providerId === null || (is_array($providerId) && count($providerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $providerId when calling approveTermsOfServiceByProviderId'
            );
        }


        $resourcePath = '/staking/providers/{providerId}/approveTermsOfService';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($providerId !== null) {
            $resourcePath = str_replace(
                '{' . 'providerId' . '}',
                ObjectSerializer::toPathValue($providerId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation claimRewards
     *
     * Execute a Claim Rewards operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\ClaimRewardsRequestDto $claimRewardsRequestDto claimRewardsRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimRewards'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function claimRewards($chainDescriptor, $claimRewardsRequestDto, string $contentType = self::contentTypes['claimRewards'][0])
    {
        list($response) = $this->claimRewardsWithHttpInfo($chainDescriptor, $claimRewardsRequestDto, $contentType);
        return $response;
    }

    /**
     * Operation claimRewardsWithHttpInfo
     *
     * Execute a Claim Rewards operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\ClaimRewardsRequestDto $claimRewardsRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimRewards'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function claimRewardsWithHttpInfo($chainDescriptor, $claimRewardsRequestDto, string $contentType = self::contentTypes['claimRewards'][0])
    {
        $request = $this->claimRewardsRequest($chainDescriptor, $claimRewardsRequestDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation claimRewardsAsync
     *
     * Execute a Claim Rewards operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\ClaimRewardsRequestDto $claimRewardsRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimRewards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function claimRewardsAsync($chainDescriptor, $claimRewardsRequestDto, string $contentType = self::contentTypes['claimRewards'][0])
    {
        return $this->claimRewardsAsyncWithHttpInfo($chainDescriptor, $claimRewardsRequestDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation claimRewardsAsyncWithHttpInfo
     *
     * Execute a Claim Rewards operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\ClaimRewardsRequestDto $claimRewardsRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimRewards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function claimRewardsAsyncWithHttpInfo($chainDescriptor, $claimRewardsRequestDto, string $contentType = self::contentTypes['claimRewards'][0])
    {
        $returnType = 'object';
        $request = $this->claimRewardsRequest($chainDescriptor, $claimRewardsRequestDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'claimRewards'
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\ClaimRewardsRequestDto $claimRewardsRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['claimRewards'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function claimRewardsRequest($chainDescriptor, $claimRewardsRequestDto, string $contentType = self::contentTypes['claimRewards'][0])
    {

        // verify the required parameter 'chainDescriptor' is set
        if ($chainDescriptor === null || (is_array($chainDescriptor) && count($chainDescriptor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chainDescriptor when calling claimRewards'
            );
        }

        // verify the required parameter 'claimRewardsRequestDto' is set
        if ($claimRewardsRequestDto === null || (is_array($claimRewardsRequestDto) && count($claimRewardsRequestDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $claimRewardsRequestDto when calling claimRewards'
            );
        }


        $resourcePath = '/staking/chains/{chainDescriptor}/claimRewards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($chainDescriptor !== null) {
            $resourcePath = str_replace(
                '{' . 'chainDescriptor' . '}',
                ObjectSerializer::toPathValue($chainDescriptor),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($claimRewardsRequestDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($claimRewardsRequestDto));
            } else {
                $httpBody = $claimRewardsRequestDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAllDelegations
     *
     * List staking positions details
     *
     * @param  string|null $chainDescriptor Use \&quot;ETH\&quot; / \&quot;SOL\&quot;/ \&quot;MATIC\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllDelegations'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\DelegationDto[]
     */
    public function getAllDelegations($chainDescriptor = null, string $contentType = self::contentTypes['getAllDelegations'][0])
    {
        list($response) = $this->getAllDelegationsWithHttpInfo($chainDescriptor, $contentType);
        return $response;
    }

    /**
     * Operation getAllDelegationsWithHttpInfo
     *
     * List staking positions details
     *
     * @param  string|null $chainDescriptor Use \&quot;ETH\&quot; / \&quot;SOL\&quot;/ \&quot;MATIC\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllDelegations'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\DelegationDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getAllDelegationsWithHttpInfo($chainDescriptor = null, string $contentType = self::contentTypes['getAllDelegations'][0])
    {
        $request = $this->getAllDelegationsRequest($chainDescriptor, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\DelegationDto[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\DelegationDto[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\DelegationDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getAllDelegationsAsync
     *
     * List staking positions details
     *
     * @param  string|null $chainDescriptor Use \&quot;ETH\&quot; / \&quot;SOL\&quot;/ \&quot;MATIC\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllDelegations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllDelegationsAsync($chainDescriptor = null, string $contentType = self::contentTypes['getAllDelegations'][0])
    {
        return $this->getAllDelegationsAsyncWithHttpInfo($chainDescriptor, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAllDelegationsAsyncWithHttpInfo
     *
     * List staking positions details
     *
     * @param  string|null $chainDescriptor Use \&quot;ETH\&quot; / \&quot;SOL\&quot;/ \&quot;MATIC\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllDelegations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAllDelegationsAsyncWithHttpInfo($chainDescriptor = null, string $contentType = self::contentTypes['getAllDelegations'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\DelegationDto[]';
        $request = $this->getAllDelegationsRequest($chainDescriptor, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAllDelegations'
     *
     * @param  string|null $chainDescriptor Use \&quot;ETH\&quot; / \&quot;SOL\&quot;/ \&quot;MATIC\&quot; in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAllDelegations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAllDelegationsRequest($chainDescriptor = null, string $contentType = self::contentTypes['getAllDelegations'][0])
    {



        $resourcePath = '/staking/positions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $chainDescriptor,
            'chainDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChainInfo
     *
     * Get chain-specific staking summary
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChainInfo'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\ChainInfoResponseDto
     */
    public function getChainInfo($chainDescriptor, string $contentType = self::contentTypes['getChainInfo'][0])
    {
        list($response) = $this->getChainInfoWithHttpInfo($chainDescriptor, $contentType);
        return $response;
    }

    /**
     * Operation getChainInfoWithHttpInfo
     *
     * Get chain-specific staking summary
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChainInfo'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\ChainInfoResponseDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChainInfoWithHttpInfo($chainDescriptor, string $contentType = self::contentTypes['getChainInfo'][0])
    {
        $request = $this->getChainInfoRequest($chainDescriptor, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ChainInfoResponseDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\ChainInfoResponseDto',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ChainInfoResponseDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getChainInfoAsync
     *
     * Get chain-specific staking summary
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChainInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChainInfoAsync($chainDescriptor, string $contentType = self::contentTypes['getChainInfo'][0])
    {
        return $this->getChainInfoAsyncWithHttpInfo($chainDescriptor, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChainInfoAsyncWithHttpInfo
     *
     * Get chain-specific staking summary
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChainInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChainInfoAsyncWithHttpInfo($chainDescriptor, string $contentType = self::contentTypes['getChainInfo'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\ChainInfoResponseDto';
        $request = $this->getChainInfoRequest($chainDescriptor, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChainInfo'
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChainInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChainInfoRequest($chainDescriptor, string $contentType = self::contentTypes['getChainInfo'][0])
    {

        // verify the required parameter 'chainDescriptor' is set
        if ($chainDescriptor === null || (is_array($chainDescriptor) && count($chainDescriptor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chainDescriptor when calling getChainInfo'
            );
        }


        $resourcePath = '/staking/chains/{chainDescriptor}/chainInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($chainDescriptor !== null) {
            $resourcePath = str_replace(
                '{' . 'chainDescriptor' . '}',
                ObjectSerializer::toPathValue($chainDescriptor),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChains
     *
     * List staking supported chains
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChains'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function getChains(string $contentType = self::contentTypes['getChains'][0])
    {
        list($response) = $this->getChainsWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getChainsWithHttpInfo
     *
     * List staking supported chains
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChains'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChainsWithHttpInfo(string $contentType = self::contentTypes['getChains'][0])
    {
        $request = $this->getChainsRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'string[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getChainsAsync
     *
     * List staking supported chains
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChainsAsync(string $contentType = self::contentTypes['getChains'][0])
    {
        return $this->getChainsAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChainsAsyncWithHttpInfo
     *
     * List staking supported chains
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChainsAsyncWithHttpInfo(string $contentType = self::contentTypes['getChains'][0])
    {
        $returnType = 'string[]';
        $request = $this->getChainsRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChains'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getChains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getChainsRequest(string $contentType = self::contentTypes['getChains'][0])
    {


        $resourcePath = '/staking/chains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDelegationById
     *
     * Get staking position details
     *
     * @param  string $id The unique identifier of the staking position (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDelegationById'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\DelegationDto
     */
    public function getDelegationById($id, string $contentType = self::contentTypes['getDelegationById'][0])
    {
        list($response) = $this->getDelegationByIdWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getDelegationByIdWithHttpInfo
     *
     * Get staking position details
     *
     * @param  string $id The unique identifier of the staking position (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDelegationById'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\DelegationDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDelegationByIdWithHttpInfo($id, string $contentType = self::contentTypes['getDelegationById'][0])
    {
        $request = $this->getDelegationByIdRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\DelegationDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\DelegationDto',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\DelegationDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getDelegationByIdAsync
     *
     * Get staking position details
     *
     * @param  string $id The unique identifier of the staking position (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDelegationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDelegationByIdAsync($id, string $contentType = self::contentTypes['getDelegationById'][0])
    {
        return $this->getDelegationByIdAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDelegationByIdAsyncWithHttpInfo
     *
     * Get staking position details
     *
     * @param  string $id The unique identifier of the staking position (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDelegationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDelegationByIdAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getDelegationById'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\DelegationDto';
        $request = $this->getDelegationByIdRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDelegationById'
     *
     * @param  string $id The unique identifier of the staking position (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDelegationById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDelegationByIdRequest($id, string $contentType = self::contentTypes['getDelegationById'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getDelegationById'
            );
        }


        $resourcePath = '/staking/positions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProviders
     *
     * List staking providers details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviders'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\ProviderDto[]
     */
    public function getProviders(string $contentType = self::contentTypes['getProviders'][0])
    {
        list($response) = $this->getProvidersWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getProvidersWithHttpInfo
     *
     * List staking providers details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviders'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\ProviderDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getProvidersWithHttpInfo(string $contentType = self::contentTypes['getProviders'][0])
    {
        $request = $this->getProvidersRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ProviderDto[]',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\ProviderDto[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ProviderDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getProvidersAsync
     *
     * List staking providers details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProvidersAsync(string $contentType = self::contentTypes['getProviders'][0])
    {
        return $this->getProvidersAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProvidersAsyncWithHttpInfo
     *
     * List staking providers details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProvidersAsyncWithHttpInfo(string $contentType = self::contentTypes['getProviders'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\ProviderDto[]';
        $request = $this->getProvidersRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProviders'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getProvidersRequest(string $contentType = self::contentTypes['getProviders'][0])
    {


        $resourcePath = '/staking/providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSummary
     *
     * Get staking summary details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSummary'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\DelegationSummaryDto
     */
    public function getSummary(string $contentType = self::contentTypes['getSummary'][0])
    {
        list($response) = $this->getSummaryWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getSummaryWithHttpInfo
     *
     * Get staking summary details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSummary'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\DelegationSummaryDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSummaryWithHttpInfo(string $contentType = self::contentTypes['getSummary'][0])
    {
        $request = $this->getSummaryRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\DelegationSummaryDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\DelegationSummaryDto',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\DelegationSummaryDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSummaryAsync
     *
     * Get staking summary details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSummaryAsync(string $contentType = self::contentTypes['getSummary'][0])
    {
        return $this->getSummaryAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSummaryAsyncWithHttpInfo
     *
     * Get staking summary details
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSummaryAsyncWithHttpInfo(string $contentType = self::contentTypes['getSummary'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\DelegationSummaryDto';
        $request = $this->getSummaryRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSummary'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSummary'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSummaryRequest(string $contentType = self::contentTypes['getSummary'][0])
    {


        $resourcePath = '/staking/positions/summary';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSummaryByVault
     *
     * Get staking summary details by vault
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSummaryByVault'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,\Developerayo\FireblocksLaravel\Models\DelegationSummaryDto>
     */
    public function getSummaryByVault(string $contentType = self::contentTypes['getSummaryByVault'][0])
    {
        list($response) = $this->getSummaryByVaultWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation getSummaryByVaultWithHttpInfo
     *
     * Get staking summary details by vault
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSummaryByVault'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,\Developerayo\FireblocksLaravel\Models\DelegationSummaryDto>, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSummaryByVaultWithHttpInfo(string $contentType = self::contentTypes['getSummaryByVault'][0])
    {
        $request = $this->getSummaryByVaultRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'array<string,\Developerayo\FireblocksLaravel\Models\DelegationSummaryDto>',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'array<string,\Developerayo\FireblocksLaravel\Models\DelegationSummaryDto>',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\Developerayo\FireblocksLaravel\Models\DelegationSummaryDto>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getSummaryByVaultAsync
     *
     * Get staking summary details by vault
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSummaryByVault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSummaryByVaultAsync(string $contentType = self::contentTypes['getSummaryByVault'][0])
    {
        return $this->getSummaryByVaultAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSummaryByVaultAsyncWithHttpInfo
     *
     * Get staking summary details by vault
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSummaryByVault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSummaryByVaultAsyncWithHttpInfo(string $contentType = self::contentTypes['getSummaryByVault'][0])
    {
        $returnType = 'array<string,\Developerayo\FireblocksLaravel\Models\DelegationSummaryDto>';
        $request = $this->getSummaryByVaultRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSummaryByVault'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getSummaryByVault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSummaryByVaultRequest(string $contentType = self::contentTypes['getSummaryByVault'][0])
    {


        $resourcePath = '/staking/positions/summary/vaults';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stake
     *
     * Initiate Stake Operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\StakeRequestDto $stakeRequestDto stakeRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stake'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\StakeResponseDto
     */
    public function stake($chainDescriptor, $stakeRequestDto, string $contentType = self::contentTypes['stake'][0])
    {
        list($response) = $this->stakeWithHttpInfo($chainDescriptor, $stakeRequestDto, $contentType);
        return $response;
    }

    /**
     * Operation stakeWithHttpInfo
     *
     * Initiate Stake Operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\StakeRequestDto $stakeRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stake'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\StakeResponseDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function stakeWithHttpInfo($chainDescriptor, $stakeRequestDto, string $contentType = self::contentTypes['stake'][0])
    {
        $request = $this->stakeRequest($chainDescriptor, $stakeRequestDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\StakeResponseDto',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\StakeResponseDto',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\StakeResponseDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation stakeAsync
     *
     * Initiate Stake Operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\StakeRequestDto $stakeRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stake'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stakeAsync($chainDescriptor, $stakeRequestDto, string $contentType = self::contentTypes['stake'][0])
    {
        return $this->stakeAsyncWithHttpInfo($chainDescriptor, $stakeRequestDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stakeAsyncWithHttpInfo
     *
     * Initiate Stake Operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\StakeRequestDto $stakeRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stake'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stakeAsyncWithHttpInfo($chainDescriptor, $stakeRequestDto, string $contentType = self::contentTypes['stake'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\StakeResponseDto';
        $request = $this->stakeRequest($chainDescriptor, $stakeRequestDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stake'
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\StakeRequestDto $stakeRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['stake'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function stakeRequest($chainDescriptor, $stakeRequestDto, string $contentType = self::contentTypes['stake'][0])
    {

        // verify the required parameter 'chainDescriptor' is set
        if ($chainDescriptor === null || (is_array($chainDescriptor) && count($chainDescriptor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chainDescriptor when calling stake'
            );
        }

        // verify the required parameter 'stakeRequestDto' is set
        if ($stakeRequestDto === null || (is_array($stakeRequestDto) && count($stakeRequestDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $stakeRequestDto when calling stake'
            );
        }


        $resourcePath = '/staking/chains/{chainDescriptor}/stake';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($chainDescriptor !== null) {
            $resourcePath = str_replace(
                '{' . 'chainDescriptor' . '}',
                ObjectSerializer::toPathValue($chainDescriptor),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($stakeRequestDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($stakeRequestDto));
            } else {
                $httpBody = $stakeRequestDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unstake
     *
     * Execute an Unstake operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\UnstakeRequestDto $unstakeRequestDto unstakeRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unstake'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function unstake($chainDescriptor, $unstakeRequestDto, string $contentType = self::contentTypes['unstake'][0])
    {
        list($response) = $this->unstakeWithHttpInfo($chainDescriptor, $unstakeRequestDto, $contentType);
        return $response;
    }

    /**
     * Operation unstakeWithHttpInfo
     *
     * Execute an Unstake operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\UnstakeRequestDto $unstakeRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unstake'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function unstakeWithHttpInfo($chainDescriptor, $unstakeRequestDto, string $contentType = self::contentTypes['unstake'][0])
    {
        $request = $this->unstakeRequest($chainDescriptor, $unstakeRequestDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation unstakeAsync
     *
     * Execute an Unstake operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\UnstakeRequestDto $unstakeRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unstake'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unstakeAsync($chainDescriptor, $unstakeRequestDto, string $contentType = self::contentTypes['unstake'][0])
    {
        return $this->unstakeAsyncWithHttpInfo($chainDescriptor, $unstakeRequestDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unstakeAsyncWithHttpInfo
     *
     * Execute an Unstake operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\UnstakeRequestDto $unstakeRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unstake'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unstakeAsyncWithHttpInfo($chainDescriptor, $unstakeRequestDto, string $contentType = self::contentTypes['unstake'][0])
    {
        $returnType = 'object';
        $request = $this->unstakeRequest($chainDescriptor, $unstakeRequestDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unstake'
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\UnstakeRequestDto $unstakeRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unstake'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unstakeRequest($chainDescriptor, $unstakeRequestDto, string $contentType = self::contentTypes['unstake'][0])
    {

        // verify the required parameter 'chainDescriptor' is set
        if ($chainDescriptor === null || (is_array($chainDescriptor) && count($chainDescriptor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chainDescriptor when calling unstake'
            );
        }

        // verify the required parameter 'unstakeRequestDto' is set
        if ($unstakeRequestDto === null || (is_array($unstakeRequestDto) && count($unstakeRequestDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unstakeRequestDto when calling unstake'
            );
        }


        $resourcePath = '/staking/chains/{chainDescriptor}/unstake';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($chainDescriptor !== null) {
            $resourcePath = str_replace(
                '{' . 'chainDescriptor' . '}',
                ObjectSerializer::toPathValue($chainDescriptor),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($unstakeRequestDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($unstakeRequestDto));
            } else {
                $httpBody = $unstakeRequestDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation withdraw
     *
     * Execute a Withdraw operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\WithdrawRequestDto $withdrawRequestDto withdrawRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['withdraw'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object
     */
    public function withdraw($chainDescriptor, $withdrawRequestDto, string $contentType = self::contentTypes['withdraw'][0])
    {
        list($response) = $this->withdrawWithHttpInfo($chainDescriptor, $withdrawRequestDto, $contentType);
        return $response;
    }

    /**
     * Operation withdrawWithHttpInfo
     *
     * Execute a Withdraw operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\WithdrawRequestDto $withdrawRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['withdraw'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function withdrawWithHttpInfo($chainDescriptor, $withdrawRequestDto, string $contentType = self::contentTypes['withdraw'][0])
    {
        $request = $this->withdrawRequest($chainDescriptor, $withdrawRequestDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        'object',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'object',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation withdrawAsync
     *
     * Execute a Withdraw operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\WithdrawRequestDto $withdrawRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['withdraw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function withdrawAsync($chainDescriptor, $withdrawRequestDto, string $contentType = self::contentTypes['withdraw'][0])
    {
        return $this->withdrawAsyncWithHttpInfo($chainDescriptor, $withdrawRequestDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation withdrawAsyncWithHttpInfo
     *
     * Execute a Withdraw operation
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\WithdrawRequestDto $withdrawRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['withdraw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function withdrawAsyncWithHttpInfo($chainDescriptor, $withdrawRequestDto, string $contentType = self::contentTypes['withdraw'][0])
    {
        $returnType = 'object';
        $request = $this->withdrawRequest($chainDescriptor, $withdrawRequestDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'withdraw'
     *
     * @param  string $chainDescriptor The protocol identifier (e.g. \&quot;ETH\&quot;/\&quot;SOL\&quot;/\&quot;MATIC\&quot;) to use (required)
     * @param  \Developerayo\FireblocksLaravel\Models\WithdrawRequestDto $withdrawRequestDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['withdraw'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function withdrawRequest($chainDescriptor, $withdrawRequestDto, string $contentType = self::contentTypes['withdraw'][0])
    {

        // verify the required parameter 'chainDescriptor' is set
        if ($chainDescriptor === null || (is_array($chainDescriptor) && count($chainDescriptor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $chainDescriptor when calling withdraw'
            );
        }

        // verify the required parameter 'withdrawRequestDto' is set
        if ($withdrawRequestDto === null || (is_array($withdrawRequestDto) && count($withdrawRequestDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $withdrawRequestDto when calling withdraw'
            );
        }


        $resourcePath = '/staking/chains/{chainDescriptor}/withdraw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($chainDescriptor !== null) {
            $resourcePath = str_replace(
                '{' . 'chainDescriptor' . '}',
                ObjectSerializer::toPathValue($chainDescriptor),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($withdrawRequestDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($withdrawRequestDto));
            } else {
                $httpBody = $withdrawRequestDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
