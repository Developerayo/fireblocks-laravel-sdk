<?php
/**
 * PaymentsCrossBorderSettlementApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Developerayo\FireblocksLaravel\ApiException;
use Developerayo\FireblocksLaravel\Configuration;
use Developerayo\FireblocksLaravel\FormDataProcessor;
use Developerayo\FireblocksLaravel\HeaderSelector;
use Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * PaymentsCrossBorderSettlementApi Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentsCrossBorderSettlementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'paymentsXbSettlementsConfigsConfigIdDelete' => [
            'application/json',
        ],
        'paymentsXbSettlementsConfigsConfigIdGet' => [
            'application/json',
        ],
        'paymentsXbSettlementsConfigsConfigIdPut' => [
            'application/json',
        ],
        'paymentsXbSettlementsConfigsGet' => [
            'application/json',
        ],
        'paymentsXbSettlementsConfigsPost' => [
            'application/json',
        ],
        'paymentsXbSettlementsFlowsFlowIdActionsExecutePost' => [
            'application/json',
        ],
        'paymentsXbSettlementsFlowsFlowIdGet' => [
            'application/json',
        ],
        'paymentsXbSettlementsFlowsPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdDelete
     *
     * Delete a cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdDelete'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse
     */
    public function paymentsXbSettlementsConfigsConfigIdDelete($configId, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdDelete'][0])
    {
        list($response) = $this->paymentsXbSettlementsConfigsConfigIdDeleteWithHttpInfo($configId, $contentType);
        return $response;
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdDeleteWithHttpInfo
     *
     * Delete a cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdDelete'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsXbSettlementsConfigsConfigIdDeleteWithHttpInfo($configId, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdDelete'][0])
    {
        $request = $this->paymentsXbSettlementsConfigsConfigIdDeleteRequest($configId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                
            }

            if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
            }
        
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdDeleteAsync
     *
     * Delete a cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsConfigsConfigIdDeleteAsync($configId, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdDelete'][0])
    {
        return $this->paymentsXbSettlementsConfigsConfigIdDeleteAsyncWithHttpInfo($configId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdDeleteAsyncWithHttpInfo
     *
     * Delete a cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsConfigsConfigIdDeleteAsyncWithHttpInfo($configId, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdDelete'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel';
        $request = $this->paymentsXbSettlementsConfigsConfigIdDeleteRequest($configId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsXbSettlementsConfigsConfigIdDelete'
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsXbSettlementsConfigsConfigIdDeleteRequest($configId, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdDelete'][0])
    {

        // verify the required parameter 'configId' is set
        if ($configId === null || (is_array($configId) && count($configId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configId when calling paymentsXbSettlementsConfigsConfigIdDelete'
            );
        }


        $resourcePath = '/payments/xb-settlements/configs/{configId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($configId !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($configId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdGet
     *
     * Get a specific cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse
     */
    public function paymentsXbSettlementsConfigsConfigIdGet($configId, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdGet'][0])
    {
        list($response) = $this->paymentsXbSettlementsConfigsConfigIdGetWithHttpInfo($configId, $contentType);
        return $response;
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdGetWithHttpInfo
     *
     * Get a specific cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsXbSettlementsConfigsConfigIdGetWithHttpInfo($configId, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdGet'][0])
    {
        $request = $this->paymentsXbSettlementsConfigsConfigIdGetRequest($configId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                
            }

            if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
            }
        
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdGetAsync
     *
     * Get a specific cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsConfigsConfigIdGetAsync($configId, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdGet'][0])
    {
        return $this->paymentsXbSettlementsConfigsConfigIdGetAsyncWithHttpInfo($configId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdGetAsyncWithHttpInfo
     *
     * Get a specific cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsConfigsConfigIdGetAsyncWithHttpInfo($configId, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel';
        $request = $this->paymentsXbSettlementsConfigsConfigIdGetRequest($configId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsXbSettlementsConfigsConfigIdGet'
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsXbSettlementsConfigsConfigIdGetRequest($configId, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdGet'][0])
    {

        // verify the required parameter 'configId' is set
        if ($configId === null || (is_array($configId) && count($configId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configId when calling paymentsXbSettlementsConfigsConfigIdGet'
            );
        }


        $resourcePath = '/payments/xb-settlements/configs/{configId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($configId !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($configId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdPut
     *
     * Edit a cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementConfigEditRequestBody|null $xBSettlementConfigEditRequestBody xBSettlementConfigEditRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdPut'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse
     */
    public function paymentsXbSettlementsConfigsConfigIdPut($configId, $xBSettlementConfigEditRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdPut'][0])
    {
        list($response) = $this->paymentsXbSettlementsConfigsConfigIdPutWithHttpInfo($configId, $xBSettlementConfigEditRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdPutWithHttpInfo
     *
     * Edit a cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementConfigEditRequestBody|null $xBSettlementConfigEditRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdPut'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsXbSettlementsConfigsConfigIdPutWithHttpInfo($configId, $xBSettlementConfigEditRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdPut'][0])
    {
        $request = $this->paymentsXbSettlementsConfigsConfigIdPutRequest($configId, $xBSettlementConfigEditRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                
            }

            if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
            }
        
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdPutAsync
     *
     * Edit a cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementConfigEditRequestBody|null $xBSettlementConfigEditRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsConfigsConfigIdPutAsync($configId, $xBSettlementConfigEditRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdPut'][0])
    {
        return $this->paymentsXbSettlementsConfigsConfigIdPutAsyncWithHttpInfo($configId, $xBSettlementConfigEditRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsXbSettlementsConfigsConfigIdPutAsyncWithHttpInfo
     *
     * Edit a cross-border settlement configuration
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementConfigEditRequestBody|null $xBSettlementConfigEditRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsConfigsConfigIdPutAsyncWithHttpInfo($configId, $xBSettlementConfigEditRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdPut'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel';
        $request = $this->paymentsXbSettlementsConfigsConfigIdPutRequest($configId, $xBSettlementConfigEditRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsXbSettlementsConfigsConfigIdPut'
     *
     * @param  string $configId The cross-border settlement configuration ID. (required)
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementConfigEditRequestBody|null $xBSettlementConfigEditRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsConfigIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsXbSettlementsConfigsConfigIdPutRequest($configId, $xBSettlementConfigEditRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsConfigIdPut'][0])
    {

        // verify the required parameter 'configId' is set
        if ($configId === null || (is_array($configId) && count($configId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $configId when calling paymentsXbSettlementsConfigsConfigIdPut'
            );
        }



        $resourcePath = '/payments/xb-settlements/configs/{configId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($configId !== null) {
            $resourcePath = str_replace(
                '{' . 'configId' . '}',
                ObjectSerializer::toPathValue($configId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($xBSettlementConfigEditRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($xBSettlementConfigEditRequestBody));
            } else {
                $httpBody = $xBSettlementConfigEditRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsXbSettlementsConfigsGet
     *
     * Get all the cross-border settlement configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\XBSettlementGetAllConfigsResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse
     */
    public function paymentsXbSettlementsConfigsGet(string $contentType = self::contentTypes['paymentsXbSettlementsConfigsGet'][0])
    {
        list($response) = $this->paymentsXbSettlementsConfigsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation paymentsXbSettlementsConfigsGetWithHttpInfo
     *
     * Get all the cross-border settlement configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\XBSettlementGetAllConfigsResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsXbSettlementsConfigsGetWithHttpInfo(string $contentType = self::contentTypes['paymentsXbSettlementsConfigsGet'][0])
    {
        $request = $this->paymentsXbSettlementsConfigsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementGetAllConfigsResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                
            }

            if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\XBSettlementGetAllConfigsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementGetAllConfigsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
            }
        
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentsXbSettlementsConfigsGetAsync
     *
     * Get all the cross-border settlement configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsConfigsGetAsync(string $contentType = self::contentTypes['paymentsXbSettlementsConfigsGet'][0])
    {
        return $this->paymentsXbSettlementsConfigsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsXbSettlementsConfigsGetAsyncWithHttpInfo
     *
     * Get all the cross-border settlement configurations
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsConfigsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['paymentsXbSettlementsConfigsGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\XBSettlementGetAllConfigsResponse';
        $request = $this->paymentsXbSettlementsConfigsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsXbSettlementsConfigsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsXbSettlementsConfigsGetRequest(string $contentType = self::contentTypes['paymentsXbSettlementsConfigsGet'][0])
    {


        $resourcePath = '/payments/xb-settlements/configs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsXbSettlementsConfigsPost
     *
     * Create a new cross-border settlement configuration
     *
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementConfigCreationRequestBody|null $xBSettlementConfigCreationRequestBody xBSettlementConfigCreationRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse
     */
    public function paymentsXbSettlementsConfigsPost($xBSettlementConfigCreationRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsPost'][0])
    {
        list($response) = $this->paymentsXbSettlementsConfigsPostWithHttpInfo($xBSettlementConfigCreationRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation paymentsXbSettlementsConfigsPostWithHttpInfo
     *
     * Create a new cross-border settlement configuration
     *
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementConfigCreationRequestBody|null $xBSettlementConfigCreationRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsXbSettlementsConfigsPostWithHttpInfo($xBSettlementConfigCreationRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsPost'][0])
    {
        $request = $this->paymentsXbSettlementsConfigsPostRequest($xBSettlementConfigCreationRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                
            }

            if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
            }
        
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentsXbSettlementsConfigsPostAsync
     *
     * Create a new cross-border settlement configuration
     *
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementConfigCreationRequestBody|null $xBSettlementConfigCreationRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsConfigsPostAsync($xBSettlementConfigCreationRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsPost'][0])
    {
        return $this->paymentsXbSettlementsConfigsPostAsyncWithHttpInfo($xBSettlementConfigCreationRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsXbSettlementsConfigsPostAsyncWithHttpInfo
     *
     * Create a new cross-border settlement configuration
     *
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementConfigCreationRequestBody|null $xBSettlementConfigCreationRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsConfigsPostAsyncWithHttpInfo($xBSettlementConfigCreationRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\XBSettlementConfigModel';
        $request = $this->paymentsXbSettlementsConfigsPostRequest($xBSettlementConfigCreationRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsXbSettlementsConfigsPost'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementConfigCreationRequestBody|null $xBSettlementConfigCreationRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsConfigsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsXbSettlementsConfigsPostRequest($xBSettlementConfigCreationRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsConfigsPost'][0])
    {



        $resourcePath = '/payments/xb-settlements/configs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($xBSettlementConfigCreationRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($xBSettlementConfigCreationRequestBody));
            } else {
                $httpBody = $xBSettlementConfigCreationRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsXbSettlementsFlowsFlowIdActionsExecutePost
     *
     * Execute cross-border settlement flow
     *
     * @param  string $flowId The cross-border settlement flow ID. (required)
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionRequestBody|null $xBSettlementFlowExecutionRequestBody xBSettlementFlowExecutionRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsFlowIdActionsExecutePost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse
     */
    public function paymentsXbSettlementsFlowsFlowIdActionsExecutePost($flowId, $xBSettlementFlowExecutionRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsFlowIdActionsExecutePost'][0])
    {
        list($response) = $this->paymentsXbSettlementsFlowsFlowIdActionsExecutePostWithHttpInfo($flowId, $xBSettlementFlowExecutionRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation paymentsXbSettlementsFlowsFlowIdActionsExecutePostWithHttpInfo
     *
     * Execute cross-border settlement flow
     *
     * @param  string $flowId The cross-border settlement flow ID. (required)
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionRequestBody|null $xBSettlementFlowExecutionRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsFlowIdActionsExecutePost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsXbSettlementsFlowsFlowIdActionsExecutePostWithHttpInfo($flowId, $xBSettlementFlowExecutionRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsFlowIdActionsExecutePost'][0])
    {
        $request = $this->paymentsXbSettlementsFlowsFlowIdActionsExecutePostRequest($flowId, $xBSettlementFlowExecutionRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionModel',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                
            }

            if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
            }
        
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentsXbSettlementsFlowsFlowIdActionsExecutePostAsync
     *
     * Execute cross-border settlement flow
     *
     * @param  string $flowId The cross-border settlement flow ID. (required)
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionRequestBody|null $xBSettlementFlowExecutionRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsFlowIdActionsExecutePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsFlowsFlowIdActionsExecutePostAsync($flowId, $xBSettlementFlowExecutionRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsFlowIdActionsExecutePost'][0])
    {
        return $this->paymentsXbSettlementsFlowsFlowIdActionsExecutePostAsyncWithHttpInfo($flowId, $xBSettlementFlowExecutionRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsXbSettlementsFlowsFlowIdActionsExecutePostAsyncWithHttpInfo
     *
     * Execute cross-border settlement flow
     *
     * @param  string $flowId The cross-border settlement flow ID. (required)
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionRequestBody|null $xBSettlementFlowExecutionRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsFlowIdActionsExecutePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsFlowsFlowIdActionsExecutePostAsyncWithHttpInfo($flowId, $xBSettlementFlowExecutionRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsFlowIdActionsExecutePost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionModel';
        $request = $this->paymentsXbSettlementsFlowsFlowIdActionsExecutePostRequest($flowId, $xBSettlementFlowExecutionRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsXbSettlementsFlowsFlowIdActionsExecutePost'
     *
     * @param  string $flowId The cross-border settlement flow ID. (required)
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementFlowExecutionRequestBody|null $xBSettlementFlowExecutionRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsFlowIdActionsExecutePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsXbSettlementsFlowsFlowIdActionsExecutePostRequest($flowId, $xBSettlementFlowExecutionRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsFlowIdActionsExecutePost'][0])
    {

        // verify the required parameter 'flowId' is set
        if ($flowId === null || (is_array($flowId) && count($flowId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flowId when calling paymentsXbSettlementsFlowsFlowIdActionsExecutePost'
            );
        }



        $resourcePath = '/payments/xb-settlements/flows/{flowId}/actions/execute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($flowId !== null) {
            $resourcePath = str_replace(
                '{' . 'flowId' . '}',
                ObjectSerializer::toPathValue($flowId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($xBSettlementFlowExecutionRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($xBSettlementFlowExecutionRequestBody));
            } else {
                $httpBody = $xBSettlementFlowExecutionRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsXbSettlementsFlowsFlowIdGet
     *
     * Get specific cross-border settlement flow details
     *
     * @param  string $flowId The cross-border settlement flow ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsFlowIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\XBSettlementGetFlowResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse
     */
    public function paymentsXbSettlementsFlowsFlowIdGet($flowId, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsFlowIdGet'][0])
    {
        list($response) = $this->paymentsXbSettlementsFlowsFlowIdGetWithHttpInfo($flowId, $contentType);
        return $response;
    }

    /**
     * Operation paymentsXbSettlementsFlowsFlowIdGetWithHttpInfo
     *
     * Get specific cross-border settlement flow details
     *
     * @param  string $flowId The cross-border settlement flow ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsFlowIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\XBSettlementGetFlowResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsXbSettlementsFlowsFlowIdGetWithHttpInfo($flowId, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsFlowIdGet'][0])
    {
        $request = $this->paymentsXbSettlementsFlowsFlowIdGetRequest($flowId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementGetFlowResponse',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                
            }

            if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\XBSettlementGetFlowResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementGetFlowResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
            }
        
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentsXbSettlementsFlowsFlowIdGetAsync
     *
     * Get specific cross-border settlement flow details
     *
     * @param  string $flowId The cross-border settlement flow ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsFlowIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsFlowsFlowIdGetAsync($flowId, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsFlowIdGet'][0])
    {
        return $this->paymentsXbSettlementsFlowsFlowIdGetAsyncWithHttpInfo($flowId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsXbSettlementsFlowsFlowIdGetAsyncWithHttpInfo
     *
     * Get specific cross-border settlement flow details
     *
     * @param  string $flowId The cross-border settlement flow ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsFlowIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsFlowsFlowIdGetAsyncWithHttpInfo($flowId, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsFlowIdGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\XBSettlementGetFlowResponse';
        $request = $this->paymentsXbSettlementsFlowsFlowIdGetRequest($flowId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsXbSettlementsFlowsFlowIdGet'
     *
     * @param  string $flowId The cross-border settlement flow ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsFlowIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsXbSettlementsFlowsFlowIdGetRequest($flowId, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsFlowIdGet'][0])
    {

        // verify the required parameter 'flowId' is set
        if ($flowId === null || (is_array($flowId) && count($flowId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $flowId when calling paymentsXbSettlementsFlowsFlowIdGet'
            );
        }


        $resourcePath = '/payments/xb-settlements/flows/{flowId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($flowId !== null) {
            $resourcePath = str_replace(
                '{' . 'flowId' . '}',
                ObjectSerializer::toPathValue($flowId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentsXbSettlementsFlowsPost
     *
     * Create a new cross-border settlement flow
     *
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementCreateFlowRequestBody|null $xBSettlementCreateFlowRequestBody xBSettlementCreateFlowRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\XBSettlementFlowPreviewModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse
     */
    public function paymentsXbSettlementsFlowsPost($xBSettlementCreateFlowRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsPost'][0])
    {
        list($response) = $this->paymentsXbSettlementsFlowsPostWithHttpInfo($xBSettlementCreateFlowRequestBody, $contentType);
        return $response;
    }

    /**
     * Operation paymentsXbSettlementsFlowsPostWithHttpInfo
     *
     * Create a new cross-border settlement flow
     *
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementCreateFlowRequestBody|null $xBSettlementCreateFlowRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\XBSettlementFlowPreviewModel|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse|\Developerayo\FireblocksLaravel\Models\ErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentsXbSettlementsFlowsPostWithHttpInfo($xBSettlementCreateFlowRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsPost'][0])
    {
        $request = $this->paymentsXbSettlementsFlowsPostRequest($xBSettlementCreateFlowRequestBody, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementFlowPreviewModel',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $request,
                        $response,
                    );
                
            }

            if ($this->responseWithinRangeCode('5XX', $statusCode)) {
                return $this->handleResponseWithDataType(
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $request,
                    $response,
                );
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\XBSettlementFlowPreviewModel',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\XBSettlementFlowPreviewModel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                
            }
        
            if ($this->responseWithinRangeCode('5XX', $e->getCode())) {
                $data = ObjectSerializer::deserialize(
                    $e->getResponseBody(),
                    '\Developerayo\FireblocksLaravel\Models\ErrorResponse',
                    $e->getResponseHeaders()
                );
                $e->setResponseObject($data);
                throw $e;
            }

            throw $e;
        }
    }

    /**
     * Operation paymentsXbSettlementsFlowsPostAsync
     *
     * Create a new cross-border settlement flow
     *
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementCreateFlowRequestBody|null $xBSettlementCreateFlowRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsFlowsPostAsync($xBSettlementCreateFlowRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsPost'][0])
    {
        return $this->paymentsXbSettlementsFlowsPostAsyncWithHttpInfo($xBSettlementCreateFlowRequestBody, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentsXbSettlementsFlowsPostAsyncWithHttpInfo
     *
     * Create a new cross-border settlement flow
     *
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementCreateFlowRequestBody|null $xBSettlementCreateFlowRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentsXbSettlementsFlowsPostAsyncWithHttpInfo($xBSettlementCreateFlowRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\XBSettlementFlowPreviewModel';
        $request = $this->paymentsXbSettlementsFlowsPostRequest($xBSettlementCreateFlowRequestBody, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentsXbSettlementsFlowsPost'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\XBSettlementCreateFlowRequestBody|null $xBSettlementCreateFlowRequestBody (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['paymentsXbSettlementsFlowsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function paymentsXbSettlementsFlowsPostRequest($xBSettlementCreateFlowRequestBody = null, string $contentType = self::contentTypes['paymentsXbSettlementsFlowsPost'][0])
    {



        $resourcePath = '/payments/xb-settlements/flows';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($xBSettlementCreateFlowRequestBody)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($xBSettlementCreateFlowRequestBody));
            } else {
                $httpBody = $xBSettlementCreateFlowRequestBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
