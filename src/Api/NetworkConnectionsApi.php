<?php
/**
 * NetworkConnectionsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Developerayo\FireblocksLaravel\ApiException;
use Developerayo\FireblocksLaravel\Configuration;
use Developerayo\FireblocksLaravel\FormDataProcessor;
use Developerayo\FireblocksLaravel\HeaderSelector;
use Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * NetworkConnectionsApi Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NetworkConnectionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'networkConnectionsConnectionIdDelete' => [
            'application/json',
        ],
        'networkConnectionsConnectionIdGet' => [
            'application/json',
        ],
        'networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet' => [
            'application/json',
        ],
        'networkConnectionsConnectionIdSetRoutingPolicyPatch' => [
            'application/json',
        ],
        'networkConnectionsGet' => [
            'application/json',
        ],
        'networkConnectionsPost' => [
            'application/json',
        ],
        'networkIdsGet' => [
            'application/json',
        ],
        'networkIdsNetworkIdDelete' => [
            'application/json',
        ],
        'networkIdsNetworkIdGet' => [
            'application/json',
        ],
        'networkIdsNetworkIdSetDiscoverabilityPatch' => [
            'application/json',
        ],
        'networkIdsNetworkIdSetNamePatch' => [
            'application/json',
        ],
        'networkIdsNetworkIdSetRoutingPolicyPatch' => [
            'application/json',
        ],
        'networkIdsPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation networkConnectionsConnectionIdDelete
     *
     * Deletes a network connection by ID
     *
     * @param  string $connectionId The ID of the network connection to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdDelete'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkConnectionsConnectionIdDelete($connectionId, string $contentType = self::contentTypes['networkConnectionsConnectionIdDelete'][0])
    {
        list($response) = $this->networkConnectionsConnectionIdDeleteWithHttpInfo($connectionId, $contentType);
        return $response;
    }

    /**
     * Operation networkConnectionsConnectionIdDeleteWithHttpInfo
     *
     * Deletes a network connection by ID
     *
     * @param  string $connectionId The ID of the network connection to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdDelete'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkConnectionsConnectionIdDeleteWithHttpInfo($connectionId, string $contentType = self::contentTypes['networkConnectionsConnectionIdDelete'][0])
    {
        $request = $this->networkConnectionsConnectionIdDeleteRequest($connectionId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkConnectionsConnectionIdDeleteAsync
     *
     * Deletes a network connection by ID
     *
     * @param  string $connectionId The ID of the network connection to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsConnectionIdDeleteAsync($connectionId, string $contentType = self::contentTypes['networkConnectionsConnectionIdDelete'][0])
    {
        return $this->networkConnectionsConnectionIdDeleteAsyncWithHttpInfo($connectionId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkConnectionsConnectionIdDeleteAsyncWithHttpInfo
     *
     * Deletes a network connection by ID
     *
     * @param  string $connectionId The ID of the network connection to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsConnectionIdDeleteAsyncWithHttpInfo($connectionId, string $contentType = self::contentTypes['networkConnectionsConnectionIdDelete'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response';
        $request = $this->networkConnectionsConnectionIdDeleteRequest($connectionId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkConnectionsConnectionIdDelete'
     *
     * @param  string $connectionId The ID of the network connection to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkConnectionsConnectionIdDeleteRequest($connectionId, string $contentType = self::contentTypes['networkConnectionsConnectionIdDelete'][0])
    {

        // verify the required parameter 'connectionId' is set
        if ($connectionId === null || (is_array($connectionId) && count($connectionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connectionId when calling networkConnectionsConnectionIdDelete'
            );
        }
        

        $resourcePath = '/network_connections/{connectionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connectionId !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connectionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkConnectionsConnectionIdGet
     *
     * Get a network connection
     *
     * @param  string $connectionId The ID of the connection (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkConnectionsConnectionIdGet($connectionId, string $contentType = self::contentTypes['networkConnectionsConnectionIdGet'][0])
    {
        list($response) = $this->networkConnectionsConnectionIdGetWithHttpInfo($connectionId, $contentType);
        return $response;
    }

    /**
     * Operation networkConnectionsConnectionIdGetWithHttpInfo
     *
     * Get a network connection
     *
     * @param  string $connectionId The ID of the connection (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkConnectionsConnectionIdGetWithHttpInfo($connectionId, string $contentType = self::contentTypes['networkConnectionsConnectionIdGet'][0])
    {
        $request = $this->networkConnectionsConnectionIdGetRequest($connectionId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkConnectionsConnectionIdGetAsync
     *
     * Get a network connection
     *
     * @param  string $connectionId The ID of the connection (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsConnectionIdGetAsync($connectionId, string $contentType = self::contentTypes['networkConnectionsConnectionIdGet'][0])
    {
        return $this->networkConnectionsConnectionIdGetAsyncWithHttpInfo($connectionId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkConnectionsConnectionIdGetAsyncWithHttpInfo
     *
     * Get a network connection
     *
     * @param  string $connectionId The ID of the connection (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsConnectionIdGetAsyncWithHttpInfo($connectionId, string $contentType = self::contentTypes['networkConnectionsConnectionIdGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse';
        $request = $this->networkConnectionsConnectionIdGetRequest($connectionId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkConnectionsConnectionIdGet'
     *
     * @param  string $connectionId The ID of the connection (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkConnectionsConnectionIdGetRequest($connectionId, string $contentType = self::contentTypes['networkConnectionsConnectionIdGet'][0])
    {

        // verify the required parameter 'connectionId' is set
        if ($connectionId === null || (is_array($connectionId) && count($connectionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connectionId when calling networkConnectionsConnectionIdGet'
            );
        }
        

        $resourcePath = '/network_connections/{connectionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connectionId !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connectionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet
     *
     * Retrieve third-party network routing validation by asset type.
     *
     * @param  string $connectionId The ID of the network connection (required)
     * @param  string $assetType The destination asset type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet200Response|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet($connectionId, $assetType, string $contentType = self::contentTypes['networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'][0])
    {
        list($response) = $this->networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetWithHttpInfo($connectionId, $assetType, $contentType);
        return $response;
    }

    /**
     * Operation networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetWithHttpInfo
     *
     * Retrieve third-party network routing validation by asset type.
     *
     * @param  string $connectionId The ID of the network connection (required)
     * @param  string $assetType The destination asset type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet200Response|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetWithHttpInfo($connectionId, $assetType, string $contentType = self::contentTypes['networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'][0])
    {
        $request = $this->networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetRequest($connectionId, $assetType, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetAsync
     *
     * Retrieve third-party network routing validation by asset type.
     *
     * @param  string $connectionId The ID of the network connection (required)
     * @param  string $assetType The destination asset type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetAsync($connectionId, $assetType, string $contentType = self::contentTypes['networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'][0])
    {
        return $this->networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetAsyncWithHttpInfo($connectionId, $assetType, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetAsyncWithHttpInfo
     *
     * Retrieve third-party network routing validation by asset type.
     *
     * @param  string $connectionId The ID of the network connection (required)
     * @param  string $assetType The destination asset type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetAsyncWithHttpInfo($connectionId, $assetType, string $contentType = self::contentTypes['networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet200Response';
        $request = $this->networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetRequest($connectionId, $assetType, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'
     *
     * @param  string $connectionId The ID of the network connection (required)
     * @param  string $assetType The destination asset type (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGetRequest($connectionId, $assetType, string $contentType = self::contentTypes['networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'][0])
    {

        // verify the required parameter 'connectionId' is set
        if ($connectionId === null || (is_array($connectionId) && count($connectionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connectionId when calling networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'
            );
        }
        
        // verify the required parameter 'assetType' is set
        if ($assetType === null || (is_array($assetType) && count($assetType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assetType when calling networkConnectionsConnectionIdIsThirdPartyRoutingAssetTypeGet'
            );
        }


        $resourcePath = '/network_connections/{connectionId}/is_third_party_routing/{assetType}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connectionId !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connectionId),
                $resourcePath
            );
        }
        // path params
        if ($assetType !== null) {
            $resourcePath = str_replace(
                '{' . 'assetType' . '}',
                ObjectSerializer::toPathValue($assetType),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkConnectionsConnectionIdSetRoutingPolicyPatch
     *
     * Update network connection routing policy.
     *
     * @param  string $connectionId The ID of the network connection (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatchRequest|null $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest networkConnectionsConnectionIdSetRoutingPolicyPatchRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdSetRoutingPolicyPatch'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkConnectionsConnectionIdSetRoutingPolicyPatch($connectionId, $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest = null, string $contentType = self::contentTypes['networkConnectionsConnectionIdSetRoutingPolicyPatch'][0])
    {
        list($response) = $this->networkConnectionsConnectionIdSetRoutingPolicyPatchWithHttpInfo($connectionId, $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest, $contentType);
        return $response;
    }

    /**
     * Operation networkConnectionsConnectionIdSetRoutingPolicyPatchWithHttpInfo
     *
     * Update network connection routing policy.
     *
     * @param  string $connectionId The ID of the network connection (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatchRequest|null $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdSetRoutingPolicyPatch'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkConnectionsConnectionIdSetRoutingPolicyPatchWithHttpInfo($connectionId, $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest = null, string $contentType = self::contentTypes['networkConnectionsConnectionIdSetRoutingPolicyPatch'][0])
    {
        $request = $this->networkConnectionsConnectionIdSetRoutingPolicyPatchRequest($connectionId, $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkConnectionsConnectionIdSetRoutingPolicyPatchAsync
     *
     * Update network connection routing policy.
     *
     * @param  string $connectionId The ID of the network connection (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatchRequest|null $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdSetRoutingPolicyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsConnectionIdSetRoutingPolicyPatchAsync($connectionId, $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest = null, string $contentType = self::contentTypes['networkConnectionsConnectionIdSetRoutingPolicyPatch'][0])
    {
        return $this->networkConnectionsConnectionIdSetRoutingPolicyPatchAsyncWithHttpInfo($connectionId, $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkConnectionsConnectionIdSetRoutingPolicyPatchAsyncWithHttpInfo
     *
     * Update network connection routing policy.
     *
     * @param  string $connectionId The ID of the network connection (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatchRequest|null $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdSetRoutingPolicyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsConnectionIdSetRoutingPolicyPatchAsyncWithHttpInfo($connectionId, $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest = null, string $contentType = self::contentTypes['networkConnectionsConnectionIdSetRoutingPolicyPatch'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response';
        $request = $this->networkConnectionsConnectionIdSetRoutingPolicyPatchRequest($connectionId, $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkConnectionsConnectionIdSetRoutingPolicyPatch'
     *
     * @param  string $connectionId The ID of the network connection (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatchRequest|null $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsConnectionIdSetRoutingPolicyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkConnectionsConnectionIdSetRoutingPolicyPatchRequest($connectionId, $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest = null, string $contentType = self::contentTypes['networkConnectionsConnectionIdSetRoutingPolicyPatch'][0])
    {

        // verify the required parameter 'connectionId' is set
        if ($connectionId === null || (is_array($connectionId) && count($connectionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connectionId when calling networkConnectionsConnectionIdSetRoutingPolicyPatch'
            );
        }
        


        $resourcePath = '/network_connections/{connectionId}/set_routing_policy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($connectionId !== null) {
            $resourcePath = str_replace(
                '{' . 'connectionId' . '}',
                ObjectSerializer::toPathValue($connectionId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($networkConnectionsConnectionIdSetRoutingPolicyPatchRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($networkConnectionsConnectionIdSetRoutingPolicyPatchRequest));
            } else {
                $httpBody = $networkConnectionsConnectionIdSetRoutingPolicyPatchRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkConnectionsGet
     *
     * List network connections
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse[]|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkConnectionsGet(string $contentType = self::contentTypes['networkConnectionsGet'][0])
    {
        list($response) = $this->networkConnectionsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation networkConnectionsGetWithHttpInfo
     *
     * List network connections
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse[]|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkConnectionsGetWithHttpInfo(string $contentType = self::contentTypes['networkConnectionsGet'][0])
    {
        $request = $this->networkConnectionsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse[]',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkConnectionsGetAsync
     *
     * List network connections
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsGetAsync(string $contentType = self::contentTypes['networkConnectionsGet'][0])
    {
        return $this->networkConnectionsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkConnectionsGetAsyncWithHttpInfo
     *
     * List network connections
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['networkConnectionsGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse[]';
        $request = $this->networkConnectionsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkConnectionsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkConnectionsGetRequest(string $contentType = self::contentTypes['networkConnectionsGet'][0])
    {


        $resourcePath = '/network_connections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkConnectionsPost
     *
     * Creates a new network connection
     *
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkConnection|null $networkConnection networkConnection (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkConnectionsPost($networkConnection = null, string $contentType = self::contentTypes['networkConnectionsPost'][0])
    {
        list($response) = $this->networkConnectionsPostWithHttpInfo($networkConnection, $contentType);
        return $response;
    }

    /**
     * Operation networkConnectionsPostWithHttpInfo
     *
     * Creates a new network connection
     *
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkConnection|null $networkConnection (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkConnectionsPostWithHttpInfo($networkConnection = null, string $contentType = self::contentTypes['networkConnectionsPost'][0])
    {
        $request = $this->networkConnectionsPostRequest($networkConnection, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkConnectionsPostAsync
     *
     * Creates a new network connection
     *
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkConnection|null $networkConnection (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsPostAsync($networkConnection = null, string $contentType = self::contentTypes['networkConnectionsPost'][0])
    {
        return $this->networkConnectionsPostAsyncWithHttpInfo($networkConnection, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkConnectionsPostAsyncWithHttpInfo
     *
     * Creates a new network connection
     *
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkConnection|null $networkConnection (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkConnectionsPostAsyncWithHttpInfo($networkConnection = null, string $contentType = self::contentTypes['networkConnectionsPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkConnectionResponse';
        $request = $this->networkConnectionsPostRequest($networkConnection, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkConnectionsPost'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkConnection|null $networkConnection (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkConnectionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkConnectionsPostRequest($networkConnection = null, string $contentType = self::contentTypes['networkConnectionsPost'][0])
    {



        $resourcePath = '/network_connections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($networkConnection)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($networkConnection));
            } else {
                $httpBody = $networkConnection;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkIdsGet
     *
     * Returns all network IDs, both local IDs and discoverable remote IDs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \DeveloperayoFireblocksLaravelModelsNetworkIdResponse[]|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkIdsGet(string $contentType = self::contentTypes['networkIdsGet'][0])
    {
        list($response) = $this->networkIdsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation networkIdsGetWithHttpInfo
     *
     * Returns all network IDs, both local IDs and discoverable remote IDs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \DeveloperayoFireblocksLaravelModelsNetworkIdResponse[]|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkIdsGetWithHttpInfo(string $contentType = self::contentTypes['networkIdsGet'][0])
    {
        $request = $this->networkIdsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\DeveloperayoFireblocksLaravelModelsNetworkIdResponse[]',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\DeveloperayoFireblocksLaravelModelsNetworkIdResponse[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\DeveloperayoFireblocksLaravelModelsNetworkIdResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkIdsGetAsync
     *
     * Returns all network IDs, both local IDs and discoverable remote IDs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsGetAsync(string $contentType = self::contentTypes['networkIdsGet'][0])
    {
        return $this->networkIdsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkIdsGetAsyncWithHttpInfo
     *
     * Returns all network IDs, both local IDs and discoverable remote IDs
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['networkIdsGet'][0])
    {
        $returnType = '\DeveloperayoFireblocksLaravelModelsNetworkIdResponse[]';
        $request = $this->networkIdsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkIdsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkIdsGetRequest(string $contentType = self::contentTypes['networkIdsGet'][0])
    {


        $resourcePath = '/network_ids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkIdsNetworkIdDelete
     *
     * Deletes specific network ID.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdDelete'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkIdsNetworkIdDelete($networkId, string $contentType = self::contentTypes['networkIdsNetworkIdDelete'][0])
    {
        list($response) = $this->networkIdsNetworkIdDeleteWithHttpInfo($networkId, $contentType);
        return $response;
    }

    /**
     * Operation networkIdsNetworkIdDeleteWithHttpInfo
     *
     * Deletes specific network ID.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdDelete'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkIdsNetworkIdDeleteWithHttpInfo($networkId, string $contentType = self::contentTypes['networkIdsNetworkIdDelete'][0])
    {
        $request = $this->networkIdsNetworkIdDeleteRequest($networkId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkIdsNetworkIdDeleteAsync
     *
     * Deletes specific network ID.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsNetworkIdDeleteAsync($networkId, string $contentType = self::contentTypes['networkIdsNetworkIdDelete'][0])
    {
        return $this->networkIdsNetworkIdDeleteAsyncWithHttpInfo($networkId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkIdsNetworkIdDeleteAsyncWithHttpInfo
     *
     * Deletes specific network ID.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsNetworkIdDeleteAsyncWithHttpInfo($networkId, string $contentType = self::contentTypes['networkIdsNetworkIdDelete'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response';
        $request = $this->networkIdsNetworkIdDeleteRequest($networkId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkIdsNetworkIdDelete'
     *
     * @param  string $networkId The ID of the network (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkIdsNetworkIdDeleteRequest($networkId, string $contentType = self::contentTypes['networkIdsNetworkIdDelete'][0])
    {

        // verify the required parameter 'networkId' is set
        if ($networkId === null || (is_array($networkId) && count($networkId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $networkId when calling networkIdsNetworkIdDelete'
            );
        }
        

        $resourcePath = '/network_ids/{networkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($networkId !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($networkId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkIdsNetworkIdGet
     *
     * Returns specific network ID.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkIdResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkIdsNetworkIdGet($networkId, string $contentType = self::contentTypes['networkIdsNetworkIdGet'][0])
    {
        list($response) = $this->networkIdsNetworkIdGetWithHttpInfo($networkId, $contentType);
        return $response;
    }

    /**
     * Operation networkIdsNetworkIdGetWithHttpInfo
     *
     * Returns specific network ID.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkIdResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkIdsNetworkIdGetWithHttpInfo($networkId, string $contentType = self::contentTypes['networkIdsNetworkIdGet'][0])
    {
        $request = $this->networkIdsNetworkIdGetRequest($networkId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkIdResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkIdResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkIdsNetworkIdGetAsync
     *
     * Returns specific network ID.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsNetworkIdGetAsync($networkId, string $contentType = self::contentTypes['networkIdsNetworkIdGet'][0])
    {
        return $this->networkIdsNetworkIdGetAsyncWithHttpInfo($networkId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkIdsNetworkIdGetAsyncWithHttpInfo
     *
     * Returns specific network ID.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsNetworkIdGetAsyncWithHttpInfo($networkId, string $contentType = self::contentTypes['networkIdsNetworkIdGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkIdResponse';
        $request = $this->networkIdsNetworkIdGetRequest($networkId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkIdsNetworkIdGet'
     *
     * @param  string $networkId The ID of the network (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkIdsNetworkIdGetRequest($networkId, string $contentType = self::contentTypes['networkIdsNetworkIdGet'][0])
    {

        // verify the required parameter 'networkId' is set
        if ($networkId === null || (is_array($networkId) && count($networkId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $networkId when calling networkIdsNetworkIdGet'
            );
        }
        

        $resourcePath = '/network_ids/{networkId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($networkId !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($networkId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkIdsNetworkIdSetDiscoverabilityPatch
     *
     * Update network ID&#39;s discoverability.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetDiscoverabilityPatchRequest $networkIdsNetworkIdSetDiscoverabilityPatchRequest networkIdsNetworkIdSetDiscoverabilityPatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetDiscoverabilityPatch'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkIdsNetworkIdSetDiscoverabilityPatch($networkId, $networkIdsNetworkIdSetDiscoverabilityPatchRequest, string $contentType = self::contentTypes['networkIdsNetworkIdSetDiscoverabilityPatch'][0])
    {
        list($response) = $this->networkIdsNetworkIdSetDiscoverabilityPatchWithHttpInfo($networkId, $networkIdsNetworkIdSetDiscoverabilityPatchRequest, $contentType);
        return $response;
    }

    /**
     * Operation networkIdsNetworkIdSetDiscoverabilityPatchWithHttpInfo
     *
     * Update network ID&#39;s discoverability.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetDiscoverabilityPatchRequest $networkIdsNetworkIdSetDiscoverabilityPatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetDiscoverabilityPatch'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkIdsNetworkIdSetDiscoverabilityPatchWithHttpInfo($networkId, $networkIdsNetworkIdSetDiscoverabilityPatchRequest, string $contentType = self::contentTypes['networkIdsNetworkIdSetDiscoverabilityPatch'][0])
    {
        $request = $this->networkIdsNetworkIdSetDiscoverabilityPatchRequest($networkId, $networkIdsNetworkIdSetDiscoverabilityPatchRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkIdsNetworkIdSetDiscoverabilityPatchAsync
     *
     * Update network ID&#39;s discoverability.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetDiscoverabilityPatchRequest $networkIdsNetworkIdSetDiscoverabilityPatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetDiscoverabilityPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsNetworkIdSetDiscoverabilityPatchAsync($networkId, $networkIdsNetworkIdSetDiscoverabilityPatchRequest, string $contentType = self::contentTypes['networkIdsNetworkIdSetDiscoverabilityPatch'][0])
    {
        return $this->networkIdsNetworkIdSetDiscoverabilityPatchAsyncWithHttpInfo($networkId, $networkIdsNetworkIdSetDiscoverabilityPatchRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkIdsNetworkIdSetDiscoverabilityPatchAsyncWithHttpInfo
     *
     * Update network ID&#39;s discoverability.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetDiscoverabilityPatchRequest $networkIdsNetworkIdSetDiscoverabilityPatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetDiscoverabilityPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsNetworkIdSetDiscoverabilityPatchAsyncWithHttpInfo($networkId, $networkIdsNetworkIdSetDiscoverabilityPatchRequest, string $contentType = self::contentTypes['networkIdsNetworkIdSetDiscoverabilityPatch'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response';
        $request = $this->networkIdsNetworkIdSetDiscoverabilityPatchRequest($networkId, $networkIdsNetworkIdSetDiscoverabilityPatchRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkIdsNetworkIdSetDiscoverabilityPatch'
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetDiscoverabilityPatchRequest $networkIdsNetworkIdSetDiscoverabilityPatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetDiscoverabilityPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkIdsNetworkIdSetDiscoverabilityPatchRequest($networkId, $networkIdsNetworkIdSetDiscoverabilityPatchRequest, string $contentType = self::contentTypes['networkIdsNetworkIdSetDiscoverabilityPatch'][0])
    {

        // verify the required parameter 'networkId' is set
        if ($networkId === null || (is_array($networkId) && count($networkId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $networkId when calling networkIdsNetworkIdSetDiscoverabilityPatch'
            );
        }
        
        // verify the required parameter 'networkIdsNetworkIdSetDiscoverabilityPatchRequest' is set
        if ($networkIdsNetworkIdSetDiscoverabilityPatchRequest === null || (is_array($networkIdsNetworkIdSetDiscoverabilityPatchRequest) && count($networkIdsNetworkIdSetDiscoverabilityPatchRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $networkIdsNetworkIdSetDiscoverabilityPatchRequest when calling networkIdsNetworkIdSetDiscoverabilityPatch'
            );
        }


        $resourcePath = '/network_ids/{networkId}/set_discoverability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($networkId !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($networkId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($networkIdsNetworkIdSetDiscoverabilityPatchRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($networkIdsNetworkIdSetDiscoverabilityPatchRequest));
            } else {
                $httpBody = $networkIdsNetworkIdSetDiscoverabilityPatchRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkIdsNetworkIdSetNamePatch
     *
     * Update network ID&#39;s name.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetNamePatchRequest $networkIdsNetworkIdSetNamePatchRequest networkIdsNetworkIdSetNamePatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetNamePatch'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkIdsNetworkIdSetNamePatch($networkId, $networkIdsNetworkIdSetNamePatchRequest, string $contentType = self::contentTypes['networkIdsNetworkIdSetNamePatch'][0])
    {
        list($response) = $this->networkIdsNetworkIdSetNamePatchWithHttpInfo($networkId, $networkIdsNetworkIdSetNamePatchRequest, $contentType);
        return $response;
    }

    /**
     * Operation networkIdsNetworkIdSetNamePatchWithHttpInfo
     *
     * Update network ID&#39;s name.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetNamePatchRequest $networkIdsNetworkIdSetNamePatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetNamePatch'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkIdsNetworkIdSetNamePatchWithHttpInfo($networkId, $networkIdsNetworkIdSetNamePatchRequest, string $contentType = self::contentTypes['networkIdsNetworkIdSetNamePatch'][0])
    {
        $request = $this->networkIdsNetworkIdSetNamePatchRequest($networkId, $networkIdsNetworkIdSetNamePatchRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkIdsNetworkIdSetNamePatchAsync
     *
     * Update network ID&#39;s name.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetNamePatchRequest $networkIdsNetworkIdSetNamePatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetNamePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsNetworkIdSetNamePatchAsync($networkId, $networkIdsNetworkIdSetNamePatchRequest, string $contentType = self::contentTypes['networkIdsNetworkIdSetNamePatch'][0])
    {
        return $this->networkIdsNetworkIdSetNamePatchAsyncWithHttpInfo($networkId, $networkIdsNetworkIdSetNamePatchRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkIdsNetworkIdSetNamePatchAsyncWithHttpInfo
     *
     * Update network ID&#39;s name.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetNamePatchRequest $networkIdsNetworkIdSetNamePatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetNamePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsNetworkIdSetNamePatchAsyncWithHttpInfo($networkId, $networkIdsNetworkIdSetNamePatchRequest, string $contentType = self::contentTypes['networkIdsNetworkIdSetNamePatch'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response';
        $request = $this->networkIdsNetworkIdSetNamePatchRequest($networkId, $networkIdsNetworkIdSetNamePatchRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkIdsNetworkIdSetNamePatch'
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetNamePatchRequest $networkIdsNetworkIdSetNamePatchRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetNamePatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkIdsNetworkIdSetNamePatchRequest($networkId, $networkIdsNetworkIdSetNamePatchRequest, string $contentType = self::contentTypes['networkIdsNetworkIdSetNamePatch'][0])
    {

        // verify the required parameter 'networkId' is set
        if ($networkId === null || (is_array($networkId) && count($networkId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $networkId when calling networkIdsNetworkIdSetNamePatch'
            );
        }
        
        // verify the required parameter 'networkIdsNetworkIdSetNamePatchRequest' is set
        if ($networkIdsNetworkIdSetNamePatchRequest === null || (is_array($networkIdsNetworkIdSetNamePatchRequest) && count($networkIdsNetworkIdSetNamePatchRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $networkIdsNetworkIdSetNamePatchRequest when calling networkIdsNetworkIdSetNamePatch'
            );
        }


        $resourcePath = '/network_ids/{networkId}/set_name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($networkId !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($networkId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($networkIdsNetworkIdSetNamePatchRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($networkIdsNetworkIdSetNamePatchRequest));
            } else {
                $httpBody = $networkIdsNetworkIdSetNamePatchRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkIdsNetworkIdSetRoutingPolicyPatch
     *
     * Update network id routing policy.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetRoutingPolicyPatchRequest|null $networkIdsNetworkIdSetRoutingPolicyPatchRequest networkIdsNetworkIdSetRoutingPolicyPatchRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetRoutingPolicyPatch'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkIdsNetworkIdSetRoutingPolicyPatch($networkId, $networkIdsNetworkIdSetRoutingPolicyPatchRequest = null, string $contentType = self::contentTypes['networkIdsNetworkIdSetRoutingPolicyPatch'][0])
    {
        list($response) = $this->networkIdsNetworkIdSetRoutingPolicyPatchWithHttpInfo($networkId, $networkIdsNetworkIdSetRoutingPolicyPatchRequest, $contentType);
        return $response;
    }

    /**
     * Operation networkIdsNetworkIdSetRoutingPolicyPatchWithHttpInfo
     *
     * Update network id routing policy.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetRoutingPolicyPatchRequest|null $networkIdsNetworkIdSetRoutingPolicyPatchRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetRoutingPolicyPatch'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkIdsNetworkIdSetRoutingPolicyPatchWithHttpInfo($networkId, $networkIdsNetworkIdSetRoutingPolicyPatchRequest = null, string $contentType = self::contentTypes['networkIdsNetworkIdSetRoutingPolicyPatch'][0])
    {
        $request = $this->networkIdsNetworkIdSetRoutingPolicyPatchRequest($networkId, $networkIdsNetworkIdSetRoutingPolicyPatchRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkIdsNetworkIdSetRoutingPolicyPatchAsync
     *
     * Update network id routing policy.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetRoutingPolicyPatchRequest|null $networkIdsNetworkIdSetRoutingPolicyPatchRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetRoutingPolicyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsNetworkIdSetRoutingPolicyPatchAsync($networkId, $networkIdsNetworkIdSetRoutingPolicyPatchRequest = null, string $contentType = self::contentTypes['networkIdsNetworkIdSetRoutingPolicyPatch'][0])
    {
        return $this->networkIdsNetworkIdSetRoutingPolicyPatchAsyncWithHttpInfo($networkId, $networkIdsNetworkIdSetRoutingPolicyPatchRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkIdsNetworkIdSetRoutingPolicyPatchAsyncWithHttpInfo
     *
     * Update network id routing policy.
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetRoutingPolicyPatchRequest|null $networkIdsNetworkIdSetRoutingPolicyPatchRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetRoutingPolicyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsNetworkIdSetRoutingPolicyPatchAsyncWithHttpInfo($networkId, $networkIdsNetworkIdSetRoutingPolicyPatchRequest = null, string $contentType = self::contentTypes['networkIdsNetworkIdSetRoutingPolicyPatch'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkConnectionsConnectionIdSetRoutingPolicyPatch200Response';
        $request = $this->networkIdsNetworkIdSetRoutingPolicyPatchRequest($networkId, $networkIdsNetworkIdSetRoutingPolicyPatchRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkIdsNetworkIdSetRoutingPolicyPatch'
     *
     * @param  string $networkId The ID of the network (required)
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsNetworkIdSetRoutingPolicyPatchRequest|null $networkIdsNetworkIdSetRoutingPolicyPatchRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsNetworkIdSetRoutingPolicyPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkIdsNetworkIdSetRoutingPolicyPatchRequest($networkId, $networkIdsNetworkIdSetRoutingPolicyPatchRequest = null, string $contentType = self::contentTypes['networkIdsNetworkIdSetRoutingPolicyPatch'][0])
    {

        // verify the required parameter 'networkId' is set
        if ($networkId === null || (is_array($networkId) && count($networkId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $networkId when calling networkIdsNetworkIdSetRoutingPolicyPatch'
            );
        }
        


        $resourcePath = '/network_ids/{networkId}/set_routing_policy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($networkId !== null) {
            $resourcePath = str_replace(
                '{' . 'networkId' . '}',
                ObjectSerializer::toPathValue($networkId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($networkIdsNetworkIdSetRoutingPolicyPatchRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($networkIdsNetworkIdSetRoutingPolicyPatchRequest));
            } else {
                $httpBody = $networkIdsNetworkIdSetRoutingPolicyPatchRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation networkIdsPost
     *
     * Creates a new Network ID
     *
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsPostRequest|null $networkIdsPostRequest networkIdsPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\NetworkIdResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function networkIdsPost($networkIdsPostRequest = null, string $contentType = self::contentTypes['networkIdsPost'][0])
    {
        list($response) = $this->networkIdsPostWithHttpInfo($networkIdsPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation networkIdsPostWithHttpInfo
     *
     * Creates a new Network ID
     *
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsPostRequest|null $networkIdsPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\NetworkIdResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function networkIdsPostWithHttpInfo($networkIdsPostRequest = null, string $contentType = self::contentTypes['networkIdsPost'][0])
    {
        $request = $this->networkIdsPostRequest($networkIdsPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\NetworkIdResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\NetworkIdResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\NetworkIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation networkIdsPostAsync
     *
     * Creates a new Network ID
     *
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsPostRequest|null $networkIdsPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsPostAsync($networkIdsPostRequest = null, string $contentType = self::contentTypes['networkIdsPost'][0])
    {
        return $this->networkIdsPostAsyncWithHttpInfo($networkIdsPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation networkIdsPostAsyncWithHttpInfo
     *
     * Creates a new Network ID
     *
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsPostRequest|null $networkIdsPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function networkIdsPostAsyncWithHttpInfo($networkIdsPostRequest = null, string $contentType = self::contentTypes['networkIdsPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\NetworkIdResponse';
        $request = $this->networkIdsPostRequest($networkIdsPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'networkIdsPost'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\NetworkIdsPostRequest|null $networkIdsPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['networkIdsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function networkIdsPostRequest($networkIdsPostRequest = null, string $contentType = self::contentTypes['networkIdsPost'][0])
    {



        $resourcePath = '/network_ids';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($networkIdsPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($networkIdsPostRequest));
            } else {
                $httpBody = $networkIdsPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
