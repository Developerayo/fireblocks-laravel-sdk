<?php
/**
 * TransactionsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Developerayo\FireblocksLaravel\ApiException;
use Developerayo\FireblocksLaravel\Configuration;
use Developerayo\FireblocksLaravel\FormDataProcessor;
use Developerayo\FireblocksLaravel\HeaderSelector;
use Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'transactionsEstimateFeePost' => [
            'application/json',
        ],
        'transactionsExternalTxIdExternalTxIdGet' => [
            'application/json',
        ],
        'transactionsGet' => [
            'application/json',
        ],
        'transactionsPost' => [
            'application/json',
        ],
        'transactionsTxIdCancelPost' => [
            'application/json',
        ],
        'transactionsTxIdDropPost' => [
            'application/json',
        ],
        'transactionsTxIdFreezePost' => [
            'application/json',
        ],
        'transactionsTxIdGet' => [
            'application/json',
        ],
        'transactionsTxIdSetConfirmationThresholdPost' => [
            'application/json',
        ],
        'transactionsTxIdUnfreezePost' => [
            'application/json',
        ],
        'txHashTxHashSetConfirmationThresholdPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation transactionsEstimateFeePost
     *
     * Estimate transaction fee
     *
     * @param  \Developerayo\FireblocksLaravel\Models\EstimatedFeeRequest|null $estimatedFeeRequest estimatedFeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsEstimateFeePost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\EstimatedTransactionFeeResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function transactionsEstimateFeePost($estimatedFeeRequest = null, string $contentType = self::contentTypes['transactionsEstimateFeePost'][0])
    {
        list($response) = $this->transactionsEstimateFeePostWithHttpInfo($estimatedFeeRequest, $contentType);
        return $response;
    }

    /**
     * Operation transactionsEstimateFeePostWithHttpInfo
     *
     * Estimate transaction fee
     *
     * @param  \Developerayo\FireblocksLaravel\Models\EstimatedFeeRequest|null $estimatedFeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsEstimateFeePost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\EstimatedTransactionFeeResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsEstimateFeePostWithHttpInfo($estimatedFeeRequest = null, string $contentType = self::contentTypes['transactionsEstimateFeePost'][0])
    {
        $request = $this->transactionsEstimateFeePostRequest($estimatedFeeRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\EstimatedTransactionFeeResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\EstimatedTransactionFeeResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\EstimatedTransactionFeeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transactionsEstimateFeePostAsync
     *
     * Estimate transaction fee
     *
     * @param  \Developerayo\FireblocksLaravel\Models\EstimatedFeeRequest|null $estimatedFeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsEstimateFeePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsEstimateFeePostAsync($estimatedFeeRequest = null, string $contentType = self::contentTypes['transactionsEstimateFeePost'][0])
    {
        return $this->transactionsEstimateFeePostAsyncWithHttpInfo($estimatedFeeRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsEstimateFeePostAsyncWithHttpInfo
     *
     * Estimate transaction fee
     *
     * @param  \Developerayo\FireblocksLaravel\Models\EstimatedFeeRequest|null $estimatedFeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsEstimateFeePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsEstimateFeePostAsyncWithHttpInfo($estimatedFeeRequest = null, string $contentType = self::contentTypes['transactionsEstimateFeePost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\EstimatedTransactionFeeResponse';
        $request = $this->transactionsEstimateFeePostRequest($estimatedFeeRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsEstimateFeePost'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\EstimatedFeeRequest|null $estimatedFeeRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsEstimateFeePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsEstimateFeePostRequest($estimatedFeeRequest = null, string $contentType = self::contentTypes['transactionsEstimateFeePost'][0])
    {



        $resourcePath = '/transactions/estimate_fee';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($estimatedFeeRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($estimatedFeeRequest));
            } else {
                $httpBody = $estimatedFeeRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsExternalTxIdExternalTxIdGet
     *
     * Find a specific transaction by external transaction ID
     *
     * @param  string $externalTxId The external ID of the transaction to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsExternalTxIdExternalTxIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\TransactionResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function transactionsExternalTxIdExternalTxIdGet($externalTxId, string $contentType = self::contentTypes['transactionsExternalTxIdExternalTxIdGet'][0])
    {
        list($response) = $this->transactionsExternalTxIdExternalTxIdGetWithHttpInfo($externalTxId, $contentType);
        return $response;
    }

    /**
     * Operation transactionsExternalTxIdExternalTxIdGetWithHttpInfo
     *
     * Find a specific transaction by external transaction ID
     *
     * @param  string $externalTxId The external ID of the transaction to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsExternalTxIdExternalTxIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\TransactionResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsExternalTxIdExternalTxIdGetWithHttpInfo($externalTxId, string $contentType = self::contentTypes['transactionsExternalTxIdExternalTxIdGet'][0])
    {
        $request = $this->transactionsExternalTxIdExternalTxIdGetRequest($externalTxId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\TransactionResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\TransactionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transactionsExternalTxIdExternalTxIdGetAsync
     *
     * Find a specific transaction by external transaction ID
     *
     * @param  string $externalTxId The external ID of the transaction to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsExternalTxIdExternalTxIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsExternalTxIdExternalTxIdGetAsync($externalTxId, string $contentType = self::contentTypes['transactionsExternalTxIdExternalTxIdGet'][0])
    {
        return $this->transactionsExternalTxIdExternalTxIdGetAsyncWithHttpInfo($externalTxId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsExternalTxIdExternalTxIdGetAsyncWithHttpInfo
     *
     * Find a specific transaction by external transaction ID
     *
     * @param  string $externalTxId The external ID of the transaction to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsExternalTxIdExternalTxIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsExternalTxIdExternalTxIdGetAsyncWithHttpInfo($externalTxId, string $contentType = self::contentTypes['transactionsExternalTxIdExternalTxIdGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\TransactionResponse';
        $request = $this->transactionsExternalTxIdExternalTxIdGetRequest($externalTxId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsExternalTxIdExternalTxIdGet'
     *
     * @param  string $externalTxId The external ID of the transaction to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsExternalTxIdExternalTxIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsExternalTxIdExternalTxIdGetRequest($externalTxId, string $contentType = self::contentTypes['transactionsExternalTxIdExternalTxIdGet'][0])
    {

        // verify the required parameter 'externalTxId' is set
        if ($externalTxId === null || (is_array($externalTxId) && count($externalTxId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalTxId when calling transactionsExternalTxIdExternalTxIdGet'
            );
        }
        

        $resourcePath = '/transactions/external_tx_id/{externalTxId}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($externalTxId !== null) {
            $resourcePath = str_replace(
                '{' . 'externalTxId' . '}',
                ObjectSerializer::toPathValue($externalTxId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsGet
     *
     * List transaction history
     *
     * @param  string|null $before Unix timestamp in milliseconds. Returns only transactions created before the specified date (optional)
     * @param  string|null $after Unix timestamp in milliseconds. Returns only transactions created after the specified date (optional)
     * @param  string|null $status You can filter by one of the statuses. (optional)
     * @param  string|null $orderBy The field to order the results by  **Note**: Ordering by a field that is not createdAt may result with transactions that receive updates as you request the next or previous pages of results, resulting with missing those transactions. (optional)
     * @param  string|null $sort The direction to order the results by (optional)
     * @param  int|null $limit Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500 (optional, default to 200)
     * @param  string|null $sourceType The source type of the transaction (optional)
     * @param  string|null $sourceId The source ID of the transaction (optional)
     * @param  string|null $destType The destination type of the transaction (optional)
     * @param  string|null $destId The destination ID of the transaction (optional)
     * @param  string|null $assets A list of assets to filter by, seperated by commas (optional)
     * @param  string|null $txHash Returns only results with a specified txHash (optional)
     * @param  string|null $sourceWalletId Returns only results where the source is a specific end user wallet (optional)
     * @param  string|null $destWalletId Returns only results where the destination is a specific end user wallet (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\TransactionResponse[]|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function transactionsGet($before = null, $after = null, $status = null, $orderBy = null, $sort = null, $limit = 200, $sourceType = null, $sourceId = null, $destType = null, $destId = null, $assets = null, $txHash = null, $sourceWalletId = null, $destWalletId = null, string $contentType = self::contentTypes['transactionsGet'][0])
    {
        list($response) = $this->transactionsGetWithHttpInfo($before, $after, $status, $orderBy, $sort, $limit, $sourceType, $sourceId, $destType, $destId, $assets, $txHash, $sourceWalletId, $destWalletId, $contentType);
        return $response;
    }

    /**
     * Operation transactionsGetWithHttpInfo
     *
     * List transaction history
     *
     * @param  string|null $before Unix timestamp in milliseconds. Returns only transactions created before the specified date (optional)
     * @param  string|null $after Unix timestamp in milliseconds. Returns only transactions created after the specified date (optional)
     * @param  string|null $status You can filter by one of the statuses. (optional)
     * @param  string|null $orderBy The field to order the results by  **Note**: Ordering by a field that is not createdAt may result with transactions that receive updates as you request the next or previous pages of results, resulting with missing those transactions. (optional)
     * @param  string|null $sort The direction to order the results by (optional)
     * @param  int|null $limit Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500 (optional, default to 200)
     * @param  string|null $sourceType The source type of the transaction (optional)
     * @param  string|null $sourceId The source ID of the transaction (optional)
     * @param  string|null $destType The destination type of the transaction (optional)
     * @param  string|null $destId The destination ID of the transaction (optional)
     * @param  string|null $assets A list of assets to filter by, seperated by commas (optional)
     * @param  string|null $txHash Returns only results with a specified txHash (optional)
     * @param  string|null $sourceWalletId Returns only results where the source is a specific end user wallet (optional)
     * @param  string|null $destWalletId Returns only results where the destination is a specific end user wallet (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\TransactionResponse[]|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsGetWithHttpInfo($before = null, $after = null, $status = null, $orderBy = null, $sort = null, $limit = 200, $sourceType = null, $sourceId = null, $destType = null, $destId = null, $assets = null, $txHash = null, $sourceWalletId = null, $destWalletId = null, string $contentType = self::contentTypes['transactionsGet'][0])
    {
        $request = $this->transactionsGetRequest($before, $after, $status, $orderBy, $sort, $limit, $sourceType, $sourceId, $destType, $destId, $assets, $txHash, $sourceWalletId, $destWalletId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\TransactionResponse[]',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\TransactionResponse[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\TransactionResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transactionsGetAsync
     *
     * List transaction history
     *
     * @param  string|null $before Unix timestamp in milliseconds. Returns only transactions created before the specified date (optional)
     * @param  string|null $after Unix timestamp in milliseconds. Returns only transactions created after the specified date (optional)
     * @param  string|null $status You can filter by one of the statuses. (optional)
     * @param  string|null $orderBy The field to order the results by  **Note**: Ordering by a field that is not createdAt may result with transactions that receive updates as you request the next or previous pages of results, resulting with missing those transactions. (optional)
     * @param  string|null $sort The direction to order the results by (optional)
     * @param  int|null $limit Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500 (optional, default to 200)
     * @param  string|null $sourceType The source type of the transaction (optional)
     * @param  string|null $sourceId The source ID of the transaction (optional)
     * @param  string|null $destType The destination type of the transaction (optional)
     * @param  string|null $destId The destination ID of the transaction (optional)
     * @param  string|null $assets A list of assets to filter by, seperated by commas (optional)
     * @param  string|null $txHash Returns only results with a specified txHash (optional)
     * @param  string|null $sourceWalletId Returns only results where the source is a specific end user wallet (optional)
     * @param  string|null $destWalletId Returns only results where the destination is a specific end user wallet (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetAsync($before = null, $after = null, $status = null, $orderBy = null, $sort = null, $limit = 200, $sourceType = null, $sourceId = null, $destType = null, $destId = null, $assets = null, $txHash = null, $sourceWalletId = null, $destWalletId = null, string $contentType = self::contentTypes['transactionsGet'][0])
    {
        return $this->transactionsGetAsyncWithHttpInfo($before, $after, $status, $orderBy, $sort, $limit, $sourceType, $sourceId, $destType, $destId, $assets, $txHash, $sourceWalletId, $destWalletId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsGetAsyncWithHttpInfo
     *
     * List transaction history
     *
     * @param  string|null $before Unix timestamp in milliseconds. Returns only transactions created before the specified date (optional)
     * @param  string|null $after Unix timestamp in milliseconds. Returns only transactions created after the specified date (optional)
     * @param  string|null $status You can filter by one of the statuses. (optional)
     * @param  string|null $orderBy The field to order the results by  **Note**: Ordering by a field that is not createdAt may result with transactions that receive updates as you request the next or previous pages of results, resulting with missing those transactions. (optional)
     * @param  string|null $sort The direction to order the results by (optional)
     * @param  int|null $limit Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500 (optional, default to 200)
     * @param  string|null $sourceType The source type of the transaction (optional)
     * @param  string|null $sourceId The source ID of the transaction (optional)
     * @param  string|null $destType The destination type of the transaction (optional)
     * @param  string|null $destId The destination ID of the transaction (optional)
     * @param  string|null $assets A list of assets to filter by, seperated by commas (optional)
     * @param  string|null $txHash Returns only results with a specified txHash (optional)
     * @param  string|null $sourceWalletId Returns only results where the source is a specific end user wallet (optional)
     * @param  string|null $destWalletId Returns only results where the destination is a specific end user wallet (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsGetAsyncWithHttpInfo($before = null, $after = null, $status = null, $orderBy = null, $sort = null, $limit = 200, $sourceType = null, $sourceId = null, $destType = null, $destId = null, $assets = null, $txHash = null, $sourceWalletId = null, $destWalletId = null, string $contentType = self::contentTypes['transactionsGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\TransactionResponse[]';
        $request = $this->transactionsGetRequest($before, $after, $status, $orderBy, $sort, $limit, $sourceType, $sourceId, $destType, $destId, $assets, $txHash, $sourceWalletId, $destWalletId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsGet'
     *
     * @param  string|null $before Unix timestamp in milliseconds. Returns only transactions created before the specified date (optional)
     * @param  string|null $after Unix timestamp in milliseconds. Returns only transactions created after the specified date (optional)
     * @param  string|null $status You can filter by one of the statuses. (optional)
     * @param  string|null $orderBy The field to order the results by  **Note**: Ordering by a field that is not createdAt may result with transactions that receive updates as you request the next or previous pages of results, resulting with missing those transactions. (optional)
     * @param  string|null $sort The direction to order the results by (optional)
     * @param  int|null $limit Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500 (optional, default to 200)
     * @param  string|null $sourceType The source type of the transaction (optional)
     * @param  string|null $sourceId The source ID of the transaction (optional)
     * @param  string|null $destType The destination type of the transaction (optional)
     * @param  string|null $destId The destination ID of the transaction (optional)
     * @param  string|null $assets A list of assets to filter by, seperated by commas (optional)
     * @param  string|null $txHash Returns only results with a specified txHash (optional)
     * @param  string|null $sourceWalletId Returns only results where the source is a specific end user wallet (optional)
     * @param  string|null $destWalletId Returns only results where the destination is a specific end user wallet (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsGetRequest($before = null, $after = null, $status = null, $orderBy = null, $sort = null, $limit = 200, $sourceType = null, $sourceId = null, $destType = null, $destId = null, $assets = null, $txHash = null, $sourceWalletId = null, $destWalletId = null, string $contentType = self::contentTypes['transactionsGet'][0])
    {






        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling TransactionsApi.transactionsGet, must be bigger than or equal to 1.');
        }
        









        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderBy,
            'orderBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sourceType,
            'sourceType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sourceId,
            'sourceId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $destType,
            'destType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $destId,
            'destId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $assets,
            'assets', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $txHash,
            'txHash', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sourceWalletId,
            'sourceWalletId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $destWalletId,
            'destWalletId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsPost
     *
     * Create a new transaction
     *
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  \Developerayo\FireblocksLaravel\Models\TransactionRequest|null $transactionRequest transactionRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\CreateTransactionResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function transactionsPost($xEndUserWalletId = null, $transactionRequest = null, string $contentType = self::contentTypes['transactionsPost'][0])
    {
        list($response) = $this->transactionsPostWithHttpInfo($xEndUserWalletId, $transactionRequest, $contentType);
        return $response;
    }

    /**
     * Operation transactionsPostWithHttpInfo
     *
     * Create a new transaction
     *
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  \Developerayo\FireblocksLaravel\Models\TransactionRequest|null $transactionRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\CreateTransactionResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsPostWithHttpInfo($xEndUserWalletId = null, $transactionRequest = null, string $contentType = self::contentTypes['transactionsPost'][0])
    {
        $request = $this->transactionsPostRequest($xEndUserWalletId, $transactionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\CreateTransactionResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\CreateTransactionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\CreateTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transactionsPostAsync
     *
     * Create a new transaction
     *
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  \Developerayo\FireblocksLaravel\Models\TransactionRequest|null $transactionRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsPostAsync($xEndUserWalletId = null, $transactionRequest = null, string $contentType = self::contentTypes['transactionsPost'][0])
    {
        return $this->transactionsPostAsyncWithHttpInfo($xEndUserWalletId, $transactionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsPostAsyncWithHttpInfo
     *
     * Create a new transaction
     *
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  \Developerayo\FireblocksLaravel\Models\TransactionRequest|null $transactionRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsPostAsyncWithHttpInfo($xEndUserWalletId = null, $transactionRequest = null, string $contentType = self::contentTypes['transactionsPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\CreateTransactionResponse';
        $request = $this->transactionsPostRequest($xEndUserWalletId, $transactionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsPost'
     *
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  \Developerayo\FireblocksLaravel\Models\TransactionRequest|null $transactionRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsPostRequest($xEndUserWalletId = null, $transactionRequest = null, string $contentType = self::contentTypes['transactionsPost'][0])
    {




        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xEndUserWalletId !== null) {
            $headerParams['X-End-User-Wallet-Id'] = ObjectSerializer::toHeaderValue($xEndUserWalletId);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($transactionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($transactionRequest));
            } else {
                $httpBody = $transactionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsTxIdCancelPost
     *
     * Cancel a transaction
     *
     * @param  string $txId The ID of the transaction to cancel (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdCancelPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\CancelTransactionResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function transactionsTxIdCancelPost($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdCancelPost'][0])
    {
        list($response) = $this->transactionsTxIdCancelPostWithHttpInfo($txId, $xEndUserWalletId, $contentType);
        return $response;
    }

    /**
     * Operation transactionsTxIdCancelPostWithHttpInfo
     *
     * Cancel a transaction
     *
     * @param  string $txId The ID of the transaction to cancel (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdCancelPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\CancelTransactionResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsTxIdCancelPostWithHttpInfo($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdCancelPost'][0])
    {
        $request = $this->transactionsTxIdCancelPostRequest($txId, $xEndUserWalletId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\CancelTransactionResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\CancelTransactionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\CancelTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transactionsTxIdCancelPostAsync
     *
     * Cancel a transaction
     *
     * @param  string $txId The ID of the transaction to cancel (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdCancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdCancelPostAsync($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdCancelPost'][0])
    {
        return $this->transactionsTxIdCancelPostAsyncWithHttpInfo($txId, $xEndUserWalletId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsTxIdCancelPostAsyncWithHttpInfo
     *
     * Cancel a transaction
     *
     * @param  string $txId The ID of the transaction to cancel (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdCancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdCancelPostAsyncWithHttpInfo($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdCancelPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\CancelTransactionResponse';
        $request = $this->transactionsTxIdCancelPostRequest($txId, $xEndUserWalletId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsTxIdCancelPost'
     *
     * @param  string $txId The ID of the transaction to cancel (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdCancelPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsTxIdCancelPostRequest($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdCancelPost'][0])
    {

        // verify the required parameter 'txId' is set
        if ($txId === null || (is_array($txId) && count($txId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $txId when calling transactionsTxIdCancelPost'
            );
        }
        


        $resourcePath = '/transactions/{txId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xEndUserWalletId !== null) {
            $headerParams['X-End-User-Wallet-Id'] = ObjectSerializer::toHeaderValue($xEndUserWalletId);
        }

        // path params
        if ($txId !== null) {
            $resourcePath = str_replace(
                '{' . 'txId' . '}',
                ObjectSerializer::toPathValue($txId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsTxIdDropPost
     *
     * Drop ETH transaction by ID
     *
     * @param  string $txId The ID of the transaction (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  \Developerayo\FireblocksLaravel\Models\DropTransactionRequest|null $dropTransactionRequest dropTransactionRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdDropPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\DropTransactionResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function transactionsTxIdDropPost($txId, $xEndUserWalletId = null, $dropTransactionRequest = null, string $contentType = self::contentTypes['transactionsTxIdDropPost'][0])
    {
        list($response) = $this->transactionsTxIdDropPostWithHttpInfo($txId, $xEndUserWalletId, $dropTransactionRequest, $contentType);
        return $response;
    }

    /**
     * Operation transactionsTxIdDropPostWithHttpInfo
     *
     * Drop ETH transaction by ID
     *
     * @param  string $txId The ID of the transaction (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  \Developerayo\FireblocksLaravel\Models\DropTransactionRequest|null $dropTransactionRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdDropPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\DropTransactionResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsTxIdDropPostWithHttpInfo($txId, $xEndUserWalletId = null, $dropTransactionRequest = null, string $contentType = self::contentTypes['transactionsTxIdDropPost'][0])
    {
        $request = $this->transactionsTxIdDropPostRequest($txId, $xEndUserWalletId, $dropTransactionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\DropTransactionResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\DropTransactionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\DropTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transactionsTxIdDropPostAsync
     *
     * Drop ETH transaction by ID
     *
     * @param  string $txId The ID of the transaction (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  \Developerayo\FireblocksLaravel\Models\DropTransactionRequest|null $dropTransactionRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdDropPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdDropPostAsync($txId, $xEndUserWalletId = null, $dropTransactionRequest = null, string $contentType = self::contentTypes['transactionsTxIdDropPost'][0])
    {
        return $this->transactionsTxIdDropPostAsyncWithHttpInfo($txId, $xEndUserWalletId, $dropTransactionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsTxIdDropPostAsyncWithHttpInfo
     *
     * Drop ETH transaction by ID
     *
     * @param  string $txId The ID of the transaction (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  \Developerayo\FireblocksLaravel\Models\DropTransactionRequest|null $dropTransactionRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdDropPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdDropPostAsyncWithHttpInfo($txId, $xEndUserWalletId = null, $dropTransactionRequest = null, string $contentType = self::contentTypes['transactionsTxIdDropPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\DropTransactionResponse';
        $request = $this->transactionsTxIdDropPostRequest($txId, $xEndUserWalletId, $dropTransactionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsTxIdDropPost'
     *
     * @param  string $txId The ID of the transaction (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  \Developerayo\FireblocksLaravel\Models\DropTransactionRequest|null $dropTransactionRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdDropPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsTxIdDropPostRequest($txId, $xEndUserWalletId = null, $dropTransactionRequest = null, string $contentType = self::contentTypes['transactionsTxIdDropPost'][0])
    {

        // verify the required parameter 'txId' is set
        if ($txId === null || (is_array($txId) && count($txId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $txId when calling transactionsTxIdDropPost'
            );
        }
        



        $resourcePath = '/transactions/{txId}/drop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xEndUserWalletId !== null) {
            $headerParams['X-End-User-Wallet-Id'] = ObjectSerializer::toHeaderValue($xEndUserWalletId);
        }

        // path params
        if ($txId !== null) {
            $resourcePath = str_replace(
                '{' . 'txId' . '}',
                ObjectSerializer::toPathValue($txId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($dropTransactionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($dropTransactionRequest));
            } else {
                $httpBody = $dropTransactionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsTxIdFreezePost
     *
     * Freeze a transaction
     *
     * @param  string $txId The ID of the transaction to freeze (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdFreezePost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\FreezeTransactionResponse
     */
    public function transactionsTxIdFreezePost($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdFreezePost'][0])
    {
        list($response) = $this->transactionsTxIdFreezePostWithHttpInfo($txId, $xEndUserWalletId, $contentType);
        return $response;
    }

    /**
     * Operation transactionsTxIdFreezePostWithHttpInfo
     *
     * Freeze a transaction
     *
     * @param  string $txId The ID of the transaction to freeze (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdFreezePost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\FreezeTransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsTxIdFreezePostWithHttpInfo($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdFreezePost'][0])
    {
        $request = $this->transactionsTxIdFreezePostRequest($txId, $xEndUserWalletId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\FreezeTransactionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\FreezeTransactionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\FreezeTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transactionsTxIdFreezePostAsync
     *
     * Freeze a transaction
     *
     * @param  string $txId The ID of the transaction to freeze (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdFreezePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdFreezePostAsync($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdFreezePost'][0])
    {
        return $this->transactionsTxIdFreezePostAsyncWithHttpInfo($txId, $xEndUserWalletId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsTxIdFreezePostAsyncWithHttpInfo
     *
     * Freeze a transaction
     *
     * @param  string $txId The ID of the transaction to freeze (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdFreezePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdFreezePostAsyncWithHttpInfo($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdFreezePost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\FreezeTransactionResponse';
        $request = $this->transactionsTxIdFreezePostRequest($txId, $xEndUserWalletId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsTxIdFreezePost'
     *
     * @param  string $txId The ID of the transaction to freeze (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdFreezePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsTxIdFreezePostRequest($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdFreezePost'][0])
    {

        // verify the required parameter 'txId' is set
        if ($txId === null || (is_array($txId) && count($txId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $txId when calling transactionsTxIdFreezePost'
            );
        }
        


        $resourcePath = '/transactions/{txId}/freeze';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xEndUserWalletId !== null) {
            $headerParams['X-End-User-Wallet-Id'] = ObjectSerializer::toHeaderValue($xEndUserWalletId);
        }

        // path params
        if ($txId !== null) {
            $resourcePath = str_replace(
                '{' . 'txId' . '}',
                ObjectSerializer::toPathValue($txId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsTxIdGet
     *
     * Find a specific transaction by Fireblocks transaction ID
     *
     * @param  string $txId The ID of the transaction to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\TransactionResponse|\Developerayo\FireblocksLaravel\Models\Error|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function transactionsTxIdGet($txId, string $contentType = self::contentTypes['transactionsTxIdGet'][0])
    {
        list($response) = $this->transactionsTxIdGetWithHttpInfo($txId, $contentType);
        return $response;
    }

    /**
     * Operation transactionsTxIdGetWithHttpInfo
     *
     * Find a specific transaction by Fireblocks transaction ID
     *
     * @param  string $txId The ID of the transaction to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\TransactionResponse|\Developerayo\FireblocksLaravel\Models\Error|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsTxIdGetWithHttpInfo($txId, string $contentType = self::contentTypes['transactionsTxIdGet'][0])
    {
        $request = $this->transactionsTxIdGetRequest($txId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\TransactionResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\TransactionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\TransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transactionsTxIdGetAsync
     *
     * Find a specific transaction by Fireblocks transaction ID
     *
     * @param  string $txId The ID of the transaction to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdGetAsync($txId, string $contentType = self::contentTypes['transactionsTxIdGet'][0])
    {
        return $this->transactionsTxIdGetAsyncWithHttpInfo($txId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsTxIdGetAsyncWithHttpInfo
     *
     * Find a specific transaction by Fireblocks transaction ID
     *
     * @param  string $txId The ID of the transaction to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdGetAsyncWithHttpInfo($txId, string $contentType = self::contentTypes['transactionsTxIdGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\TransactionResponse';
        $request = $this->transactionsTxIdGetRequest($txId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsTxIdGet'
     *
     * @param  string $txId The ID of the transaction to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsTxIdGetRequest($txId, string $contentType = self::contentTypes['transactionsTxIdGet'][0])
    {

        // verify the required parameter 'txId' is set
        if ($txId === null || (is_array($txId) && count($txId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $txId when calling transactionsTxIdGet'
            );
        }
        

        $resourcePath = '/transactions/{txId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($txId !== null) {
            $resourcePath = str_replace(
                '{' . 'txId' . '}',
                ObjectSerializer::toPathValue($txId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsTxIdSetConfirmationThresholdPost
     *
     * Set confirmation threshold by transaction ID
     *
     * @param  string $txId The ID of the transaction (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdRequest|null $setConfirmationsThresholdRequest setConfirmationsThresholdRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdSetConfirmationThresholdPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function transactionsTxIdSetConfirmationThresholdPost($txId, $setConfirmationsThresholdRequest = null, string $contentType = self::contentTypes['transactionsTxIdSetConfirmationThresholdPost'][0])
    {
        list($response) = $this->transactionsTxIdSetConfirmationThresholdPostWithHttpInfo($txId, $setConfirmationsThresholdRequest, $contentType);
        return $response;
    }

    /**
     * Operation transactionsTxIdSetConfirmationThresholdPostWithHttpInfo
     *
     * Set confirmation threshold by transaction ID
     *
     * @param  string $txId The ID of the transaction (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdRequest|null $setConfirmationsThresholdRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdSetConfirmationThresholdPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsTxIdSetConfirmationThresholdPostWithHttpInfo($txId, $setConfirmationsThresholdRequest = null, string $contentType = self::contentTypes['transactionsTxIdSetConfirmationThresholdPost'][0])
    {
        $request = $this->transactionsTxIdSetConfirmationThresholdPostRequest($txId, $setConfirmationsThresholdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transactionsTxIdSetConfirmationThresholdPostAsync
     *
     * Set confirmation threshold by transaction ID
     *
     * @param  string $txId The ID of the transaction (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdRequest|null $setConfirmationsThresholdRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdSetConfirmationThresholdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdSetConfirmationThresholdPostAsync($txId, $setConfirmationsThresholdRequest = null, string $contentType = self::contentTypes['transactionsTxIdSetConfirmationThresholdPost'][0])
    {
        return $this->transactionsTxIdSetConfirmationThresholdPostAsyncWithHttpInfo($txId, $setConfirmationsThresholdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsTxIdSetConfirmationThresholdPostAsyncWithHttpInfo
     *
     * Set confirmation threshold by transaction ID
     *
     * @param  string $txId The ID of the transaction (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdRequest|null $setConfirmationsThresholdRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdSetConfirmationThresholdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdSetConfirmationThresholdPostAsyncWithHttpInfo($txId, $setConfirmationsThresholdRequest = null, string $contentType = self::contentTypes['transactionsTxIdSetConfirmationThresholdPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse';
        $request = $this->transactionsTxIdSetConfirmationThresholdPostRequest($txId, $setConfirmationsThresholdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsTxIdSetConfirmationThresholdPost'
     *
     * @param  string $txId The ID of the transaction (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdRequest|null $setConfirmationsThresholdRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdSetConfirmationThresholdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsTxIdSetConfirmationThresholdPostRequest($txId, $setConfirmationsThresholdRequest = null, string $contentType = self::contentTypes['transactionsTxIdSetConfirmationThresholdPost'][0])
    {

        // verify the required parameter 'txId' is set
        if ($txId === null || (is_array($txId) && count($txId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $txId when calling transactionsTxIdSetConfirmationThresholdPost'
            );
        }
        


        $resourcePath = '/transactions/{txId}/set_confirmation_threshold';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($txId !== null) {
            $resourcePath = str_replace(
                '{' . 'txId' . '}',
                ObjectSerializer::toPathValue($txId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($setConfirmationsThresholdRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($setConfirmationsThresholdRequest));
            } else {
                $httpBody = $setConfirmationsThresholdRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transactionsTxIdUnfreezePost
     *
     * Unfreeze a transaction
     *
     * @param  string $txId The ID of the transaction to unfreeze (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdUnfreezePost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\UnfreezeTransactionResponse
     */
    public function transactionsTxIdUnfreezePost($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdUnfreezePost'][0])
    {
        list($response) = $this->transactionsTxIdUnfreezePostWithHttpInfo($txId, $xEndUserWalletId, $contentType);
        return $response;
    }

    /**
     * Operation transactionsTxIdUnfreezePostWithHttpInfo
     *
     * Unfreeze a transaction
     *
     * @param  string $txId The ID of the transaction to unfreeze (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdUnfreezePost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\UnfreezeTransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function transactionsTxIdUnfreezePostWithHttpInfo($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdUnfreezePost'][0])
    {
        $request = $this->transactionsTxIdUnfreezePostRequest($txId, $xEndUserWalletId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\UnfreezeTransactionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\UnfreezeTransactionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\UnfreezeTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation transactionsTxIdUnfreezePostAsync
     *
     * Unfreeze a transaction
     *
     * @param  string $txId The ID of the transaction to unfreeze (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdUnfreezePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdUnfreezePostAsync($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdUnfreezePost'][0])
    {
        return $this->transactionsTxIdUnfreezePostAsyncWithHttpInfo($txId, $xEndUserWalletId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transactionsTxIdUnfreezePostAsyncWithHttpInfo
     *
     * Unfreeze a transaction
     *
     * @param  string $txId The ID of the transaction to unfreeze (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdUnfreezePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function transactionsTxIdUnfreezePostAsyncWithHttpInfo($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdUnfreezePost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\UnfreezeTransactionResponse';
        $request = $this->transactionsTxIdUnfreezePostRequest($txId, $xEndUserWalletId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transactionsTxIdUnfreezePost'
     *
     * @param  string $txId The ID of the transaction to unfreeze (required)
     * @param  string|null $xEndUserWalletId Unique ID of the End-User wallet to the API request. Required for end-user wallet operations. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transactionsTxIdUnfreezePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transactionsTxIdUnfreezePostRequest($txId, $xEndUserWalletId = null, string $contentType = self::contentTypes['transactionsTxIdUnfreezePost'][0])
    {

        // verify the required parameter 'txId' is set
        if ($txId === null || (is_array($txId) && count($txId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $txId when calling transactionsTxIdUnfreezePost'
            );
        }
        


        $resourcePath = '/transactions/{txId}/unfreeze';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($xEndUserWalletId !== null) {
            $headerParams['X-End-User-Wallet-Id'] = ObjectSerializer::toHeaderValue($xEndUserWalletId);
        }

        // path params
        if ($txId !== null) {
            $resourcePath = str_replace(
                '{' . 'txId' . '}',
                ObjectSerializer::toPathValue($txId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation txHashTxHashSetConfirmationThresholdPost
     *
     * Set confirmation threshold by transaction hash
     *
     * @param  string $txHash The TxHash (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdRequest|null $setConfirmationsThresholdRequest setConfirmationsThresholdRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['txHashTxHashSetConfirmationThresholdPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function txHashTxHashSetConfirmationThresholdPost($txHash, $setConfirmationsThresholdRequest = null, string $contentType = self::contentTypes['txHashTxHashSetConfirmationThresholdPost'][0])
    {
        list($response) = $this->txHashTxHashSetConfirmationThresholdPostWithHttpInfo($txHash, $setConfirmationsThresholdRequest, $contentType);
        return $response;
    }

    /**
     * Operation txHashTxHashSetConfirmationThresholdPostWithHttpInfo
     *
     * Set confirmation threshold by transaction hash
     *
     * @param  string $txHash The TxHash (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdRequest|null $setConfirmationsThresholdRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['txHashTxHashSetConfirmationThresholdPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function txHashTxHashSetConfirmationThresholdPostWithHttpInfo($txHash, $setConfirmationsThresholdRequest = null, string $contentType = self::contentTypes['txHashTxHashSetConfirmationThresholdPost'][0])
    {
        $request = $this->txHashTxHashSetConfirmationThresholdPostRequest($txHash, $setConfirmationsThresholdRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation txHashTxHashSetConfirmationThresholdPostAsync
     *
     * Set confirmation threshold by transaction hash
     *
     * @param  string $txHash The TxHash (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdRequest|null $setConfirmationsThresholdRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['txHashTxHashSetConfirmationThresholdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function txHashTxHashSetConfirmationThresholdPostAsync($txHash, $setConfirmationsThresholdRequest = null, string $contentType = self::contentTypes['txHashTxHashSetConfirmationThresholdPost'][0])
    {
        return $this->txHashTxHashSetConfirmationThresholdPostAsyncWithHttpInfo($txHash, $setConfirmationsThresholdRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation txHashTxHashSetConfirmationThresholdPostAsyncWithHttpInfo
     *
     * Set confirmation threshold by transaction hash
     *
     * @param  string $txHash The TxHash (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdRequest|null $setConfirmationsThresholdRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['txHashTxHashSetConfirmationThresholdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function txHashTxHashSetConfirmationThresholdPostAsyncWithHttpInfo($txHash, $setConfirmationsThresholdRequest = null, string $contentType = self::contentTypes['txHashTxHashSetConfirmationThresholdPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdResponse';
        $request = $this->txHashTxHashSetConfirmationThresholdPostRequest($txHash, $setConfirmationsThresholdRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'txHashTxHashSetConfirmationThresholdPost'
     *
     * @param  string $txHash The TxHash (required)
     * @param  \Developerayo\FireblocksLaravel\Models\SetConfirmationsThresholdRequest|null $setConfirmationsThresholdRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['txHashTxHashSetConfirmationThresholdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function txHashTxHashSetConfirmationThresholdPostRequest($txHash, $setConfirmationsThresholdRequest = null, string $contentType = self::contentTypes['txHashTxHashSetConfirmationThresholdPost'][0])
    {

        // verify the required parameter 'txHash' is set
        if ($txHash === null || (is_array($txHash) && count($txHash) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $txHash when calling txHashTxHashSetConfirmationThresholdPost'
            );
        }
        


        $resourcePath = '/txHash/{txHash}/set_confirmation_threshold';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($txHash !== null) {
            $resourcePath = str_replace(
                '{' . 'txHash' . '}',
                ObjectSerializer::toPathValue($txHash),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($setConfirmationsThresholdRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($setConfirmationsThresholdRequest));
            } else {
                $httpBody = $setConfirmationsThresholdRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
