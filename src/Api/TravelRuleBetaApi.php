<?php
/**
 * TravelRuleBetaApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Developerayo\FireblocksLaravel\ApiException;
use Developerayo\FireblocksLaravel\Configuration;
use Developerayo\FireblocksLaravel\FormDataProcessor;
use Developerayo\FireblocksLaravel\HeaderSelector;
use Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * TravelRuleBetaApi Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TravelRuleBetaApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'travelRuleApiControllerFindAllVasp' => [
            'application/json',
        ],
        'travelRuleApiControllerFindVasp' => [
            'application/json',
        ],
        'travelRuleApiControllerUpdateVasp' => [
            'application/json',
        ],
        'travelRuleApiControllerValidate' => [
            'application/json',
        ],
        'travelRuleApiControllerValidateFull' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation travelRuleApiControllerFindAllVasp
     *
     * Get All VASPs
     *
     * @param  string|null $order Field to order by (optional)
     * @param  float|null $perPage Records per page (optional)
     * @param  float|null $page Page number (optional)
     * @param  string|null $fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerFindAllVasp'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\TravelRuleGetAllVASPsResponse
     */
    public function travelRuleApiControllerFindAllVasp($order = null, $perPage = null, $page = null, $fields = null, string $contentType = self::contentTypes['travelRuleApiControllerFindAllVasp'][0])
    {
        list($response) = $this->travelRuleApiControllerFindAllVaspWithHttpInfo($order, $perPage, $page, $fields, $contentType);
        return $response;
    }

    /**
     * Operation travelRuleApiControllerFindAllVaspWithHttpInfo
     *
     * Get All VASPs
     *
     * @param  string|null $order Field to order by (optional)
     * @param  float|null $perPage Records per page (optional)
     * @param  float|null $page Page number (optional)
     * @param  string|null $fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerFindAllVasp'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\TravelRuleGetAllVASPsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function travelRuleApiControllerFindAllVaspWithHttpInfo($order = null, $perPage = null, $page = null, $fields = null, string $contentType = self::contentTypes['travelRuleApiControllerFindAllVasp'][0])
    {
        $request = $this->travelRuleApiControllerFindAllVaspRequest($order, $perPage, $page, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\TravelRuleGetAllVASPsResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\TravelRuleGetAllVASPsResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\TravelRuleGetAllVASPsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation travelRuleApiControllerFindAllVaspAsync
     *
     * Get All VASPs
     *
     * @param  string|null $order Field to order by (optional)
     * @param  float|null $perPage Records per page (optional)
     * @param  float|null $page Page number (optional)
     * @param  string|null $fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerFindAllVasp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function travelRuleApiControllerFindAllVaspAsync($order = null, $perPage = null, $page = null, $fields = null, string $contentType = self::contentTypes['travelRuleApiControllerFindAllVasp'][0])
    {
        return $this->travelRuleApiControllerFindAllVaspAsyncWithHttpInfo($order, $perPage, $page, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation travelRuleApiControllerFindAllVaspAsyncWithHttpInfo
     *
     * Get All VASPs
     *
     * @param  string|null $order Field to order by (optional)
     * @param  float|null $perPage Records per page (optional)
     * @param  float|null $page Page number (optional)
     * @param  string|null $fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerFindAllVasp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function travelRuleApiControllerFindAllVaspAsyncWithHttpInfo($order = null, $perPage = null, $page = null, $fields = null, string $contentType = self::contentTypes['travelRuleApiControllerFindAllVasp'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\TravelRuleGetAllVASPsResponse';
        $request = $this->travelRuleApiControllerFindAllVaspRequest($order, $perPage, $page, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'travelRuleApiControllerFindAllVasp'
     *
     * @param  string|null $order Field to order by (optional)
     * @param  float|null $perPage Records per page (optional)
     * @param  float|null $page Page number (optional)
     * @param  string|null $fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerFindAllVasp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function travelRuleApiControllerFindAllVaspRequest($order = null, $perPage = null, $page = null, $fields = null, string $contentType = self::contentTypes['travelRuleApiControllerFindAllVasp'][0])
    {






        $resourcePath = '/screening/travel_rule/vasp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $perPage,
            'per_page', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation travelRuleApiControllerFindVasp
     *
     * Get VASP details
     *
     * @param  string $did did (required)
     * @param  string|null $fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerFindVasp'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\TravelRuleVASP
     */
    public function travelRuleApiControllerFindVasp($did, $fields = null, string $contentType = self::contentTypes['travelRuleApiControllerFindVasp'][0])
    {
        list($response) = $this->travelRuleApiControllerFindVaspWithHttpInfo($did, $fields, $contentType);
        return $response;
    }

    /**
     * Operation travelRuleApiControllerFindVaspWithHttpInfo
     *
     * Get VASP details
     *
     * @param  string $did (required)
     * @param  string|null $fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerFindVasp'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\TravelRuleVASP, HTTP status code, HTTP response headers (array of strings)
     */
    public function travelRuleApiControllerFindVaspWithHttpInfo($did, $fields = null, string $contentType = self::contentTypes['travelRuleApiControllerFindVasp'][0])
    {
        $request = $this->travelRuleApiControllerFindVaspRequest($did, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\TravelRuleVASP',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\TravelRuleVASP',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\TravelRuleVASP',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation travelRuleApiControllerFindVaspAsync
     *
     * Get VASP details
     *
     * @param  string $did (required)
     * @param  string|null $fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerFindVasp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function travelRuleApiControllerFindVaspAsync($did, $fields = null, string $contentType = self::contentTypes['travelRuleApiControllerFindVasp'][0])
    {
        return $this->travelRuleApiControllerFindVaspAsyncWithHttpInfo($did, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation travelRuleApiControllerFindVaspAsyncWithHttpInfo
     *
     * Get VASP details
     *
     * @param  string $did (required)
     * @param  string|null $fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerFindVasp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function travelRuleApiControllerFindVaspAsyncWithHttpInfo($did, $fields = null, string $contentType = self::contentTypes['travelRuleApiControllerFindVasp'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\TravelRuleVASP';
        $request = $this->travelRuleApiControllerFindVaspRequest($did, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'travelRuleApiControllerFindVasp'
     *
     * @param  string $did (required)
     * @param  string|null $fields CSV of fields to return (all, \&quot;blank\&quot; or see list of all field names below) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerFindVasp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function travelRuleApiControllerFindVaspRequest($did, $fields = null, string $contentType = self::contentTypes['travelRuleApiControllerFindVasp'][0])
    {

        // verify the required parameter 'did' is set
        if ($did === null || (is_array($did) && count($did) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $did when calling travelRuleApiControllerFindVasp'
            );
        }



        $resourcePath = '/screening/travel_rule/vasp/{did}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($did !== null) {
            $resourcePath = str_replace(
                '{' . 'did' . '}',
                ObjectSerializer::toPathValue($did),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation travelRuleApiControllerUpdateVasp
     *
     * Add jsonDidKey to VASP details
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails $travelRuleUpdateVASPDetails travelRuleUpdateVASPDetails (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerUpdateVasp'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails
     */
    public function travelRuleApiControllerUpdateVasp($travelRuleUpdateVASPDetails, string $contentType = self::contentTypes['travelRuleApiControllerUpdateVasp'][0])
    {
        list($response) = $this->travelRuleApiControllerUpdateVaspWithHttpInfo($travelRuleUpdateVASPDetails, $contentType);
        return $response;
    }

    /**
     * Operation travelRuleApiControllerUpdateVaspWithHttpInfo
     *
     * Add jsonDidKey to VASP details
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails $travelRuleUpdateVASPDetails (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerUpdateVasp'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function travelRuleApiControllerUpdateVaspWithHttpInfo($travelRuleUpdateVASPDetails, string $contentType = self::contentTypes['travelRuleApiControllerUpdateVasp'][0])
    {
        $request = $this->travelRuleApiControllerUpdateVaspRequest($travelRuleUpdateVASPDetails, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation travelRuleApiControllerUpdateVaspAsync
     *
     * Add jsonDidKey to VASP details
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails $travelRuleUpdateVASPDetails (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerUpdateVasp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function travelRuleApiControllerUpdateVaspAsync($travelRuleUpdateVASPDetails, string $contentType = self::contentTypes['travelRuleApiControllerUpdateVasp'][0])
    {
        return $this->travelRuleApiControllerUpdateVaspAsyncWithHttpInfo($travelRuleUpdateVASPDetails, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation travelRuleApiControllerUpdateVaspAsyncWithHttpInfo
     *
     * Add jsonDidKey to VASP details
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails $travelRuleUpdateVASPDetails (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerUpdateVasp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function travelRuleApiControllerUpdateVaspAsyncWithHttpInfo($travelRuleUpdateVASPDetails, string $contentType = self::contentTypes['travelRuleApiControllerUpdateVasp'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails';
        $request = $this->travelRuleApiControllerUpdateVaspRequest($travelRuleUpdateVASPDetails, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'travelRuleApiControllerUpdateVasp'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleUpdateVASPDetails $travelRuleUpdateVASPDetails (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerUpdateVasp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function travelRuleApiControllerUpdateVaspRequest($travelRuleUpdateVASPDetails, string $contentType = self::contentTypes['travelRuleApiControllerUpdateVasp'][0])
    {

        // verify the required parameter 'travelRuleUpdateVASPDetails' is set
        if ($travelRuleUpdateVASPDetails === null || (is_array($travelRuleUpdateVASPDetails) && count($travelRuleUpdateVASPDetails) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $travelRuleUpdateVASPDetails when calling travelRuleApiControllerUpdateVasp'
            );
        }


        $resourcePath = '/screeening/travel_rule/vasp/update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($travelRuleUpdateVASPDetails)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($travelRuleUpdateVASPDetails));
            } else {
                $httpBody = $travelRuleUpdateVASPDetails;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation travelRuleApiControllerValidate
     *
     * Validate Travel Rule Transaction
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionRequest $travelRuleValidateTransactionRequest travelRuleValidateTransactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerValidate'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse
     */
    public function travelRuleApiControllerValidate($travelRuleValidateTransactionRequest, string $contentType = self::contentTypes['travelRuleApiControllerValidate'][0])
    {
        list($response) = $this->travelRuleApiControllerValidateWithHttpInfo($travelRuleValidateTransactionRequest, $contentType);
        return $response;
    }

    /**
     * Operation travelRuleApiControllerValidateWithHttpInfo
     *
     * Validate Travel Rule Transaction
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionRequest $travelRuleValidateTransactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerValidate'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function travelRuleApiControllerValidateWithHttpInfo($travelRuleValidateTransactionRequest, string $contentType = self::contentTypes['travelRuleApiControllerValidate'][0])
    {
        $request = $this->travelRuleApiControllerValidateRequest($travelRuleValidateTransactionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation travelRuleApiControllerValidateAsync
     *
     * Validate Travel Rule Transaction
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionRequest $travelRuleValidateTransactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerValidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function travelRuleApiControllerValidateAsync($travelRuleValidateTransactionRequest, string $contentType = self::contentTypes['travelRuleApiControllerValidate'][0])
    {
        return $this->travelRuleApiControllerValidateAsyncWithHttpInfo($travelRuleValidateTransactionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation travelRuleApiControllerValidateAsyncWithHttpInfo
     *
     * Validate Travel Rule Transaction
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionRequest $travelRuleValidateTransactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerValidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function travelRuleApiControllerValidateAsyncWithHttpInfo($travelRuleValidateTransactionRequest, string $contentType = self::contentTypes['travelRuleApiControllerValidate'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse';
        $request = $this->travelRuleApiControllerValidateRequest($travelRuleValidateTransactionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'travelRuleApiControllerValidate'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionRequest $travelRuleValidateTransactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerValidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function travelRuleApiControllerValidateRequest($travelRuleValidateTransactionRequest, string $contentType = self::contentTypes['travelRuleApiControllerValidate'][0])
    {

        // verify the required parameter 'travelRuleValidateTransactionRequest' is set
        if ($travelRuleValidateTransactionRequest === null || (is_array($travelRuleValidateTransactionRequest) && count($travelRuleValidateTransactionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $travelRuleValidateTransactionRequest when calling travelRuleApiControllerValidate'
            );
        }


        $resourcePath = '/screening/travel_rule/transaction/validate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($travelRuleValidateTransactionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($travelRuleValidateTransactionRequest));
            } else {
                $httpBody = $travelRuleValidateTransactionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation travelRuleApiControllerValidateFull
     *
     * Validate Full Travel Rule Transaction
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleValidateFullTransactionRequest $travelRuleValidateFullTransactionRequest travelRuleValidateFullTransactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerValidateFull'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse
     */
    public function travelRuleApiControllerValidateFull($travelRuleValidateFullTransactionRequest, string $contentType = self::contentTypes['travelRuleApiControllerValidateFull'][0])
    {
        list($response) = $this->travelRuleApiControllerValidateFullWithHttpInfo($travelRuleValidateFullTransactionRequest, $contentType);
        return $response;
    }

    /**
     * Operation travelRuleApiControllerValidateFullWithHttpInfo
     *
     * Validate Full Travel Rule Transaction
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleValidateFullTransactionRequest $travelRuleValidateFullTransactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerValidateFull'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function travelRuleApiControllerValidateFullWithHttpInfo($travelRuleValidateFullTransactionRequest, string $contentType = self::contentTypes['travelRuleApiControllerValidateFull'][0])
    {
        $request = $this->travelRuleApiControllerValidateFullRequest($travelRuleValidateFullTransactionRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation travelRuleApiControllerValidateFullAsync
     *
     * Validate Full Travel Rule Transaction
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleValidateFullTransactionRequest $travelRuleValidateFullTransactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerValidateFull'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function travelRuleApiControllerValidateFullAsync($travelRuleValidateFullTransactionRequest, string $contentType = self::contentTypes['travelRuleApiControllerValidateFull'][0])
    {
        return $this->travelRuleApiControllerValidateFullAsyncWithHttpInfo($travelRuleValidateFullTransactionRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation travelRuleApiControllerValidateFullAsyncWithHttpInfo
     *
     * Validate Full Travel Rule Transaction
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleValidateFullTransactionRequest $travelRuleValidateFullTransactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerValidateFull'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function travelRuleApiControllerValidateFullAsyncWithHttpInfo($travelRuleValidateFullTransactionRequest, string $contentType = self::contentTypes['travelRuleApiControllerValidateFull'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\TravelRuleValidateTransactionResponse';
        $request = $this->travelRuleApiControllerValidateFullRequest($travelRuleValidateFullTransactionRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'travelRuleApiControllerValidateFull'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TravelRuleValidateFullTransactionRequest $travelRuleValidateFullTransactionRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['travelRuleApiControllerValidateFull'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function travelRuleApiControllerValidateFullRequest($travelRuleValidateFullTransactionRequest, string $contentType = self::contentTypes['travelRuleApiControllerValidateFull'][0])
    {

        // verify the required parameter 'travelRuleValidateFullTransactionRequest' is set
        if ($travelRuleValidateFullTransactionRequest === null || (is_array($travelRuleValidateFullTransactionRequest) && count($travelRuleValidateFullTransactionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $travelRuleValidateFullTransactionRequest when calling travelRuleApiControllerValidateFull'
            );
        }


        $resourcePath = '/screening/travel_rule/transaction/validate/full';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($travelRuleValidateFullTransactionRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($travelRuleValidateFullTransactionRequest));
            } else {
                $httpBody = $travelRuleValidateFullTransactionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
