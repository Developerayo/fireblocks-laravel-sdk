<?php
/**
 * NFTsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Developerayo\FireblocksLaravel\ApiException;
use Developerayo\FireblocksLaravel\Configuration;
use Developerayo\FireblocksLaravel\FormDataProcessor;
use Developerayo\FireblocksLaravel\HeaderSelector;
use Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * NFTsApi Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NFTsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getNFT' => [
            'application/json',
        ],
        'getNFTs' => [
            'application/json',
        ],
        'getOwnedNFTs' => [
            'application/json',
        ],
        'listOwnedCollections' => [
            'application/json',
        ],
        'listOwnedTokens' => [
            'application/json',
        ],
        'refreshNFTMetadata' => [
            'application/json',
        ],
        'refreshNFTOwnershipByVault' => [
            'application/json',
        ],
        'updateTokenOwnershipStatus' => [
            'application/json',
        ],
        'updateTokensOwnershipSpam' => [
            'application/json',
        ],
        'updateTokensOwnershipStatus' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getNFT
     *
     * List token data by ID
     *
     * @param  string $id NFT ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNFT'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\TokenResponse
     */
    public function getNFT($id, string $contentType = self::contentTypes['getNFT'][0])
    {
        list($response) = $this->getNFTWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation getNFTWithHttpInfo
     *
     * List token data by ID
     *
     * @param  string $id NFT ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNFT'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\TokenResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNFTWithHttpInfo($id, string $contentType = self::contentTypes['getNFT'][0])
    {
        $request = $this->getNFTRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\TokenResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\TokenResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\TokenResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getNFTAsync
     *
     * List token data by ID
     *
     * @param  string $id NFT ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNFT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNFTAsync($id, string $contentType = self::contentTypes['getNFT'][0])
    {
        return $this->getNFTAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNFTAsyncWithHttpInfo
     *
     * List token data by ID
     *
     * @param  string $id NFT ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNFT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNFTAsyncWithHttpInfo($id, string $contentType = self::contentTypes['getNFT'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\TokenResponse';
        $request = $this->getNFTRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNFT'
     *
     * @param  string $id NFT ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNFT'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNFTRequest($id, string $contentType = self::contentTypes['getNFT'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getNFT'
            );
        }


        $resourcePath = '/nfts/tokens/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getNFTs
     *
     * List tokens by IDs
     *
     * @param  string $ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (required)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNFTs'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response
     */
    public function getNFTs($ids, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', string $contentType = self::contentTypes['getNFTs'][0])
    {
        list($response) = $this->getNFTsWithHttpInfo($ids, $pageCursor, $pageSize, $sort, $order, $contentType);
        return $response;
    }

    /**
     * Operation getNFTsWithHttpInfo
     *
     * List tokens by IDs
     *
     * @param  string $ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (required)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNFTs'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getNFTsWithHttpInfo($ids, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', string $contentType = self::contentTypes['getNFTs'][0])
    {
        $request = $this->getNFTsRequest($ids, $pageCursor, $pageSize, $sort, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getNFTsAsync
     *
     * List tokens by IDs
     *
     * @param  string $ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (required)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNFTs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNFTsAsync($ids, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', string $contentType = self::contentTypes['getNFTs'][0])
    {
        return $this->getNFTsAsyncWithHttpInfo($ids, $pageCursor, $pageSize, $sort, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getNFTsAsyncWithHttpInfo
     *
     * List tokens by IDs
     *
     * @param  string $ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (required)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNFTs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getNFTsAsyncWithHttpInfo($ids, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', string $contentType = self::contentTypes['getNFTs'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response';
        $request = $this->getNFTsRequest($ids, $pageCursor, $pageSize, $sort, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getNFTs'
     *
     * @param  string $ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (required)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getNFTs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getNFTsRequest($ids, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', string $contentType = self::contentTypes['getNFTs'][0])
    {

        // verify the required parameter 'ids' is set
        if ($ids === null || (is_array($ids) && count($ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ids when calling getNFTs'
            );
        }


        if ($pageSize !== null && $pageSize > 100) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling NFTsApi.getNFTs, must be smaller than or equal to 100.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling NFTsApi.getNFTs, must be bigger than or equal to 1.');
        }
        



        $resourcePath = '/nfts/tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageCursor,
            'pageCursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOwnedNFTs
     *
     * List all owned tokens (paginated)
     *
     * @param  string|null $blockchainDescriptor Blockchain descriptor filter (optional)
     * @param  string|null $vaultAccountIds A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request.  This field will be ignored when walletType&#x3D;END_USER_WALLET or ncwId is provided. (optional)
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $ncwAccountIds A comma separated list of Non-Custodial account IDs. Up to 100 are allowed in a single request. This field will be ignored when walletType&#x3D;VAULT_ACCOUNT or ncwId is not provided. (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60;. (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (optional)
     * @param  string|null $collectionIds A comma separated list of collection IDs. Up to 100 are allowed in a single request. (optional)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string|null $search Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name. (optional)
     * @param  string|null $spam Token ownership spam status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOwnedNFTs'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\GetOwnedNFTs200Response
     */
    public function getOwnedNFTs($blockchainDescriptor = null, $vaultAccountIds = null, $ncwId = null, $ncwAccountIds = null, $walletType = 'VAULT_ACCOUNT', $ids = null, $collectionIds = null, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', $search = null, $spam = null, string $contentType = self::contentTypes['getOwnedNFTs'][0])
    {
        list($response) = $this->getOwnedNFTsWithHttpInfo($blockchainDescriptor, $vaultAccountIds, $ncwId, $ncwAccountIds, $walletType, $ids, $collectionIds, $pageCursor, $pageSize, $sort, $order, $status, $search, $spam, $contentType);
        return $response;
    }

    /**
     * Operation getOwnedNFTsWithHttpInfo
     *
     * List all owned tokens (paginated)
     *
     * @param  string|null $blockchainDescriptor Blockchain descriptor filter (optional)
     * @param  string|null $vaultAccountIds A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request.  This field will be ignored when walletType&#x3D;END_USER_WALLET or ncwId is provided. (optional)
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $ncwAccountIds A comma separated list of Non-Custodial account IDs. Up to 100 are allowed in a single request. This field will be ignored when walletType&#x3D;VAULT_ACCOUNT or ncwId is not provided. (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60;. (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (optional)
     * @param  string|null $collectionIds A comma separated list of collection IDs. Up to 100 are allowed in a single request. (optional)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string|null $search Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name. (optional)
     * @param  string|null $spam Token ownership spam status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOwnedNFTs'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\GetOwnedNFTs200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOwnedNFTsWithHttpInfo($blockchainDescriptor = null, $vaultAccountIds = null, $ncwId = null, $ncwAccountIds = null, $walletType = 'VAULT_ACCOUNT', $ids = null, $collectionIds = null, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', $search = null, $spam = null, string $contentType = self::contentTypes['getOwnedNFTs'][0])
    {
        $request = $this->getOwnedNFTsRequest($blockchainDescriptor, $vaultAccountIds, $ncwId, $ncwAccountIds, $walletType, $ids, $collectionIds, $pageCursor, $pageSize, $sort, $order, $status, $search, $spam, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\GetOwnedNFTs200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\GetOwnedNFTs200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\GetOwnedNFTs200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation getOwnedNFTsAsync
     *
     * List all owned tokens (paginated)
     *
     * @param  string|null $blockchainDescriptor Blockchain descriptor filter (optional)
     * @param  string|null $vaultAccountIds A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request.  This field will be ignored when walletType&#x3D;END_USER_WALLET or ncwId is provided. (optional)
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $ncwAccountIds A comma separated list of Non-Custodial account IDs. Up to 100 are allowed in a single request. This field will be ignored when walletType&#x3D;VAULT_ACCOUNT or ncwId is not provided. (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60;. (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (optional)
     * @param  string|null $collectionIds A comma separated list of collection IDs. Up to 100 are allowed in a single request. (optional)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string|null $search Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name. (optional)
     * @param  string|null $spam Token ownership spam status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOwnedNFTs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOwnedNFTsAsync($blockchainDescriptor = null, $vaultAccountIds = null, $ncwId = null, $ncwAccountIds = null, $walletType = 'VAULT_ACCOUNT', $ids = null, $collectionIds = null, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', $search = null, $spam = null, string $contentType = self::contentTypes['getOwnedNFTs'][0])
    {
        return $this->getOwnedNFTsAsyncWithHttpInfo($blockchainDescriptor, $vaultAccountIds, $ncwId, $ncwAccountIds, $walletType, $ids, $collectionIds, $pageCursor, $pageSize, $sort, $order, $status, $search, $spam, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOwnedNFTsAsyncWithHttpInfo
     *
     * List all owned tokens (paginated)
     *
     * @param  string|null $blockchainDescriptor Blockchain descriptor filter (optional)
     * @param  string|null $vaultAccountIds A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request.  This field will be ignored when walletType&#x3D;END_USER_WALLET or ncwId is provided. (optional)
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $ncwAccountIds A comma separated list of Non-Custodial account IDs. Up to 100 are allowed in a single request. This field will be ignored when walletType&#x3D;VAULT_ACCOUNT or ncwId is not provided. (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60;. (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (optional)
     * @param  string|null $collectionIds A comma separated list of collection IDs. Up to 100 are allowed in a single request. (optional)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string|null $search Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name. (optional)
     * @param  string|null $spam Token ownership spam status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOwnedNFTs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOwnedNFTsAsyncWithHttpInfo($blockchainDescriptor = null, $vaultAccountIds = null, $ncwId = null, $ncwAccountIds = null, $walletType = 'VAULT_ACCOUNT', $ids = null, $collectionIds = null, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', $search = null, $spam = null, string $contentType = self::contentTypes['getOwnedNFTs'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\GetOwnedNFTs200Response';
        $request = $this->getOwnedNFTsRequest($blockchainDescriptor, $vaultAccountIds, $ncwId, $ncwAccountIds, $walletType, $ids, $collectionIds, $pageCursor, $pageSize, $sort, $order, $status, $search, $spam, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOwnedNFTs'
     *
     * @param  string|null $blockchainDescriptor Blockchain descriptor filter (optional)
     * @param  string|null $vaultAccountIds A comma separated list of Vault Account IDs. Up to 100 are allowed in a single request.  This field will be ignored when walletType&#x3D;END_USER_WALLET or ncwId is provided. (optional)
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $ncwAccountIds A comma separated list of Non-Custodial account IDs. Up to 100 are allowed in a single request. This field will be ignored when walletType&#x3D;VAULT_ACCOUNT or ncwId is not provided. (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60;. (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $ids A comma separated list of NFT IDs. Up to 100 are allowed in a single request. (optional)
     * @param  string|null $collectionIds A comma separated list of collection IDs. Up to 100 are allowed in a single request. (optional)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string|null $search Search owned tokens and their collections. Possible criteria for search:  token name and id within the contract/collection, collection name, blockchain descriptor and name. (optional)
     * @param  string|null $spam Token ownership spam status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getOwnedNFTs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getOwnedNFTsRequest($blockchainDescriptor = null, $vaultAccountIds = null, $ncwId = null, $ncwAccountIds = null, $walletType = 'VAULT_ACCOUNT', $ids = null, $collectionIds = null, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', $search = null, $spam = null, string $contentType = self::contentTypes['getOwnedNFTs'][0])
    {









        if ($pageSize !== null && $pageSize > 100) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling NFTsApi.getOwnedNFTs, must be smaller than or equal to 100.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling NFTsApi.getOwnedNFTs, must be bigger than or equal to 1.');
        }
        



        


        $resourcePath = '/nfts/ownership/tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $blockchainDescriptor,
            'blockchainDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vaultAccountIds,
            'vaultAccountIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ncwId,
            'ncwId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ncwAccountIds,
            'ncwAccountIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $walletType,
            'walletType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ids,
            'ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $collectionIds,
            'collectionIds', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageCursor,
            'pageCursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $spam,
            'spam', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOwnedCollections
     *
     * List owned collections (paginated)
     *
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60; (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $search Search owned collections. Possible criteria for search: collection name, collection contract address. (optional)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOwnedCollections'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\ListOwnedCollections200Response
     */
    public function listOwnedCollections($ncwId = null, $walletType = 'VAULT_ACCOUNT', $search = null, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', string $contentType = self::contentTypes['listOwnedCollections'][0])
    {
        list($response) = $this->listOwnedCollectionsWithHttpInfo($ncwId, $walletType, $search, $pageCursor, $pageSize, $sort, $order, $status, $contentType);
        return $response;
    }

    /**
     * Operation listOwnedCollectionsWithHttpInfo
     *
     * List owned collections (paginated)
     *
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60; (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $search Search owned collections. Possible criteria for search: collection name, collection contract address. (optional)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOwnedCollections'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\ListOwnedCollections200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listOwnedCollectionsWithHttpInfo($ncwId = null, $walletType = 'VAULT_ACCOUNT', $search = null, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', string $contentType = self::contentTypes['listOwnedCollections'][0])
    {
        $request = $this->listOwnedCollectionsRequest($ncwId, $walletType, $search, $pageCursor, $pageSize, $sort, $order, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ListOwnedCollections200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\ListOwnedCollections200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ListOwnedCollections200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listOwnedCollectionsAsync
     *
     * List owned collections (paginated)
     *
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60; (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $search Search owned collections. Possible criteria for search: collection name, collection contract address. (optional)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOwnedCollections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOwnedCollectionsAsync($ncwId = null, $walletType = 'VAULT_ACCOUNT', $search = null, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', string $contentType = self::contentTypes['listOwnedCollections'][0])
    {
        return $this->listOwnedCollectionsAsyncWithHttpInfo($ncwId, $walletType, $search, $pageCursor, $pageSize, $sort, $order, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listOwnedCollectionsAsyncWithHttpInfo
     *
     * List owned collections (paginated)
     *
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60; (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $search Search owned collections. Possible criteria for search: collection name, collection contract address. (optional)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOwnedCollections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOwnedCollectionsAsyncWithHttpInfo($ncwId = null, $walletType = 'VAULT_ACCOUNT', $search = null, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', string $contentType = self::contentTypes['listOwnedCollections'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\ListOwnedCollections200Response';
        $request = $this->listOwnedCollectionsRequest($ncwId, $walletType, $search, $pageCursor, $pageSize, $sort, $order, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listOwnedCollections'
     *
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60; (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $search Search owned collections. Possible criteria for search: collection name, collection contract address. (optional)
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOwnedCollections'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listOwnedCollectionsRequest($ncwId = null, $walletType = 'VAULT_ACCOUNT', $search = null, $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', string $contentType = self::contentTypes['listOwnedCollections'][0])
    {



        

        if ($pageSize !== null && $pageSize > 100) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling NFTsApi.listOwnedCollections, must be smaller than or equal to 100.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling NFTsApi.listOwnedCollections, must be bigger than or equal to 1.');
        }
        




        $resourcePath = '/nfts/ownership/collections';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ncwId,
            'ncwId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $walletType,
            'walletType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageCursor,
            'pageCursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listOwnedTokens
     *
     * List all distinct owned tokens (paginated)
     *
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60; (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string|null $search Search owned tokens by token name (optional)
     * @param  string|null $spam Token ownership spam status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOwnedTokens'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response
     */
    public function listOwnedTokens($ncwId = null, $walletType = 'VAULT_ACCOUNT', $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', $search = null, $spam = null, string $contentType = self::contentTypes['listOwnedTokens'][0])
    {
        list($response) = $this->listOwnedTokensWithHttpInfo($ncwId, $walletType, $pageCursor, $pageSize, $sort, $order, $status, $search, $spam, $contentType);
        return $response;
    }

    /**
     * Operation listOwnedTokensWithHttpInfo
     *
     * List all distinct owned tokens (paginated)
     *
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60; (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string|null $search Search owned tokens by token name (optional)
     * @param  string|null $spam Token ownership spam status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOwnedTokens'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function listOwnedTokensWithHttpInfo($ncwId = null, $walletType = 'VAULT_ACCOUNT', $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', $search = null, $spam = null, string $contentType = self::contentTypes['listOwnedTokens'][0])
    {
        $request = $this->listOwnedTokensRequest($ncwId, $walletType, $pageCursor, $pageSize, $sort, $order, $status, $search, $spam, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation listOwnedTokensAsync
     *
     * List all distinct owned tokens (paginated)
     *
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60; (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string|null $search Search owned tokens by token name (optional)
     * @param  string|null $spam Token ownership spam status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOwnedTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOwnedTokensAsync($ncwId = null, $walletType = 'VAULT_ACCOUNT', $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', $search = null, $spam = null, string $contentType = self::contentTypes['listOwnedTokens'][0])
    {
        return $this->listOwnedTokensAsyncWithHttpInfo($ncwId, $walletType, $pageCursor, $pageSize, $sort, $order, $status, $search, $spam, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listOwnedTokensAsyncWithHttpInfo
     *
     * List all distinct owned tokens (paginated)
     *
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60; (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string|null $search Search owned tokens by token name (optional)
     * @param  string|null $spam Token ownership spam status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOwnedTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listOwnedTokensAsyncWithHttpInfo($ncwId = null, $walletType = 'VAULT_ACCOUNT', $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', $search = null, $spam = null, string $contentType = self::contentTypes['listOwnedTokens'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\ListOwnedTokens200Response';
        $request = $this->listOwnedTokensRequest($ncwId, $walletType, $pageCursor, $pageSize, $sort, $order, $status, $search, $spam, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listOwnedTokens'
     *
     * @param  string|null $ncwId Tenant&#39;s Non-Custodial Wallet ID (optional)
     * @param  string|null $walletType Wallet type, it can be &#x60;VAULT_ACCOUNT&#x60; or &#x60;END_USER_WALLET&#x60; (optional, default to 'VAULT_ACCOUNT')
     * @param  string|null $pageCursor Page cursor to fetch (optional)
     * @param  float|null $pageSize Items per page (max 100) (optional)
     * @param  string[]|null $sort Sort by param, it can be one param or a list of params separated by comma (optional)
     * @param  string|null $order Order direction, it can be &#x60;ASC&#x60; for ascending or &#x60;DESC&#x60; for descending (optional, default to 'ASC')
     * @param  string|null $status Token ownership status (optional, default to 'LISTED')
     * @param  string|null $search Search owned tokens by token name (optional)
     * @param  string|null $spam Token ownership spam status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listOwnedTokens'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listOwnedTokensRequest($ncwId = null, $walletType = 'VAULT_ACCOUNT', $pageCursor = null, $pageSize = null, $sort = null, $order = 'ASC', $status = 'LISTED', $search = null, $spam = null, string $contentType = self::contentTypes['listOwnedTokens'][0])
    {




        if ($pageSize !== null && $pageSize > 100) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling NFTsApi.listOwnedTokens, must be smaller than or equal to 100.');
        }
        if ($pageSize !== null && $pageSize < 1) {
            throw new \InvalidArgumentException('invalid value for "$pageSize" when calling NFTsApi.listOwnedTokens, must be bigger than or equal to 1.');
        }
        



        


        $resourcePath = '/nfts/ownership/assets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ncwId,
            'ncwId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $walletType,
            'walletType', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageCursor,
            'pageCursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pageSize,
            'pageSize', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $spam,
            'spam', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refreshNFTMetadata
     *
     * Refresh token metadata
     *
     * @param  string $id NFT ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshNFTMetadata'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function refreshNFTMetadata($id, string $contentType = self::contentTypes['refreshNFTMetadata'][0])
    {
        $this->refreshNFTMetadataWithHttpInfo($id, $contentType);
    }

    /**
     * Operation refreshNFTMetadataWithHttpInfo
     *
     * Refresh token metadata
     *
     * @param  string $id NFT ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshNFTMetadata'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshNFTMetadataWithHttpInfo($id, string $contentType = self::contentTypes['refreshNFTMetadata'][0])
    {
        $request = $this->refreshNFTMetadataRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation refreshNFTMetadataAsync
     *
     * Refresh token metadata
     *
     * @param  string $id NFT ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshNFTMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshNFTMetadataAsync($id, string $contentType = self::contentTypes['refreshNFTMetadata'][0])
    {
        return $this->refreshNFTMetadataAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshNFTMetadataAsyncWithHttpInfo
     *
     * Refresh token metadata
     *
     * @param  string $id NFT ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshNFTMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshNFTMetadataAsyncWithHttpInfo($id, string $contentType = self::contentTypes['refreshNFTMetadata'][0])
    {
        $returnType = '';
        $request = $this->refreshNFTMetadataRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refreshNFTMetadata'
     *
     * @param  string $id NFT ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshNFTMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refreshNFTMetadataRequest($id, string $contentType = self::contentTypes['refreshNFTMetadata'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling refreshNFTMetadata'
            );
        }


        $resourcePath = '/nfts/tokens/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refreshNFTOwnershipByVault
     *
     * Refresh vault account tokens
     *
     * @param  string $blockchainDescriptor Blockchain descriptor filter (required)
     * @param  string $vaultAccountId Vault account filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshNFTOwnershipByVault'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function refreshNFTOwnershipByVault($blockchainDescriptor, $vaultAccountId, string $contentType = self::contentTypes['refreshNFTOwnershipByVault'][0])
    {
        $this->refreshNFTOwnershipByVaultWithHttpInfo($blockchainDescriptor, $vaultAccountId, $contentType);
    }

    /**
     * Operation refreshNFTOwnershipByVaultWithHttpInfo
     *
     * Refresh vault account tokens
     *
     * @param  string $blockchainDescriptor Blockchain descriptor filter (required)
     * @param  string $vaultAccountId Vault account filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshNFTOwnershipByVault'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function refreshNFTOwnershipByVaultWithHttpInfo($blockchainDescriptor, $vaultAccountId, string $contentType = self::contentTypes['refreshNFTOwnershipByVault'][0])
    {
        $request = $this->refreshNFTOwnershipByVaultRequest($blockchainDescriptor, $vaultAccountId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation refreshNFTOwnershipByVaultAsync
     *
     * Refresh vault account tokens
     *
     * @param  string $blockchainDescriptor Blockchain descriptor filter (required)
     * @param  string $vaultAccountId Vault account filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshNFTOwnershipByVault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshNFTOwnershipByVaultAsync($blockchainDescriptor, $vaultAccountId, string $contentType = self::contentTypes['refreshNFTOwnershipByVault'][0])
    {
        return $this->refreshNFTOwnershipByVaultAsyncWithHttpInfo($blockchainDescriptor, $vaultAccountId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refreshNFTOwnershipByVaultAsyncWithHttpInfo
     *
     * Refresh vault account tokens
     *
     * @param  string $blockchainDescriptor Blockchain descriptor filter (required)
     * @param  string $vaultAccountId Vault account filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshNFTOwnershipByVault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refreshNFTOwnershipByVaultAsyncWithHttpInfo($blockchainDescriptor, $vaultAccountId, string $contentType = self::contentTypes['refreshNFTOwnershipByVault'][0])
    {
        $returnType = '';
        $request = $this->refreshNFTOwnershipByVaultRequest($blockchainDescriptor, $vaultAccountId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refreshNFTOwnershipByVault'
     *
     * @param  string $blockchainDescriptor Blockchain descriptor filter (required)
     * @param  string $vaultAccountId Vault account filter (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['refreshNFTOwnershipByVault'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function refreshNFTOwnershipByVaultRequest($blockchainDescriptor, $vaultAccountId, string $contentType = self::contentTypes['refreshNFTOwnershipByVault'][0])
    {

        // verify the required parameter 'blockchainDescriptor' is set
        if ($blockchainDescriptor === null || (is_array($blockchainDescriptor) && count($blockchainDescriptor) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $blockchainDescriptor when calling refreshNFTOwnershipByVault'
            );
        }

        // verify the required parameter 'vaultAccountId' is set
        if ($vaultAccountId === null || (is_array($vaultAccountId) && count($vaultAccountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vaultAccountId when calling refreshNFTOwnershipByVault'
            );
        }


        $resourcePath = '/nfts/ownership/tokens';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $blockchainDescriptor,
            'blockchainDescriptor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $vaultAccountId,
            'vaultAccountId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTokenOwnershipStatus
     *
     * Update token ownership status
     *
     * @param  string $id NFT ID (required)
     * @param  \Developerayo\FireblocksLaravel\Models\UpdateTokenOwnershipStatusDto $updateTokenOwnershipStatusDto updateTokenOwnershipStatusDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokenOwnershipStatus'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTokenOwnershipStatus($id, $updateTokenOwnershipStatusDto, string $contentType = self::contentTypes['updateTokenOwnershipStatus'][0])
    {
        $this->updateTokenOwnershipStatusWithHttpInfo($id, $updateTokenOwnershipStatusDto, $contentType);
    }

    /**
     * Operation updateTokenOwnershipStatusWithHttpInfo
     *
     * Update token ownership status
     *
     * @param  string $id NFT ID (required)
     * @param  \Developerayo\FireblocksLaravel\Models\UpdateTokenOwnershipStatusDto $updateTokenOwnershipStatusDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokenOwnershipStatus'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTokenOwnershipStatusWithHttpInfo($id, $updateTokenOwnershipStatusDto, string $contentType = self::contentTypes['updateTokenOwnershipStatus'][0])
    {
        $request = $this->updateTokenOwnershipStatusRequest($id, $updateTokenOwnershipStatusDto, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTokenOwnershipStatusAsync
     *
     * Update token ownership status
     *
     * @param  string $id NFT ID (required)
     * @param  \Developerayo\FireblocksLaravel\Models\UpdateTokenOwnershipStatusDto $updateTokenOwnershipStatusDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokenOwnershipStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTokenOwnershipStatusAsync($id, $updateTokenOwnershipStatusDto, string $contentType = self::contentTypes['updateTokenOwnershipStatus'][0])
    {
        return $this->updateTokenOwnershipStatusAsyncWithHttpInfo($id, $updateTokenOwnershipStatusDto, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTokenOwnershipStatusAsyncWithHttpInfo
     *
     * Update token ownership status
     *
     * @param  string $id NFT ID (required)
     * @param  \Developerayo\FireblocksLaravel\Models\UpdateTokenOwnershipStatusDto $updateTokenOwnershipStatusDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokenOwnershipStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTokenOwnershipStatusAsyncWithHttpInfo($id, $updateTokenOwnershipStatusDto, string $contentType = self::contentTypes['updateTokenOwnershipStatus'][0])
    {
        $returnType = '';
        $request = $this->updateTokenOwnershipStatusRequest($id, $updateTokenOwnershipStatusDto, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTokenOwnershipStatus'
     *
     * @param  string $id NFT ID (required)
     * @param  \Developerayo\FireblocksLaravel\Models\UpdateTokenOwnershipStatusDto $updateTokenOwnershipStatusDto (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokenOwnershipStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTokenOwnershipStatusRequest($id, $updateTokenOwnershipStatusDto, string $contentType = self::contentTypes['updateTokenOwnershipStatus'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling updateTokenOwnershipStatus'
            );
        }

        // verify the required parameter 'updateTokenOwnershipStatusDto' is set
        if ($updateTokenOwnershipStatusDto === null || (is_array($updateTokenOwnershipStatusDto) && count($updateTokenOwnershipStatusDto) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $updateTokenOwnershipStatusDto when calling updateTokenOwnershipStatus'
            );
        }


        $resourcePath = '/nfts/ownership/tokens/{id}/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($updateTokenOwnershipStatusDto)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($updateTokenOwnershipStatusDto));
            } else {
                $httpBody = $updateTokenOwnershipStatusDto;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTokensOwnershipSpam
     *
     * Update tokens ownership spam statuses
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TokenOwnershipSpamUpdatePayload[] $tokenOwnershipSpamUpdatePayload tokenOwnershipSpamUpdatePayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokensOwnershipSpam'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTokensOwnershipSpam($tokenOwnershipSpamUpdatePayload, string $contentType = self::contentTypes['updateTokensOwnershipSpam'][0])
    {
        $this->updateTokensOwnershipSpamWithHttpInfo($tokenOwnershipSpamUpdatePayload, $contentType);
    }

    /**
     * Operation updateTokensOwnershipSpamWithHttpInfo
     *
     * Update tokens ownership spam statuses
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TokenOwnershipSpamUpdatePayload[] $tokenOwnershipSpamUpdatePayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokensOwnershipSpam'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTokensOwnershipSpamWithHttpInfo($tokenOwnershipSpamUpdatePayload, string $contentType = self::contentTypes['updateTokensOwnershipSpam'][0])
    {
        $request = $this->updateTokensOwnershipSpamRequest($tokenOwnershipSpamUpdatePayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTokensOwnershipSpamAsync
     *
     * Update tokens ownership spam statuses
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TokenOwnershipSpamUpdatePayload[] $tokenOwnershipSpamUpdatePayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokensOwnershipSpam'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTokensOwnershipSpamAsync($tokenOwnershipSpamUpdatePayload, string $contentType = self::contentTypes['updateTokensOwnershipSpam'][0])
    {
        return $this->updateTokensOwnershipSpamAsyncWithHttpInfo($tokenOwnershipSpamUpdatePayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTokensOwnershipSpamAsyncWithHttpInfo
     *
     * Update tokens ownership spam statuses
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TokenOwnershipSpamUpdatePayload[] $tokenOwnershipSpamUpdatePayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokensOwnershipSpam'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTokensOwnershipSpamAsyncWithHttpInfo($tokenOwnershipSpamUpdatePayload, string $contentType = self::contentTypes['updateTokensOwnershipSpam'][0])
    {
        $returnType = '';
        $request = $this->updateTokensOwnershipSpamRequest($tokenOwnershipSpamUpdatePayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTokensOwnershipSpam'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TokenOwnershipSpamUpdatePayload[] $tokenOwnershipSpamUpdatePayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokensOwnershipSpam'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTokensOwnershipSpamRequest($tokenOwnershipSpamUpdatePayload, string $contentType = self::contentTypes['updateTokensOwnershipSpam'][0])
    {

        // verify the required parameter 'tokenOwnershipSpamUpdatePayload' is set
        if ($tokenOwnershipSpamUpdatePayload === null || (is_array($tokenOwnershipSpamUpdatePayload) && count($tokenOwnershipSpamUpdatePayload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tokenOwnershipSpamUpdatePayload when calling updateTokensOwnershipSpam'
            );
        }


        $resourcePath = '/api/v1/nfts/ownership/tokens/spam';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tokenOwnershipSpamUpdatePayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tokenOwnershipSpamUpdatePayload));
            } else {
                $httpBody = $tokenOwnershipSpamUpdatePayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTokensOwnershipStatus
     *
     * Update tokens ownership status
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TokenOwnershipStatusUpdatePayload[] $tokenOwnershipStatusUpdatePayload tokenOwnershipStatusUpdatePayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokensOwnershipStatus'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateTokensOwnershipStatus($tokenOwnershipStatusUpdatePayload, string $contentType = self::contentTypes['updateTokensOwnershipStatus'][0])
    {
        $this->updateTokensOwnershipStatusWithHttpInfo($tokenOwnershipStatusUpdatePayload, $contentType);
    }

    /**
     * Operation updateTokensOwnershipStatusWithHttpInfo
     *
     * Update tokens ownership status
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TokenOwnershipStatusUpdatePayload[] $tokenOwnershipStatusUpdatePayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokensOwnershipStatus'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTokensOwnershipStatusWithHttpInfo($tokenOwnershipStatusUpdatePayload, string $contentType = self::contentTypes['updateTokensOwnershipStatus'][0])
    {
        $request = $this->updateTokensOwnershipStatusRequest($tokenOwnershipStatusUpdatePayload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
        

            throw $e;
        }
    }

    /**
     * Operation updateTokensOwnershipStatusAsync
     *
     * Update tokens ownership status
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TokenOwnershipStatusUpdatePayload[] $tokenOwnershipStatusUpdatePayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokensOwnershipStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTokensOwnershipStatusAsync($tokenOwnershipStatusUpdatePayload, string $contentType = self::contentTypes['updateTokensOwnershipStatus'][0])
    {
        return $this->updateTokensOwnershipStatusAsyncWithHttpInfo($tokenOwnershipStatusUpdatePayload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTokensOwnershipStatusAsyncWithHttpInfo
     *
     * Update tokens ownership status
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TokenOwnershipStatusUpdatePayload[] $tokenOwnershipStatusUpdatePayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokensOwnershipStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTokensOwnershipStatusAsyncWithHttpInfo($tokenOwnershipStatusUpdatePayload, string $contentType = self::contentTypes['updateTokensOwnershipStatus'][0])
    {
        $returnType = '';
        $request = $this->updateTokensOwnershipStatusRequest($tokenOwnershipStatusUpdatePayload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTokensOwnershipStatus'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\TokenOwnershipStatusUpdatePayload[] $tokenOwnershipStatusUpdatePayload (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateTokensOwnershipStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTokensOwnershipStatusRequest($tokenOwnershipStatusUpdatePayload, string $contentType = self::contentTypes['updateTokensOwnershipStatus'][0])
    {

        // verify the required parameter 'tokenOwnershipStatusUpdatePayload' is set
        if ($tokenOwnershipStatusUpdatePayload === null || (is_array($tokenOwnershipStatusUpdatePayload) && count($tokenOwnershipStatusUpdatePayload) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tokenOwnershipStatusUpdatePayload when calling updateTokensOwnershipStatus'
            );
        }


        $resourcePath = '/nfts/ownership/tokens/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($tokenOwnershipStatusUpdatePayload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($tokenOwnershipStatusUpdatePayload));
            } else {
                $httpBody = $tokenOwnershipStatusUpdatePayload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
