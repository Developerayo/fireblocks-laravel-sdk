<?php
/**
 * InternalWalletsApi
 * PHP version 8.1
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Developerayo\FireblocksLaravel\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use Developerayo\FireblocksLaravel\ApiException;
use Developerayo\FireblocksLaravel\Configuration;
use Developerayo\FireblocksLaravel\FormDataProcessor;
use Developerayo\FireblocksLaravel\HeaderSelector;
use Developerayo\FireblocksLaravel\ObjectSerializer;

/**
 * InternalWalletsApi Class Doc Comment
 *
 * @category Class
 * @package  Developerayo\FireblocksLaravel
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InternalWalletsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'internalWalletsGet' => [
            'application/json',
        ],
        'internalWalletsPost' => [
            'application/json',
        ],
        'internalWalletsWalletIdAssetIdDelete' => [
            'application/json',
        ],
        'internalWalletsWalletIdAssetIdGet' => [
            'application/json',
        ],
        'internalWalletsWalletIdAssetIdPost' => [
            'application/json',
        ],
        'internalWalletsWalletIdDelete' => [
            'application/json',
        ],
        'internalWalletsWalletIdGet' => [
            'application/json',
        ],
        'internalWalletsWalletIdSetCustomerRefIdPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation internalWalletsGet
     *
     * List internal wallets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\UnmanagedWallet[]|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function internalWalletsGet(string $contentType = self::contentTypes['internalWalletsGet'][0])
    {
        list($response) = $this->internalWalletsGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation internalWalletsGetWithHttpInfo
     *
     * List internal wallets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\UnmanagedWallet[]|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function internalWalletsGetWithHttpInfo(string $contentType = self::contentTypes['internalWalletsGet'][0])
    {
        $request = $this->internalWalletsGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet[]',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet[]',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation internalWalletsGetAsync
     *
     * List internal wallets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsGetAsync(string $contentType = self::contentTypes['internalWalletsGet'][0])
    {
        return $this->internalWalletsGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation internalWalletsGetAsyncWithHttpInfo
     *
     * List internal wallets
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsGetAsyncWithHttpInfo(string $contentType = self::contentTypes['internalWalletsGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet[]';
        $request = $this->internalWalletsGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'internalWalletsGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function internalWalletsGetRequest(string $contentType = self::contentTypes['internalWalletsGet'][0])
    {


        $resourcePath = '/internal_wallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation internalWalletsPost
     *
     * Create an internal wallet
     *
     * @param  \Developerayo\FireblocksLaravel\Models\InternalWalletsPostRequest|null $internalWalletsPostRequest internalWalletsPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\UnmanagedWallet|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function internalWalletsPost($internalWalletsPostRequest = null, string $contentType = self::contentTypes['internalWalletsPost'][0])
    {
        list($response) = $this->internalWalletsPostWithHttpInfo($internalWalletsPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation internalWalletsPostWithHttpInfo
     *
     * Create an internal wallet
     *
     * @param  \Developerayo\FireblocksLaravel\Models\InternalWalletsPostRequest|null $internalWalletsPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\UnmanagedWallet|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function internalWalletsPostWithHttpInfo($internalWalletsPostRequest = null, string $contentType = self::contentTypes['internalWalletsPost'][0])
    {
        $request = $this->internalWalletsPostRequest($internalWalletsPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation internalWalletsPostAsync
     *
     * Create an internal wallet
     *
     * @param  \Developerayo\FireblocksLaravel\Models\InternalWalletsPostRequest|null $internalWalletsPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsPostAsync($internalWalletsPostRequest = null, string $contentType = self::contentTypes['internalWalletsPost'][0])
    {
        return $this->internalWalletsPostAsyncWithHttpInfo($internalWalletsPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation internalWalletsPostAsyncWithHttpInfo
     *
     * Create an internal wallet
     *
     * @param  \Developerayo\FireblocksLaravel\Models\InternalWalletsPostRequest|null $internalWalletsPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsPostAsyncWithHttpInfo($internalWalletsPostRequest = null, string $contentType = self::contentTypes['internalWalletsPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet';
        $request = $this->internalWalletsPostRequest($internalWalletsPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'internalWalletsPost'
     *
     * @param  \Developerayo\FireblocksLaravel\Models\InternalWalletsPostRequest|null $internalWalletsPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function internalWalletsPostRequest($internalWalletsPostRequest = null, string $contentType = self::contentTypes['internalWalletsPost'][0])
    {



        $resourcePath = '/internal_wallets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($internalWalletsPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($internalWalletsPostRequest));
            } else {
                $httpBody = $internalWalletsPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation internalWalletsWalletIdAssetIdDelete
     *
     * Delete a whitelisted address from an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdDelete'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function internalWalletsWalletIdAssetIdDelete($walletId, $assetId, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdDelete'][0])
    {
        $this->internalWalletsWalletIdAssetIdDeleteWithHttpInfo($walletId, $assetId, $contentType);
    }

    /**
     * Operation internalWalletsWalletIdAssetIdDeleteWithHttpInfo
     *
     * Delete a whitelisted address from an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdDelete'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function internalWalletsWalletIdAssetIdDeleteWithHttpInfo($walletId, $assetId, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdDelete'][0])
    {
        $request = $this->internalWalletsWalletIdAssetIdDeleteRequest($walletId, $assetId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation internalWalletsWalletIdAssetIdDeleteAsync
     *
     * Delete a whitelisted address from an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdAssetIdDeleteAsync($walletId, $assetId, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdDelete'][0])
    {
        return $this->internalWalletsWalletIdAssetIdDeleteAsyncWithHttpInfo($walletId, $assetId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation internalWalletsWalletIdAssetIdDeleteAsyncWithHttpInfo
     *
     * Delete a whitelisted address from an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdAssetIdDeleteAsyncWithHttpInfo($walletId, $assetId, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdDelete'][0])
    {
        $returnType = '';
        $request = $this->internalWalletsWalletIdAssetIdDeleteRequest($walletId, $assetId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'internalWalletsWalletIdAssetIdDelete'
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function internalWalletsWalletIdAssetIdDeleteRequest($walletId, $assetId, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdDelete'][0])
    {

        // verify the required parameter 'walletId' is set
        if ($walletId === null || (is_array($walletId) && count($walletId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $walletId when calling internalWalletsWalletIdAssetIdDelete'
            );
        }
        
        // verify the required parameter 'assetId' is set
        if ($assetId === null || (is_array($assetId) && count($assetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assetId when calling internalWalletsWalletIdAssetIdDelete'
            );
        }
        

        $resourcePath = '/internal_wallets/{walletId}/{assetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($walletId !== null) {
            $resourcePath = str_replace(
                '{' . 'walletId' . '}',
                ObjectSerializer::toPathValue($walletId),
                $resourcePath
            );
        }
        // path params
        if ($assetId !== null) {
            $resourcePath = str_replace(
                '{' . 'assetId' . '}',
                ObjectSerializer::toPathValue($assetId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation internalWalletsWalletIdAssetIdGet
     *
     * Get an asset from an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\WalletAsset|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function internalWalletsWalletIdAssetIdGet($walletId, $assetId, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdGet'][0])
    {
        list($response) = $this->internalWalletsWalletIdAssetIdGetWithHttpInfo($walletId, $assetId, $contentType);
        return $response;
    }

    /**
     * Operation internalWalletsWalletIdAssetIdGetWithHttpInfo
     *
     * Get an asset from an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\WalletAsset|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function internalWalletsWalletIdAssetIdGetWithHttpInfo($walletId, $assetId, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdGet'][0])
    {
        $request = $this->internalWalletsWalletIdAssetIdGetRequest($walletId, $assetId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\WalletAsset',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\WalletAsset',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\WalletAsset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation internalWalletsWalletIdAssetIdGetAsync
     *
     * Get an asset from an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdAssetIdGetAsync($walletId, $assetId, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdGet'][0])
    {
        return $this->internalWalletsWalletIdAssetIdGetAsyncWithHttpInfo($walletId, $assetId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation internalWalletsWalletIdAssetIdGetAsyncWithHttpInfo
     *
     * Get an asset from an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdAssetIdGetAsyncWithHttpInfo($walletId, $assetId, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\WalletAsset';
        $request = $this->internalWalletsWalletIdAssetIdGetRequest($walletId, $assetId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'internalWalletsWalletIdAssetIdGet'
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function internalWalletsWalletIdAssetIdGetRequest($walletId, $assetId, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdGet'][0])
    {

        // verify the required parameter 'walletId' is set
        if ($walletId === null || (is_array($walletId) && count($walletId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $walletId when calling internalWalletsWalletIdAssetIdGet'
            );
        }
        
        // verify the required parameter 'assetId' is set
        if ($assetId === null || (is_array($assetId) && count($assetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assetId when calling internalWalletsWalletIdAssetIdGet'
            );
        }
        

        $resourcePath = '/internal_wallets/{walletId}/{assetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($walletId !== null) {
            $resourcePath = str_replace(
                '{' . 'walletId' . '}',
                ObjectSerializer::toPathValue($walletId),
                $resourcePath
            );
        }
        // path params
        if ($assetId !== null) {
            $resourcePath = str_replace(
                '{' . 'assetId' . '}',
                ObjectSerializer::toPathValue($assetId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation internalWalletsWalletIdAssetIdPost
     *
     * Add an asset to an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to add (required)
     * @param  \Developerayo\FireblocksLaravel\Models\InternalWalletsWalletIdAssetIdPostRequest|null $internalWalletsWalletIdAssetIdPostRequest internalWalletsWalletIdAssetIdPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\WalletAsset|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function internalWalletsWalletIdAssetIdPost($walletId, $assetId, $internalWalletsWalletIdAssetIdPostRequest = null, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdPost'][0])
    {
        list($response) = $this->internalWalletsWalletIdAssetIdPostWithHttpInfo($walletId, $assetId, $internalWalletsWalletIdAssetIdPostRequest, $contentType);
        return $response;
    }

    /**
     * Operation internalWalletsWalletIdAssetIdPostWithHttpInfo
     *
     * Add an asset to an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to add (required)
     * @param  \Developerayo\FireblocksLaravel\Models\InternalWalletsWalletIdAssetIdPostRequest|null $internalWalletsWalletIdAssetIdPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\WalletAsset|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function internalWalletsWalletIdAssetIdPostWithHttpInfo($walletId, $assetId, $internalWalletsWalletIdAssetIdPostRequest = null, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdPost'][0])
    {
        $request = $this->internalWalletsWalletIdAssetIdPostRequest($walletId, $assetId, $internalWalletsWalletIdAssetIdPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\WalletAsset',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\WalletAsset',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\WalletAsset',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation internalWalletsWalletIdAssetIdPostAsync
     *
     * Add an asset to an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to add (required)
     * @param  \Developerayo\FireblocksLaravel\Models\InternalWalletsWalletIdAssetIdPostRequest|null $internalWalletsWalletIdAssetIdPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdAssetIdPostAsync($walletId, $assetId, $internalWalletsWalletIdAssetIdPostRequest = null, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdPost'][0])
    {
        return $this->internalWalletsWalletIdAssetIdPostAsyncWithHttpInfo($walletId, $assetId, $internalWalletsWalletIdAssetIdPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation internalWalletsWalletIdAssetIdPostAsyncWithHttpInfo
     *
     * Add an asset to an internal wallet
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to add (required)
     * @param  \Developerayo\FireblocksLaravel\Models\InternalWalletsWalletIdAssetIdPostRequest|null $internalWalletsWalletIdAssetIdPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdAssetIdPostAsyncWithHttpInfo($walletId, $assetId, $internalWalletsWalletIdAssetIdPostRequest = null, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdPost'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\WalletAsset';
        $request = $this->internalWalletsWalletIdAssetIdPostRequest($walletId, $assetId, $internalWalletsWalletIdAssetIdPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'internalWalletsWalletIdAssetIdPost'
     *
     * @param  string $walletId The ID of the wallet (required)
     * @param  string $assetId The ID of the asset to add (required)
     * @param  \Developerayo\FireblocksLaravel\Models\InternalWalletsWalletIdAssetIdPostRequest|null $internalWalletsWalletIdAssetIdPostRequest (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdAssetIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function internalWalletsWalletIdAssetIdPostRequest($walletId, $assetId, $internalWalletsWalletIdAssetIdPostRequest = null, string $contentType = self::contentTypes['internalWalletsWalletIdAssetIdPost'][0])
    {

        // verify the required parameter 'walletId' is set
        if ($walletId === null || (is_array($walletId) && count($walletId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $walletId when calling internalWalletsWalletIdAssetIdPost'
            );
        }

        // verify the required parameter 'assetId' is set
        if ($assetId === null || (is_array($assetId) && count($assetId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assetId when calling internalWalletsWalletIdAssetIdPost'
            );
        }



        $resourcePath = '/internal_wallets/{walletId}/{assetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($walletId !== null) {
            $resourcePath = str_replace(
                '{' . 'walletId' . '}',
                ObjectSerializer::toPathValue($walletId),
                $resourcePath
            );
        }
        // path params
        if ($assetId !== null) {
            $resourcePath = str_replace(
                '{' . 'assetId' . '}',
                ObjectSerializer::toPathValue($assetId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($internalWalletsWalletIdAssetIdPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($internalWalletsWalletIdAssetIdPostRequest));
            } else {
                $httpBody = $internalWalletsWalletIdAssetIdPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation internalWalletsWalletIdDelete
     *
     * Delete an internal wallet
     *
     * @param  string $walletId The ID of the wallet to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdDelete'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function internalWalletsWalletIdDelete($walletId, string $contentType = self::contentTypes['internalWalletsWalletIdDelete'][0])
    {
        $this->internalWalletsWalletIdDeleteWithHttpInfo($walletId, $contentType);
    }

    /**
     * Operation internalWalletsWalletIdDeleteWithHttpInfo
     *
     * Delete an internal wallet
     *
     * @param  string $walletId The ID of the wallet to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdDelete'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function internalWalletsWalletIdDeleteWithHttpInfo($walletId, string $contentType = self::contentTypes['internalWalletsWalletIdDelete'][0])
    {
        $request = $this->internalWalletsWalletIdDeleteRequest($walletId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation internalWalletsWalletIdDeleteAsync
     *
     * Delete an internal wallet
     *
     * @param  string $walletId The ID of the wallet to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdDeleteAsync($walletId, string $contentType = self::contentTypes['internalWalletsWalletIdDelete'][0])
    {
        return $this->internalWalletsWalletIdDeleteAsyncWithHttpInfo($walletId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation internalWalletsWalletIdDeleteAsyncWithHttpInfo
     *
     * Delete an internal wallet
     *
     * @param  string $walletId The ID of the wallet to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdDeleteAsyncWithHttpInfo($walletId, string $contentType = self::contentTypes['internalWalletsWalletIdDelete'][0])
    {
        $returnType = '';
        $request = $this->internalWalletsWalletIdDeleteRequest($walletId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'internalWalletsWalletIdDelete'
     *
     * @param  string $walletId The ID of the wallet to delete (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function internalWalletsWalletIdDeleteRequest($walletId, string $contentType = self::contentTypes['internalWalletsWalletIdDelete'][0])
    {

        // verify the required parameter 'walletId' is set
        if ($walletId === null || (is_array($walletId) && count($walletId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $walletId when calling internalWalletsWalletIdDelete'
            );
        }
        

        $resourcePath = '/internal_wallets/{walletId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($walletId !== null) {
            $resourcePath = str_replace(
                '{' . 'walletId' . '}',
                ObjectSerializer::toPathValue($walletId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation internalWalletsWalletIdGet
     *
     * Get assets for internal wallet
     *
     * @param  string $walletId The ID of the wallet to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Developerayo\FireblocksLaravel\Models\UnmanagedWallet|\Developerayo\FireblocksLaravel\Models\Error
     */
    public function internalWalletsWalletIdGet($walletId, string $contentType = self::contentTypes['internalWalletsWalletIdGet'][0])
    {
        list($response) = $this->internalWalletsWalletIdGetWithHttpInfo($walletId, $contentType);
        return $response;
    }

    /**
     * Operation internalWalletsWalletIdGetWithHttpInfo
     *
     * Get assets for internal wallet
     *
     * @param  string $walletId The ID of the wallet to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdGet'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Developerayo\FireblocksLaravel\Models\UnmanagedWallet|\Developerayo\FireblocksLaravel\Models\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function internalWalletsWalletIdGetWithHttpInfo($walletId, string $contentType = self::contentTypes['internalWalletsWalletIdGet'][0])
    {
        $request = $this->internalWalletsWalletIdGetRequest($walletId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet',
                        $request,
                        $response,
                    );
                default:
                    return $this->handleResponseWithDataType(
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation internalWalletsWalletIdGetAsync
     *
     * Get assets for internal wallet
     *
     * @param  string $walletId The ID of the wallet to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdGetAsync($walletId, string $contentType = self::contentTypes['internalWalletsWalletIdGet'][0])
    {
        return $this->internalWalletsWalletIdGetAsyncWithHttpInfo($walletId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation internalWalletsWalletIdGetAsyncWithHttpInfo
     *
     * Get assets for internal wallet
     *
     * @param  string $walletId The ID of the wallet to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdGetAsyncWithHttpInfo($walletId, string $contentType = self::contentTypes['internalWalletsWalletIdGet'][0])
    {
        $returnType = '\Developerayo\FireblocksLaravel\Models\UnmanagedWallet';
        $request = $this->internalWalletsWalletIdGetRequest($walletId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'internalWalletsWalletIdGet'
     *
     * @param  string $walletId The ID of the wallet to return (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function internalWalletsWalletIdGetRequest($walletId, string $contentType = self::contentTypes['internalWalletsWalletIdGet'][0])
    {

        // verify the required parameter 'walletId' is set
        if ($walletId === null || (is_array($walletId) && count($walletId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $walletId when calling internalWalletsWalletIdGet'
            );
        }
        

        $resourcePath = '/internal_wallets/{walletId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($walletId !== null) {
            $resourcePath = str_replace(
                '{' . 'walletId' . '}',
                ObjectSerializer::toPathValue($walletId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation internalWalletsWalletIdSetCustomerRefIdPost
     *
     * Set an AML/KYT customer reference ID for an internal wallet
     *
     * @param  string $walletId The wallet ID (required)
     * @param  \Developerayo\FireblocksLaravel\Models\VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdSetCustomerRefIdPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function internalWalletsWalletIdSetCustomerRefIdPost($walletId, $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, string $contentType = self::contentTypes['internalWalletsWalletIdSetCustomerRefIdPost'][0])
    {
        $this->internalWalletsWalletIdSetCustomerRefIdPostWithHttpInfo($walletId, $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, $contentType);
    }

    /**
     * Operation internalWalletsWalletIdSetCustomerRefIdPostWithHttpInfo
     *
     * Set an AML/KYT customer reference ID for an internal wallet
     *
     * @param  string $walletId The wallet ID (required)
     * @param  \Developerayo\FireblocksLaravel\Models\VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdSetCustomerRefIdPost'] to see the possible values for this operation
     *
     * @throws \Developerayo\FireblocksLaravel\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function internalWalletsWalletIdSetCustomerRefIdPostWithHttpInfo($walletId, $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, string $contentType = self::contentTypes['internalWalletsWalletIdSetCustomerRefIdPost'][0])
    {
        $request = $this->internalWalletsWalletIdSetCustomerRefIdPostRequest($walletId, $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Developerayo\FireblocksLaravel\Models\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation internalWalletsWalletIdSetCustomerRefIdPostAsync
     *
     * Set an AML/KYT customer reference ID for an internal wallet
     *
     * @param  string $walletId The wallet ID (required)
     * @param  \Developerayo\FireblocksLaravel\Models\VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdSetCustomerRefIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdSetCustomerRefIdPostAsync($walletId, $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, string $contentType = self::contentTypes['internalWalletsWalletIdSetCustomerRefIdPost'][0])
    {
        return $this->internalWalletsWalletIdSetCustomerRefIdPostAsyncWithHttpInfo($walletId, $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation internalWalletsWalletIdSetCustomerRefIdPostAsyncWithHttpInfo
     *
     * Set an AML/KYT customer reference ID for an internal wallet
     *
     * @param  string $walletId The wallet ID (required)
     * @param  \Developerayo\FireblocksLaravel\Models\VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdSetCustomerRefIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function internalWalletsWalletIdSetCustomerRefIdPostAsyncWithHttpInfo($walletId, $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, string $contentType = self::contentTypes['internalWalletsWalletIdSetCustomerRefIdPost'][0])
    {
        $returnType = '';
        $request = $this->internalWalletsWalletIdSetCustomerRefIdPostRequest($walletId, $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'internalWalletsWalletIdSetCustomerRefIdPost'
     *
     * @param  string $walletId The wallet ID (required)
     * @param  \Developerayo\FireblocksLaravel\Models\VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['internalWalletsWalletIdSetCustomerRefIdPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function internalWalletsWalletIdSetCustomerRefIdPostRequest($walletId, $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest, string $contentType = self::contentTypes['internalWalletsWalletIdSetCustomerRefIdPost'][0])
    {

        // verify the required parameter 'walletId' is set
        if ($walletId === null || (is_array($walletId) && count($walletId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $walletId when calling internalWalletsWalletIdSetCustomerRefIdPost'
            );
        }
        
        // verify the required parameter 'vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest' is set
        if ($vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest === null || (is_array($vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest) && count($vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest when calling internalWalletsWalletIdSetCustomerRefIdPost'
            );
        }


        $resourcePath = '/internal_wallets/{walletId}/set_customer_ref_id';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($walletId !== null) {
            $resourcePath = str_replace(
                '{' . 'walletId' . '}',
                ObjectSerializer::toPathValue($walletId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest));
            } else {
                $httpBody = $vaultAccountsVaultAccountIdSetCustomerRefIdPostRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
